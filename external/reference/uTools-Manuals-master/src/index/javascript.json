[{"name":"Introduction to using XPath in JavaScript","type":"","path":"javascript/Introduction_to_using_XPath_in_JavaScript.html","desc":"该篇文档描述了如何在扩展和网站内部通过JavaScript调用 XPath 接口。 Mozilla 实现了相当多的 DOM 3 XPath，意味着 Xpath 表达式已经可以在 HTML 和 XML 文档中使用。"},{"name":"JavaScript shells编程环境","type":"","path":"javascript/Shells.html","desc":"JavaScript shell 可以让你在不刷新一个网页的情况下测试一段 JavaScript 代码。这在开发和调试代码的时候非常有帮助。"},{"name":"JavaScript 中的差异化继承","type":"","path":"javascript/Differential_inheritance_in_JavaScript.html","desc":"差异化继承是基于原型编程的一个常见模型，它讲的是大部分的对象是从其他更一般的对象中派生而来的的，只是在一些很小的地方进行了修改。每个对象维护一个指向它们的 prototype 的引用和一个差异化属性列表。"},{"name":"JavaScript 中的相等性判断","type":"","path":"javascript/Equality_comparisons_and_sameness.html","desc":"ES2015中有四种相等算法："},{"name":"JavaScript 参考文档","type":"","path":"javascript/Reference.html","desc":"本章介绍如何使用 JavaScript函数 来开发应用程序。"},{"name":"JavaScript 属性索引","type":"Reference","path":"javascript/Reference/Properties_Index.html","desc":""},{"name":"JavaScript 方法索引","type":"Reference","path":"javascript/Reference/Methods_Index.html","desc":"这篇文章按照字母顺序列出了MDN里边所有的JavaScript方法。"},{"name":"JavaScript 标准库","type":"Reference","path":"javascript/Reference/Global_Objects.html","desc":""},{"name":"Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array.html","desc":"JavaScript的 Array 对象是用于构造数组的全局对象，数组是类似于列表的高阶对象。"},{"name":"Array.from()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/from.html","desc":"Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。"},{"name":"Array.isArray()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/isArray.html","desc":"Array.isArray() 用于确定传递的值是否是一个 Array。"},{"name":"Array.length","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/length.html","desc":"length 是Array的实例属性。返回或设置一个数组中的元素个数。该值是一个无符号 32-bit 整数，并且总是大于数组最高项的下标。"},{"name":"Array.observe()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/observe.html","desc":"Array.observe() 方法用于异步监视数组发生的变化，类似于针对对象的 Object.observe() 。当数组的值发生变化时，它按发生顺序提供了一个变化流。与 Object.observe() 类似，它由如下可接受的变化类型列表[&quot;add&quot;、&quot;update&quot;、&quot;delete&quot;、&quot;splice&quot;]触发。"},{"name":"Array.of()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/of.html","desc":"Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。"},{"name":"Array.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/prototype.html","desc":"Array.prototype  属性表示 Array 构造函数的原型，并允许您向所有Array对象添加新的属性和方法。"},{"name":"Array.prototype.concat()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/concat.html","desc":"concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。"},{"name":"Array.prototype.copyWithin()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/copyWithin.html","desc":"The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."},{"name":"Array.prototype.entries()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/entries.html","desc":"entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。"},{"name":"Array.prototype.every()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/every.html","desc":"every() 方法测试数组的所有元素是否都通过了指定函数的测试。"},{"name":"Array.prototype.fill()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/fill.html","desc":"fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。"},{"name":"Array.prototype.filter()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/filter.html","desc":"filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。"},{"name":"Array.prototype.find()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/find.html","desc":"find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。"},{"name":"Array.prototype.findIndex()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/findIndex.html","desc":"findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。"},{"name":"Array.prototype.flat()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/flat.html","desc":"flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。"},{"name":"Array.prototype.flatMap()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/flatMap.html","desc":"flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。"},{"name":"Array.prototype.forEach()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/forEach.html","desc":"forEach() 方法对数组的每个元素执行一次提供的函数。"},{"name":"Array.prototype.includes()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/includes.html","desc":"includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。"},{"name":"Array.prototype.indexOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/indexOf.html","desc":"indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。"},{"name":"Array.prototype.join()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/join.html","desc":"join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。"},{"name":"Array.prototype.keys()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/keys.html","desc":"keys() 方法返回一个包含数组中每个索引键的Array Iterator对象。"},{"name":"Array.prototype.lastIndexOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/lastIndexOf.html","desc":"lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。"},{"name":"Array.prototype.map()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/map.html","desc":"map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。"},{"name":"Array.prototype.pop()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/pop.html","desc":"pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。"},{"name":"Array.prototype.push()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/push.html","desc":"push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。"},{"name":"Array.prototype.reduce()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/Reduce.html","desc":"reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。"},{"name":"Array.prototype.reduceRight()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/ReduceRight.html","desc":"reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。"},{"name":"Array.prototype.reverse()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/reverse.html","desc":"reverse() 方法将数组中元素的位置颠倒,并返回该数组。该方法会改变原数组。"},{"name":"Array.prototype.shift()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/shift.html","desc":"shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。"},{"name":"Array.prototype.slice()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/slice.html","desc":"The source for this interactive demo is stored in a GitHub repository. If you'd like to contribute to the interactive demo project, please clone https://github.com/mdn/interactive-examples and send us a pull request."},{"name":"Array.prototype.some()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/some.html","desc":"some() 方法测试是否至少有一个元素通过由提供的函数实现的测试。"},{"name":"Array.prototype.sort()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/sort.html","desc":"sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串Unicode码点。"},{"name":"Array.prototype.splice()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/splice.html","desc":"splice() 方法通过删除或替换现有元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。"},{"name":"Array.prototype.toLocaleString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/toLocaleString.html","desc":"toLocaleString() 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 &quot;,&quot;）隔开。"},{"name":"Array.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/toSource.html","desc":"返回一个字符串,代表该数组的源代码."},{"name":"Array.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/toString.html","desc":"toString() 返回一个字符串，表示指定的数组及其元素。"},{"name":"Array.prototype.unshift()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/unshift.html","desc":"unshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。"},{"name":"Array.prototype.values()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/values.html","desc":"values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值"},{"name":"Array.prototype[@@iterator]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/@@iterator.html","desc":"@@iterator 属性和 Array.prototype.values() 属性的初始值均为同一个函数对象。"},{"name":"Array.prototype[@@unscopables]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/@@unscopables.html","desc":"Symbol属性 @@unscopable 包含了所有 ES2015 (ES6) 中新定义的且并未被更早的 ECMAScript 标准收纳的属性名。这些属性并不包含在 with 语句绑定的环境中"},{"name":"Array.unobserve()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/unobserve.html","desc":"Array.unobserve()方法用来移除Array.observe()设置的所有观察者。"},{"name":"get Array[@@species]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Array/@@species.html","desc":"Array[@@species]访问器属性返回 Array 的构造函数。"},{"name":"ArrayBuffer","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ArrayBuffer.html","desc":"The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."},{"name":"ArrayBuffer.isView()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ArrayBuffer/isView.html","desc":"The ArrayBuffer.isView() 方法当arg是一个ArrayBuffer的视图就返回true, 例如类型化数组对象(typed array objects )或者 一个数据视图(a DataView); 否则返回false."},{"name":"ArrayBuffer.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ArrayBuffer/prototype.html","desc":"ArrayBuffer.prototype属性表示ArrayBuffer对象的原型。"},{"name":"ArrayBuffer.prototype.byteLength","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ArrayBuffer/byteLength.html","desc":"byteLength访问器属性表示一个ArrayBuffer 对象的字节长度。"},{"name":"ArrayBuffer.prototype.slice()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ArrayBuffer/slice.html","desc":"slice()方法返回一个新的 ArrayBuffer ，它的内容是这个ArrayBuffer的字节副本，从begin（包括），到end（不包括）。"},{"name":"ArrayBuffer.transfer()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ArrayBuffer/transfer.html","desc":"静态ArrayBuffer.transfer() 方法返回一个新的ArrayBuffer， 其内容取自oldBuffer的数据，并且根据 newByteLength 的大小来对数据进行截取或者以0扩展。 如果 newByteLength 未定义，则使用 oldBuffer 的byteLength。这个操作使得 oldBuffer 处于被移除的状态。"},{"name":"get ArrayBuffer[@@species]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ArrayBuffer/@@species.html","desc":"该 ArrayBuffer[@@species] 访问器属性会返回 ArrayBuffer 构造器。"},{"name":"AsyncFunction","type":"Global_Objects","path":"javascript/Reference/Global_Objects/AsyncFunction.html","desc":"AsyncFunction 构造函数用来创建新的 异步函数 对象，JavaScript 中每个异步函数都是  AsyncFunction 的对象。"},{"name":"AsyncFunction.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/AsyncFunction/prototype.html","desc":"AsyncFunction.prototype 属性表示 AsyncFunction 的原型对象。"},{"name":"Atomics","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics.html","desc":"Atomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作。"},{"name":"Atomics.add()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics/add.html","desc":"Atomics.add() 静态方法会将给定的值加到数组里的某个特定位置上，并返回该位置的旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。"},{"name":"Atomics.and()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics/and.html","desc":"Atomics.and() 静态方法会将给定的值与数组上的值进行按位与操作，并将结果赋值给数组，然后返回数组该位置上的旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。"},{"name":"Atomics.compareExchange()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics/compareExchange.html","desc":"Atomics.compareExchange() 静态方法会在数组的值与期望值相等的时候，将给定的替换值替换掉数组上的值，然后返回旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。"},{"name":"Atomics.exchange()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics/exchange.html","desc":"Atomics.exchange() 静态方法会用给定的值替换掉数组上的值，然后返回数组的旧值。此原子操作保证在写上修改的值之前不会发生其他写操作。"},{"name":"Atomics.isLockFree()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics/isLockFree.html","desc":"静态方法 Atomics.isLockFree() 用于校验是否能够使用原子操作的TypedArray的标准字节长度之一. 若该字节长度为可处理的TypedArray标准字节长度之一则返回  true.  TypedArray的标准字节长度参见 BYTES_PER_ELEMENT"},{"name":"Atomics.load()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics/load.html","desc":"静态方法 Atomics.load() 返回一个数组当中给定位置的值。"},{"name":"Atomics.store()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Atomics/store.html","desc":"静态的Atomics.store（）方法将给定的值存储在数组中的指定位置，并返回该值。."},{"name":"BigInt","type":"Global_Objects","path":"javascript/Reference/Global_Objects/BigInt.html","desc":"在JavaScript中，Number 可以准确表达的最大数字是253，比253大的所有数字可以使用BigInt表达。"},{"name":"BigInt64Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/BigInt64Array.html","desc":"content here."},{"name":"Boolean","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Boolean.html","desc":"Boolean对象是一个布尔值的对象包装器。"},{"name":"Boolean.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Boolean/prototype.html","desc":"Boolean.prototype 属性表示Boolean 构造函数的原型。"},{"name":"Boolean.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Boolean/toSource.html","desc":"toSource（）方法返回一个表示对象的源码的字符串。"},{"name":"Boolean.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Boolean/toString.html","desc":"toString() 方法返回指定的布尔对象的字符串形式。"},{"name":"Boolean.prototype.valueOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Boolean/valueOf.html","desc":"valueOf() 方法返回一个Boolean对象的原始值。"},{"name":"DataView","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView.html","desc":"DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。"},{"name":"DataView.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/prototype.html","desc":"DataView.prototype 表示DataView的原型"},{"name":"DataView.prototype.buffer","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/buffer.html","desc":"buffer 属性描述了在构造时被 DataView 引用的 ArrayBuffer。"},{"name":"DataView.prototype.byteLength","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/byteLength.html","desc":"byteLength 属性描述了视图从它的 ArrayBuffer 开始的字节长度。"},{"name":"DataView.prototype.byteOffset","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/byteOffset.html","desc":"byteOffset 属性描述了从 ArrayBuffer 开始的字节偏移量。"},{"name":"DataView.prototype.getFloat32()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getFloat32.html","desc":"getFloat32()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(浮点型)."},{"name":"DataView.prototype.getFloat64()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getFloat64.html","desc":"getFloat64()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个64-bit数(双精度浮点型)."},{"name":"DataView.prototype.getInt16()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getInt16.html","desc":"getInt16()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个16-bit数(短整型)."},{"name":"DataView.prototype.getInt32()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getInt32.html","desc":"getInt32()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(长整型)."},{"name":"DataView.prototype.getInt8()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getInt8.html","desc":"getInt8()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个有符号的8-bit整数(一个字节)."},{"name":"DataView.prototype.getUint16()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getUint16.html","desc":"getUint16()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个16-bit数(无符号短整型)."},{"name":"DataView.prototype.getUint32()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getUint32.html","desc":"getUint32()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(无符号长整型)."},{"name":"DataView.prototype.getUint8()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/getUint8.html","desc":"getUint8()方法从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个无符号的8-bit整数(一个字节)."},{"name":"DataView.prototype.setFloat32()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setFloat32.html","desc":"setFloat32()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个32-bit数(浮点型)."},{"name":"DataView.prototype.setFloat64()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setFloat64.html","desc":"setFloat64()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个64-bit数(双精度浮点型)."},{"name":"DataView.prototype.setInt16()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setInt16.html","desc":"setInt16()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个16-bit数(短整型)."},{"name":"DataView.prototype.setInt32()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setInt32.html","desc":"setInt32()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个32-bit数(长整型)."},{"name":"DataView.prototype.setInt8()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setInt8.html","desc":"setInt8()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个8-bit数(一个字节)."},{"name":"DataView.prototype.setUint16()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setUint16.html","desc":"setUint16()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个16-bit数(无符号短整型)."},{"name":"DataView.prototype.setUint32()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setUint32.html","desc":"setUint32()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个32-bit数(无符号长整型)."},{"name":"DataView.prototype.setUint8()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DataView/setUint8.html","desc":"setUint8()从DataView起始位置以byte为计数的指定偏移量(byteOffset)处储存一个8-bit数(无符号字节)."},{"name":"Date","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date.html","desc":"The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."},{"name":"Date.UTC()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/UTC.html","desc":"Date.UTC() 方法接受的参数同日期构造函数接受最多参数时一样，返回从1970-1-1 00:00:00 UTC到指定日期的的毫秒数。"},{"name":"Date.now()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/now.html","desc":"Date.now() 方法返回自1970年1月1日 00:00:00 UTC到当前时间的毫秒数。"},{"name":"Date.parse()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/parse.html","desc":"Date.parse() 方法解析一个表示某个日期的字符串，并返回从1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的UTC时间）的毫秒数，如果该字符串无法识别，或者一些情况下，包含了不合法的日期数值（如：2015-02-31），则返回值为NaN。"},{"name":"Date.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/prototype.html","desc":"Date.prototype 属性表示Date构造函数的原型。"},{"name":"Date.prototype.getDate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getDate.html","desc":"根据本地时间，返回一个指定的日期对象为一个月中的哪一日（从1--31）。"},{"name":"Date.prototype.getDay()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getDay.html","desc":"getDay() 方法根据本地时间，返回一个具体日期中一周的第几天，0 表示星期天。"},{"name":"Date.prototype.getFullYear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getFullYear.html","desc":"getFullYear() 方法根据本地时间返回指定日期的年份。"},{"name":"Date.prototype.getHours()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getHours.html","desc":"getHours() 方法根据本地时间，返回一个指定的日期对象的小时。"},{"name":"Date.prototype.getMilliseconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getMilliseconds.html","desc":"getMilliseconds() 方法，根据本地时间，返回一个指定的日期对象的毫秒数。"},{"name":"Date.prototype.getMinutes()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getMinutes.html","desc":"getMinutes() 方法根据本地时间，返回一个指定的日期对象的分钟数。"},{"name":"Date.prototype.getMonth()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getMonth.html","desc":"根据本地时间，返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）。"},{"name":"Date.prototype.getSeconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getSeconds.html","desc":"getSeconds() 方法根据本地时间，返回一个指定的日期对象的秒数。"},{"name":"Date.prototype.getTime()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getTime.html","desc":"getTime() 方法返回一个时间的格林威治时间数值。"},{"name":"Date.prototype.getTimezoneOffset()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getTimezoneOffset.html","desc":"getTimezoneOffset() 方法返回协调世界时（UTC）相对于当前时区的时间差值，单位为分钟。"},{"name":"Date.prototype.getUTCDate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCDate.html","desc":"getUTCDate() 方法以世界时为标准，返回一个指定的日期对象为一个月中的第几天"},{"name":"Date.prototype.getUTCDay()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCDay.html","desc":"getUTCDay() 方法以世界时为标准，返回一个指定的日期对象为一星期中的第几天，其中 0 代表星期天。"},{"name":"Date.prototype.getUTCFullYear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCFullYear.html","desc":"getUTCFullYear() 以世界时为标准，返回一个指定的日期对象的年份。"},{"name":"Date.prototype.getUTCHours()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCHours.html","desc":"getUTCHours() 方法以世界时为标准，返回一个指定的日期对象的小时数。"},{"name":"Date.prototype.getUTCMilliseconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCMilliseconds.html","desc":"getUTCMilliseconds() 方法以世界时为标准，返回一个指定的日期对象的毫秒数。"},{"name":"Date.prototype.getUTCMinutes()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCMinutes.html","desc":"getUTCMinutes() 方法以世界时为标准，返回一个指定的日期对象的分钟数。"},{"name":"Date.prototype.getUTCMonth()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCMonth.html","desc":"getUTCMonth() 方法以世界时为标准，返回一个指定的日期对象的月份，它是从 0 开始计数的（0 代表一年的第一个月）。"},{"name":"Date.prototype.getUTCSeconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getUTCSeconds.html","desc":"getUTCSeconds() 方法以世界时为标准，返回一个指定的日期对象的秒数。"},{"name":"Date.prototype.getYear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/getYear.html","desc":"getYear() 方法返回指定的本地日期的年份。因为 getYear 不返回千禧年[full years] (&quot;year 2000 problem&quot;)，所以这个方法不再被使用，现在替换为 getFullYear ."},{"name":"Date.prototype.setDate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setDate.html","desc":"setDate() 方法根据本地时间来指定一个日期对象的天数。"},{"name":"Date.prototype.setFullYear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setFullYear.html","desc":"setFullYear() 方法根据本地时间为一个日期对象设置年份。"},{"name":"Date.prototype.setHours()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setHours.html","desc":"setHours() 方法根据本地时间为一个日期对象设置小时数，返回从1970-01-01 00:00:00 UTC 到更新后的 日期 对象实例所表示时间的毫秒数。"},{"name":"Date.prototype.setMilliseconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setMilliseconds.html","desc":"setMilliseconds() 方法会根据本地时间设置一个日期对象的豪秒数。"},{"name":"Date.prototype.setMinutes()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setMinutes.html","desc":"setMinutes() 方法根据本地时间为一个日期对象设置分钟数。"},{"name":"Date.prototype.setMonth()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setMonth.html","desc":"setMonth() 方法根据本地时间为一个设置年份的日期对象设置月份。"},{"name":"Date.prototype.setSeconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setSeconds.html","desc":"setSeconds() 方法根据本地时间设置一个日期对象的秒数。"},{"name":"Date.prototype.setTime()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setTime.html","desc":"setTime() 方法以一个表示从1970-1-1 00:00:00 UTC计时的毫秒数为来为 Date 对象设置时间。"},{"name":"Date.prototype.setUTCDate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setUTCDate.html","desc":"setUTCDate() 方法就是根据全球时间设置特定date对象的日期。"},{"name":"Date.prototype.setUTCFullYear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setUTCFullYear.html","desc":"setUTCFullYear() 方法根据世界标准时间为一个具体日期设置年份。"},{"name":"Date.prototype.setUTCHours()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setUTCHours.html","desc":"The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance."},{"name":"Date.prototype.setUTCMilliseconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setUTCMilliseconds.html","desc":"setUTCMilliseconds() 方法会根据世界时来设置指定时间的毫秒数。"},{"name":"Date.prototype.setUTCMinutes()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setUTCMinutes.html","desc":"setUTCMinutes()方法会根据世界协调时（UTC）来设置指定日期的分钟数。"},{"name":"Date.prototype.setUTCMonth()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setUTCMonth.html","desc":""},{"name":"Date.prototype.setUTCSeconds()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setUTCSeconds.html","desc":"此 setUTCSeconds() 方法为一个依据国际通用时间的特定日期设置秒数。"},{"name":"Date.prototype.setYear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/setYear.html","desc":"The setYear() method sets the year for a specified date according to local time. Because setYear does not set full years (&quot;year 2000 problem&quot;), it is no longer used and has been replaced by the setFullYear method."},{"name":"Date.prototype.toDateString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toDateString.html","desc":"toDateString() 方法以美式英语和人类易读的形式返回一个日期对象日期部分的字符串。"},{"name":"Date.prototype.toGMTString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toGMTString.html","desc":"The toGMTString() method converts a date to a string, using Internet GMT conventions. The exact format of the value returned by toGMTString varies according to the platform and browser, in general it should represent a human readable date string."},{"name":"Date.prototype.toISOString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toISOString.html","desc":"toISOString() 方法返回一个 ISO（ISO 8601 Extended Format）格式的字符串： YYYY-MM-DDTHH:mm:ss.sssZ。时区总是UTC（协调世界时），加一个后缀“Z”标识。"},{"name":"Date.prototype.toJSON()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toJSON.html","desc":"toJSON() 方法返回 Date 对象的字符串形式。"},{"name":"Date.prototype.toLocaleDateString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toLocaleDateString.html","desc":"toLocaleDateString() 方法返回该日期对象日期部分的字符串，该字符串格式因不同语言而不同。新增的参数 locales 和 options 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， locales 和 options 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。"},{"name":"Date.prototype.toLocaleFormat()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toLocaleFormat.html","desc":"非标准方法 toLocaleFormat() 按特定的格式将一个日期转换成一个字符串。 Intl.DateTimeFormat 是符合标准的格式化日期的替代方法。另见更新的(newer)版本的 Date.prototype.toLocaleDateString()方法."},{"name":"Date.prototype.toLocaleString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toLocaleString.html","desc":"toLocaleString() 方法返回该日期对象的字符串，该字符串格式因不同语言而不同。新增的参数 locales 和 options 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， locales 和 options 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。"},{"name":"Date.prototype.toLocaleTimeString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toLocaleTimeString.html","desc":"The toLocaleTimeString() 方法返回该日期对象时间部分的字符串，该字符串格式因不同语言而不同。新增的参数 locales 和 options 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， locales 和 options 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。"},{"name":"Date.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toSource.html","desc":"toSource() 返回表示源代码的字符串。"},{"name":"Date.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toString.html","desc":"toString() 方法返回一个字符串，表示该Date对象。"},{"name":"Date.prototype.toTimeString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toTimeString.html","desc":"toTimeString() 方法以人类易读形式返回一个日期对象时间部分的字符串，该字符串以美式英语格式化。"},{"name":"Date.prototype.toUTCString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/toUTCString.html","desc":"toUTCString() 方法把一个日期转换为一个字符串，使用UTC时区。"},{"name":"Date.prototype.valueOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/valueOf.html","desc":"valueOf() 方法返回一个 Date 对象的原始值。"},{"name":"Date.prototype[@@toPrimitive]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Date/@@toPrimitive.html","desc":"[@@toPrimitive]() 方法可以转换一个 Date 对象到一个原始值。"},{"name":"Error","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error.html","desc":"通过Error的构造器可以创建一个错误对象。当运行时错误产生时，Error的实例对象会被抛出。Error对象也可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。"},{"name":"Error.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/prototype.html","desc":"所有 Error 与 非标准Error 的实例都继承自 Error.prototype。同所有构造器函数一样，你可以在构造器的 prototype 上添加属性或者方法，使其在所有该构造器的实例上生效。"},{"name":"Error.prototype.columnNumber","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/columnNumber.html","desc":"columnNumber属性包含引发此错误的文件行中的列号。"},{"name":"Error.prototype.fileName","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/fileName.html","desc":"fileName 属性包含引发此错误的文件的路径."},{"name":"Error.prototype.lineNumber","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/lineNumber.html","desc":"lineNumber 属性的值为抛出错误的代码在其源文件中所在的行号。"},{"name":"Error.prototype.message","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/message.html","desc":"message 属性是有关错误信息，人类易读的（human-readable）描述。"},{"name":"Error.prototype.name","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/name.html","desc":"name 属性表示error类型的名称.初始值为&quot;Error&quot;."},{"name":"Error.prototype.stack","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/Stack.html","desc":"Error对象作为一个非标准的栈属性提供了一种函数追踪方式。无论这个函数被被调用，处于什么模式，来自于哪一行或者哪个文件，有着什么样的参数。这个栈产生于最近一次调用最早的那次调用，返回原始的全局作用域调用"},{"name":"Error.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/toSource.html","desc":"toSource() 方法返回可以计算出到相同错误的代码。"},{"name":"Error.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Error/toString.html","desc":"toString() 方法返回一个指定的错误对象（Error object）的字符串表示。"},{"name":"EvalError","type":"Global_Objects","path":"javascript/Reference/Global_Objects/EvalError.html","desc":"本对象代表了一个关于 eval 函数的错误.此异常不再会被JavaScript抛出，但是EvalError对象仍然保持兼容性."},{"name":"EvalError.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/EvalError/prototype.html","desc":"EvalError.prototype 属性是 EvalError 原型构造函数."},{"name":"Float32Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Float32Array.html","desc":"Float32Array 类型数组代表的是平台字节顺序为32位的浮点数型数组(对应于 C 浮点数据类型) 。 如果需要控制字节顺序， 使用 DataView 替代。其内容初始化为0。一旦建立起来，你可以使用这个对象的方法对其元素进行操作，或者使用标准数组索引语法 (使用方括号)。"},{"name":"Float64Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Float64Array.html","desc":"Float64Array 类型数组代表的是平台字节顺序为64位的浮点数型数组(对应于 C 浮点数据类型) 。 如果需要控制字节顺序， 使用 DataView 替代。其内容初始化为0。一旦建立起来，你可以使用这个对象的方法对其元素进行操作，或者使用标准数组索引语法 (使用方括号)。"},{"name":"Function","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function.html","desc":"Function 构造函数 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个Function对象。"},{"name":"Function.arguments","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/arguments.html","desc":"function.arguments 属性代表传入函数的实参，它是一个类数组对象。"},{"name":"Function.arity","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/arity.html","desc":"返回一个函数的形参数量."},{"name":"Function.caller","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/caller.html","desc":"返回调用指定函数的函数."},{"name":"Function.displayName","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/displayName.html","desc":"function.displayName 属性获取函数的显示名称"},{"name":"Function.length","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/length.html","desc":"length 属性指明函数的形参个数。"},{"name":"Function.name","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/name.html","desc":"name 属性返回一个函数声明的名称。"},{"name":"Function.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/prototype.html","desc":"Function.prototype 属性存储了 Function 的原型对象。"},{"name":"Function.prototype.apply()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/apply.html","desc":"apply() 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。"},{"name":"Function.prototype.bind()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/bind.html","desc":"bind()方法创建一个新的函数，在调用时设置this关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。"},{"name":"Function.prototype.call()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/call.html","desc":"call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。"},{"name":"Function.prototype.isGenerator()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/isGenerator.html","desc":"判断一个函数是否是一个生成器."},{"name":"Function.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/toSource.html","desc":"返回函数的源代码的字符串表示."},{"name":"Function.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Function/toString.html","desc":"toString() 方法返回一个表示当前函数源代码的字符串。"},{"name":"Generator","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Generator.html","desc":"生成器对象是由一个 generator function 返回的,并且它符合可迭代协议和迭代器协议。"},{"name":"Generator.prototype.next()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Generator/next.html","desc":"next() 方法返回一个包含属性 done 和 value 的对象。该方法也可以通过接受一个参数用以向生成器传值。"},{"name":"Generator.prototype.return()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Generator/return.html","desc":"return() 方法返回给定的值并结束生成器。"},{"name":"Generator.prototype.throw()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Generator/throw.html","desc":"throw() 方法用来向生成器抛出异常，并恢复生成器的执行，返回带有 done 及 value 两个属性的对象。"},{"name":"GeneratorFunction","type":"Global_Objects","path":"javascript/Reference/Global_Objects/GeneratorFunction.html","desc":"GeneratorFunction构造器生成新的生成器函数 对象。在JavaScript中，生成器函数实际上都是GeneratorFunction的实例对象。"},{"name":"GeneratorFunction.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/GeneratorFunction/prototype.html","desc":"GeneratorFunction.prototype属性是GeneratorFunction的原型对象。"},{"name":"Infinity","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Infinity.html","desc":"全局属性 Infinity 是一个数值，表示无穷大。"},{"name":"Int16Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Int16Array.html","desc":"The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."},{"name":"Int32Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Int32Array.html","desc":"The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."},{"name":"Int8Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Int8Array.html","desc":"Int8Array 类型数组表示二进制补码8位有符号整数的数组。内容初始化为0。 一旦建立，你可以使用对象的方法引用数组中的元素，或使用标准数组索引语法( 即，使用括号注释)。"},{"name":"InternalError","type":"Global_Objects","path":"javascript/Reference/Global_Objects/InternalError.html","desc":"InternalError 对象表示出现在JavaScript引擎内部的错误。 例如： &quot;InternalError: too much recursion&quot;（内部错误：递归过深）。"},{"name":"Intl","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Intl.html","desc":"Intl 对象是 ECMAScript 国际化 API 的一个命名空间，它提供了精确的字符串对比、数字格式化，和日期时间格式化。Collator，NumberFormat 和 DateTimeFormat 对象的构造函数是 Intl 对象的属性。本页文档内容包括了这些属性，以及国际化使用的构造器和其他语言的方法等常见的功能。"},{"name":"Intl.getCanonicalLocales()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Intl/getCanonicalLocales.html","desc":"Intl.getCanonicalLocales() 方法返回一个数组，数组包含规范的区域语言代码，重复的元素将会被去除，每一个元素都会被验证为格式有效的区域语言代码。"},{"name":"Intl.Collator","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Collator.html","desc":"Intl.Collator 是用于语言敏感字符串比较的 collators构造函数。"},{"name":"Intl.DateTimeFormat","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DateTimeFormat.html","desc":"交互示例的源代码存储在 GitHub 资源库。如果你愿意分布交互示例，请复制https://github.com/mdn/interactive-examples，并向我们发送一个pull请求。"},{"name":"Intl.DateTimeFormat.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/DateTimeFormat/prototype.html","desc":"Intl.DateTimeFormat.prototype表示 Intl.DateTimeFormat构造函数的原型对象。"},{"name":"Intl.ListFormat","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ListFormat.html","desc":"Intl.ListFormat 是一个语言相关的列表格式化构造器。"},{"name":"Intl.NumberFormat","type":"Global_Objects","path":"javascript/Reference/Global_Objects/NumberFormat.html","desc":""},{"name":"Intl.NumberFormat.prototype.format","type":"Global_Objects","path":"javascript/Reference/Global_Objects/NumberFormat/format.html","desc":"Intl.NumberFormat.prototype.format 属性返回一个根据NumberFormat对象的语言环境和格式化选项，来格式化一个数字的getter函数。"},{"name":"Intl.PluralRules","type":"Global_Objects","path":"javascript/Reference/Global_Objects/PluralRules.html","desc":"该对象的英文请立即获取iTunes多种敏感格式状语从句：多种语言规则的对象的构造函数。Intl.PluralRules"},{"name":"JSON","type":"Global_Objects","path":"javascript/Reference/Global_Objects/JSON.html","desc":"JSON对象包含两个方法: 用于解析 JavaScript Object Notation  (JSON) 的 parse() 方法，以及将对象/值转换为 JSON字符串的 stringify() 方法。除了这两个方法, JSON这个对象本身并没有其他作用，也不能被调用或者作为构造函数调用。"},{"name":"JSON.parse()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/JSON/parse.html","desc":"JSON.parse() 方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。提供可选的reviver函数用以在返回之前对所得到的对象执行变换(操作)。"},{"name":"JSON.stringify()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/JSON/stringify.html","desc":"JSON.stringify() 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，如果指定了replacer是一个函数，则可以替换值，或者如果指定了replacer是一个数组，可选的仅包括指定的属性。"},{"name":"Map","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map.html","desc":"Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。"},{"name":"Map.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/prototype.html","desc":"Map.prototype 属性表示 Map构造函数的原型对象。"},{"name":"Map.prototype.clear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/clear.html","desc":"clear()方法会移除Map对象中的所有元素。"},{"name":"Map.prototype.delete()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/delete.html","desc":"delete() 方法用于移除 Map 对象中指定的元素。"},{"name":"Map.prototype.entries()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/entries.html","desc":"entries() ?方法返回一个新的包含 [key, value] ?对的 Iterator ?对象，返回的迭代器的迭代顺序与 Map 对象的插入顺序相同。"},{"name":"Map.prototype.forEach()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/forEach.html","desc":"forEach() 方法将会以插入顺序对 Map 对象中的每一个键值对执行一次参数中提供的回调函数。"},{"name":"Map.prototype.get()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/get.html","desc":"get() 方法返回某个 Map 对象中的一个指定元素。"},{"name":"Map.prototype.has()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/has.html","desc":"方法has() 返回一个bool值，用来表明map 中是否存在指定元素."},{"name":"Map.prototype.keys()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/keys.html","desc":"keys() 返回一个新的 Iterator 对象。它包含按照顺序插入 Map 对象中每个元素的key值。"},{"name":"Map.prototype.set()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/set.html","desc":"set() 方法为 Map 对象添加或更新一个指定了键（key）和值（value）的（新）键值对。"},{"name":"Map.prototype.size","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/size.html","desc":"size 是可访问属性，用于返回 一个Map 对象的成员数量。"},{"name":"Map.prototype.values()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/values.html","desc":"一个新的 Map 可迭代对象."},{"name":"Map.prototype[@@iterator]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/@@iterator.html","desc":"@@iterator 属性的初始值与 entries 属性的初始值是同一个函数对象。"},{"name":"Map.prototype[@@toStringTag]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/@@toStringTag.html","desc":"Map[@@toStringTag] 的初始值是&quot;Map&quot;."},{"name":"get Map[@@species]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Map/@@species.html","desc":"Map[@@species] 访问器属性会返回一个 Map 构造函数."},{"name":"Math","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math.html","desc":"Math 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。"},{"name":"Math.E","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/E.html","desc":"Math.E 属性表示自然对数的底数（或称为基数），e，约等于 2.718。"},{"name":"Math.LN10","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/LN10.html","desc":"Math.LN10 属性表示 10 的自然对数，约为 2.302："},{"name":"Math.LN2","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/LN2.html","desc":"Math.LN2 属性表示 2 的自然对数，约为 0.693："},{"name":"Math.LOG10E","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/LOG10E.html","desc":"Math.LOG10E 属性表示以 10 为底数，e 的对数，约为 0.434："},{"name":"Math.LOG2E","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/LOG2E.html","desc":"Math.LOG2E 属性表示以 2 为底数，e 的对数，约为 1.442："},{"name":"Math.PI","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/PI.html","desc":"Math.PI 表示一个圆的周长与直径的比例，约为 3.14159："},{"name":"Math.SQRT1_2","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/SQRT1_2.html","desc":"Math.SQRT1_2 属性表示 1/2 的平方根，约为 0.707："},{"name":"Math.SQRT2","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/SQRT2.html","desc":"Math.SQRT2 属性表示 2 的平方根，约为 1.414："},{"name":"Math.abs()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/abs.html","desc":"Math.abs(x) 函数返回指定数字 “x“ 的绝对值。如下："},{"name":"Math.acos()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/acos.html","desc":"Math.acos() 返回一个数的反余弦值（单位为弧度），即："},{"name":"Math.acosh()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/%E5%8F%8D%E5%8F%8C%E6%9B%B2%E4%BD%99%E5%BC%A6%E5%80%BC.html","desc":"Math.acosh()返回一个数字的反双曲余弦值，即："},{"name":"Math.asin()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/asin.html","desc":"Math.asin() 方法返回一个数值的反正弦（单位为弧度），即："},{"name":"Math.asinh()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/asinh.html","desc":"Math.asinh() 函数返回给定数字的反双曲正弦值, 即："},{"name":"Math.atan()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/atan.html","desc":"Math.atan() 函数返回一个数值的反正切（以弧度为单位），即："},{"name":"Math.atan2()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/atan2.html","desc":"Math.atan2() 返回其参数比值的反正切值。"},{"name":"Math.atanh()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/atanh.html","desc":"Math.atanh() 函数返回一个数值反双曲正切值, 即："},{"name":"Math.cbrt()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/cbrt.html","desc":"Math.cbrt() 函数返回任意数字的立方根."},{"name":"Math.ceil()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/ceil.html","desc":"Math.ceil() 函数返回大于或等于一个给定数字的最小整数。"},{"name":"Math.clz32()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/clz32.html","desc":"Math.clz32() 函数返回一个数字在转换成 32 无符号整形数字的二进制形式后, 开头的 0 的个数, 比如 1000000 转换成 32 位无符号整形数字的二进制形式后是 00000000000011110100001001000000, 开头的 0 的个数是 12 个, 则 Math.clz32(1000000) 返回 12."},{"name":"Math.cos()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/cos.html","desc":"Math.cos() 函数返回一个数值的余弦值。"},{"name":"Math.cosh()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/cosh.html","desc":"Math.cosh() 函数返回数值的双曲余弦函数, 可用 constant e 表示:"},{"name":"Math.exp()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/exp.html","desc":"Math.exp() 函数返回 ex，x 表示参数，e 是欧拉常数（Euler's constant），自然对数的底数。"},{"name":"Math.expm1()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/expm1.html","desc":"Math.expm1() 函数返回 Ex - 1, 其中 x 是该函数的参数, E 是自然对数的底数 2.718281828459045."},{"name":"Math.floor()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/floor.html","desc":"Math.floor() 返回小于或等于一个给定数字的最大整数。"},{"name":"Math.fround()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/fround.html","desc":"Math.fround() 可以将任意的数字转换为离它最近的单精度浮点数形式的数字。"},{"name":"Math.hypot()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/hypot.html","desc":"Math.hypot() 函数返回它的所有参数的平方和的平方根，即："},{"name":"Math.imul()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/imul.html","desc":"该函数返回两个参数的类C的32位整数乘法运算的运算结果."},{"name":"Math.log()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/log.html","desc":"Math.log() 函数返回一个数的自然对数，即："},{"name":"Math.log10()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/log10.html","desc":"Math.log10() 函数返回一个数字以 10 为底的对数."},{"name":"Math.log1p()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/log1p.html","desc":"Math.log1p() 函数返回一个数字加1后的自然对数 (底为 E), 既log(x+1)."},{"name":"Math.log2()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/log2.html","desc":"Math.log2() 函数返回一个数字以 2 为底的对数."},{"name":"Math.max()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/max.html","desc":"Math.max() 函数返回一组数中的最大值。"},{"name":"Math.min()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/min.html","desc":"Math.min() 返回零个或更多个数值的最小值。"},{"name":"Math.pow()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/pow.html","desc":"Math.pow() 函数返回基数（base）的指数（exponent）次幂，即 baseexponent。"},{"name":"Math.random()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/random.html","desc":"Math.random() 函数返回一个浮点,  伪随机数在范围[0，1)，也就是说，从0（包括0）往上，但是不包括1（排除1），然后您可以缩放到所需的范围。实现将初始种子选择到随机数生成算法;它不能被用户选择或重置。"},{"name":"Math.round()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/round.html","desc":"Math.round() 函数返回一个数字四舍五入后最接近的整数。"},{"name":"Math.sign()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/sign.html","desc":"Math.sign() 函数返回一个数字的符号, 指示数字是正数，负数还是零。"},{"name":"Math.sin()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/sin.html","desc":"Math.sin() 函数返回一个数值的正弦值。"},{"name":"Math.sinh()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/sinh.html","desc":"Math.sinh() 函数返回一个数字(单位为角度)的双曲正弦值."},{"name":"Math.sqrt()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/sqrt.html","desc":"Math.sqrt() 函数返回一个数的平方根，即："},{"name":"Math.tan()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/tan.html","desc":"Math.tan() 方法返回一个数值的正切值。"},{"name":"Math.tanh()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/tanh.html","desc":"Math.tanh() 函数将会返回一个数的双曲正切函数值，计算如下:"},{"name":"Math.trunc()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Math/trunc.html","desc":"Math.trunc() 方法会将数字的小数部分去掉，只保留整数部分。"},{"name":"NaN","type":"Global_Objects","path":"javascript/Reference/Global_Objects/NaN.html","desc":"全局属性 NaN 的值表示不是一个数字（Not-A-Number）。"},{"name":"Number","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number.html","desc":"JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。Number 对象由 Number() 构造器创建。"},{"name":"Number.EPSILON","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/EPSILON.html","desc":"Number.EPSILON 属性表示 1 与Number可表示的大于 1 的最小的浮点数之间的差值。"},{"name":"Number.MAX_SAFE_INTEGER","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER.html","desc":"Number.MAX_SAFE_INTEGER 常量表示在 JavaScript 中最大的安全整数（maxinum safe integer)（253 - 1）。"},{"name":"Number.MAX_VALUE","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/MAX_VALUE.html","desc":"Number.MAX_VALUE 属性表示在 JavaScript 里所能表示的最大数值。"},{"name":"Number.MIN_SAFE_INTEGER","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER.html","desc":"Number.MIN_SAFE_INTEGER 代表在 JavaScript中最小的安全的integer型数字 (-(253 - 1))."},{"name":"Number.MIN_VALUE","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/MIN_VALUE.html","desc":"Number.MIN_VALUE 属性表示在 JavaScript 中所能表示的最小的正值。"},{"name":"Number.NEGATIVE_INFINITY","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/NEGATIVE_INFINITY.html","desc":"Number.NEGATIVE_INFINITY 属性表示负无穷大。"},{"name":"Number.NaN","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/NaN.html","desc":"Number.NaN 表示“非数字”（Not-A-Number）。和 NaN 相同。"},{"name":"Number.POSITIVE_INFINITY","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/POSITIVE_INFINITY.html","desc":"Number.POSITIVE_INFINITY 属性表示正无穷大。"},{"name":"Number.isFinite()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/isFinite.html","desc":"Number.isFinite() 方法用来检测传入的参数是否是一个有穷数（finite number）。"},{"name":"Number.isInteger()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/isInteger.html","desc":"Number.isInteger() 方法用来判断给定的参数是否为整数。"},{"name":"Number.isNaN()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/isNaN.html","desc":"Number.isNaN() 方法确定传递的值是否为 NaN和其类型是 Number。它是原始的全局isNaN()的更强大的版本。"},{"name":"Number.isSafeInteger()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/isSafeInteger.html","desc":"Number.isSafeInteger() 方法用来判断传入的参数值是否是一个“安全整数”（safe integer）。一个安全整数是一个符合下面条件的整数："},{"name":"Number.parseFloat()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/parseFloat.html","desc":"Number.parseFloat() 方法可以把一个字符串解析成浮点数。该方法与全局的 parseFloat() 函数相同，并且处于 ECMAScript 6 规范中（用于全局变量的模块化）。"},{"name":"Number.parseInt()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/parseInt.html","desc":"Number.parseInt() 方法可以根据给定的进制数把一个字符串解析成整数。"},{"name":"Number.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/prototype.html","desc":"Number.prototype 属性表示 Number 构造函数的原型。"},{"name":"Number.prototype.toExponential()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/toExponential.html","desc":"toExponential() 方法以指数表示法返回该数值字符串表示形式。"},{"name":"Number.prototype.toFixed()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/toFixed.html","desc":"toFixed() 方法使用定点表示法来格式化一个数。"},{"name":"Number.prototype.toLocaleString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/toLocaleString.html","desc":"toLocaleString() 方法返回这个数字在特定语言环境下的表示字符串。"},{"name":"Number.prototype.toPrecision()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/toPrecision.html","desc":"toPrecision() 方法以指定的精度返回该数值对象的字符串表示。"},{"name":"Number.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/toSource.html","desc":"toSource() 方法返回该对象源码的字符串表示。"},{"name":"Number.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/toString.html","desc":"toString() 方法返回指定 Number 对象的字符串表示形式。"},{"name":"Number.prototype.valueOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/valueOf.html","desc":"valueOf() 方法返回一个被 Number 对象包装的原始值。"},{"name":"Number.toInteger()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Number/toInteger.html","desc":"Number.toInteger() 用来将参数转换成整数,但该方法的实现已被移除."},{"name":"Object","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object.html","desc":"Object 构造函数创建一个对象包装器。"},{"name":"Object.assign()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/assign.html","desc":"Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。"},{"name":"Object.create()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/create.html","desc":"Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 （请打开浏览器控制台以查看运行结果。）"},{"name":"Object.defineProperties()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/defineProperties.html","desc":"Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。"},{"name":"Object.defineProperty()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/defineProperty.html","desc":"Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。"},{"name":"Object.defineProperty 的补充示例","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/defineProperty/Additional_examples.html","desc":"本页为Object.defineProperty()提供一个附加示例。"},{"name":"Object.entries()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/entries.html","desc":"The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."},{"name":"Object.freeze()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/freeze.html","desc":"Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。"},{"name":"Object.fromEntries()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/fromEntries.html","desc":"方法 Object.fromEntries() 把键值对列表转换为一个对象。"},{"name":"Object.getNotifier()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/getNotifier.html","desc":"Object.getNotifer() 方法用于创建可人工触发 change 事件的对象，但该方法在浏览器中已被废弃。"},{"name":"Object.getOwnPropertyDescriptor()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/getOwnPropertyDescriptor.html","desc":"Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）"},{"name":"Object.getOwnPropertyDescriptors()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/getOwnPropertyDescriptors.html","desc":"Object.getOwnPropertyDescriptors() 方法用来获取一个对象的所有自身属性的描述符。"},{"name":"Object.getOwnPropertyNames()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/getOwnPropertyNames.html","desc":"Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。"},{"name":"Object.getOwnPropertySymbols()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/getOwnPropertySymbols.html","desc":"Object.getOwnPropertySymbols() 方法返回一个给定对象自身的所有 Symbol 属性的数组。"},{"name":"Object.getPrototypeOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/GetPrototypeOf.html","desc":"Object.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。"},{"name":"Object.is()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/is.html","desc":"Object.is() 方法判断两个值是否是相同的值。"},{"name":"Object.isExtensible()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/isExtensible.html","desc":"Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。"},{"name":"Object.isFrozen()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/isFrozen.html","desc":"Object.isFrozen()方法判断一个对象是否被冻结。"},{"name":"Object.isSealed()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/isSealed.html","desc":"Object.isSealed() 方法判断一个对象是否被密封。"},{"name":"Object.keys()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/keys.html","desc":"Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致 。"},{"name":"Object.observe()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/observe.html","desc":"Object.observe() 方法用于异步地监视一个对象的修改。当对象属性被修改时，方法的回调函数会提供一个有序的修改流。然而，这个接口已经被废弃并从各浏览器中移除。你可以使用更通用的 Proxy 对象替代。"},{"name":"Object.preventExtensions()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/preventExtensions.html","desc":"Object.preventExtensions()方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。"},{"name":"Object.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/prototype.html","desc":"Object.prototype 属性表示 Object 的原型对象。"},{"name":"Object.prototype.__count__","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/count.html","desc":"__count__ 属性曾经用来存放对象的可枚举的属性的个数，但是已经被废除。"},{"name":"Object.prototype.__defineGetter__()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/__defineGetter__.html","desc":"__defineGetter__ 方法可以将一个函数绑定在当前对象的指定属性上，当那个属性的值被读取时，你所绑定的函数就会被调用。"},{"name":"Object.prototype.__defineSetter__()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/__defineSetter__.html","desc":"__defineSetter__ 方法可以将一个函数绑定在当前对象的指定属性上，当那个属性被赋值时，你所绑定的函数就会被调用。"},{"name":"Object.prototype.__lookupGetter__()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/__lookupGetter__.html","desc":"__lookupGetter__ 方法会返回当前对象上指定属性的属性读取访问器函数（getter）。"},{"name":"Object.prototype.__lookupSetter__()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/__lookupSetter__.html","desc":"一个绑定了setter的特殊属性的函数引用。"},{"name":"Object.prototype.__noSuchMethod__","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/noSuchMethod.html","desc":"__noSuchMethod__ 属性曾经是指当调用某个对象里不存在的方法时即将被执行的函数，但是现在这个函数已经不可用。"},{"name":"Object.prototype.__parent__","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/Parent.html","desc":"指向一个对象的上下文."},{"name":"Object.prototype.__proto__","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/proto.html","desc":"使用__proto__是有争议的，也不鼓励使用它。因为它从来没有被包括在EcmaScript语言规范中，但是现代浏览器都实现了它。__proto__属性已在ECMAScript 6语言规范中标准化，用于确保Web浏览器的兼容性，因此它未来将被支持。它已被不推荐使用, 现在更推荐使用Object.getPrototypeOf/Reflect.getPrototypeOf 和Object.setPrototypeOf/Reflect.setPrototypeOf（尽管如此，设置对象的[[Prototype]]是一个缓慢的操作，如果性能是一个问题，应该避免）。"},{"name":"Object.prototype.constructor","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/constructor.html","desc":"返回创建实例对象的 Object 构造函数的引用。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。对原始类型来说，如1，true和&quot;test&quot;，该值只可读。"},{"name":"Object.prototype.eval()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/eval.html","desc":"Object.eval() 方法用于在对象的上下文中对 JavaScript 代码字符串求值，但该方法已被移除。"},{"name":"Object.prototype.hasOwnProperty()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/hasOwnProperty.html","desc":"hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性"},{"name":"Object.prototype.isPrototypeOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/isPrototypeOf.html","desc":"isPrototypeOf() 方法用于测试一个对象是否存在于另一个对象的原型链上。"},{"name":"Object.prototype.propertyIsEnumerable()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/propertyIsEnumerable.html","desc":"propertyIsEnumerable() 方法返回一个布尔值，表示指定的属性是否可枚举。"},{"name":"Object.prototype.toLocaleString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/toLocaleString.html","desc":"toLocaleString() 方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。"},{"name":"Object.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/toSource.html","desc":"toSource()方法返回一个表示对象源代码的字符串。"},{"name":"Object.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/toString.html","desc":"toString() 方法返回一个表示该对象的字符串。"},{"name":"Object.prototype.unwatch()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/unwatch.html","desc":"unwatch() 删除一个 watch() 设置的 watchpoint."},{"name":"Object.prototype.valueOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/valueOf.html","desc":"valueOf() 方法返回指定对象的原始值。"},{"name":"Object.prototype.watch()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/watch.html","desc":"undefined."},{"name":"Object.seal()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/seal.html","desc":"The source for this interactive example is stored in a GitHub repository. If you'd like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request."},{"name":"Object.setPrototypeOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/setPrototypeOf.html","desc":"如果对象的[[Prototype]]被修改成不可扩展(通过 Object.isExtensible()查看)，就会抛出 TypeError异常。如果prototype参数不是一个对象或者null(例如，数字，字符串，boolean，或者 undefined)，则什么都不做。否则，该方法将obj的[[Prototype]]修改为新的值。"},{"name":"Object.unobserve()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/unobserve.html","desc":"Object.unobserve() 是用来移除通过 Object.observe()设置的观察者的方法。"},{"name":"Object.values()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Object/values.html","desc":"Object.values()方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用for...in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。"},{"name":"ParallelArray","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ParallelArray.html","desc":"ParallelArray的目标是在web应用程序中让数据并行."},{"name":"Promise","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise.html","desc":"Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。"},{"name":"Promise.all()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/all.html","desc":"Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。"},{"name":"Promise.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/prototype.html","desc":"Promise.prototype 属性表示 Promise 构造器的原型."},{"name":"Promise.prototype.catch()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/catch.html","desc":"catch() 方法返回一个Promise，并且处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。 (事实上, calling obj.catch(onRejected) 内部calls obj.then(undefined, onRejected))."},{"name":"Promise.prototype.finally()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/finally.html","desc":"返回一个设置了 finally 回调函数的Promise对象。"},{"name":"Promise.prototype.then()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/then.html","desc":"then() 方法返回一个  Promise 。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。"},{"name":"Promise.race()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/race.html","desc":"Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。"},{"name":"Promise.reject()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/reject.html","desc":"Promise.reject(reason)方法返回一个带有拒绝原因reason参数的Promise对象。"},{"name":"Promise.resolve()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Promise/resolve.html","desc":"The source for this interactive demo is stored in a GitHub repository. If you'd like to contribute to the interactive demo project, please clone https://github.com/mdn/interactive-examples and send us a pull request."},{"name":"Proxy","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy.html","desc":"Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。"},{"name":"Proxy.revocable()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/revocable.html","desc":"Proxy.revocable() 方法可以用来创建一个可撤销的代理对象。"},{"name":"处理器对象","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler.html","desc":"处理器对象用来自定义代理对象的各种可代理操作。"},{"name":"handler.apply()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/apply.html","desc":"handler.apply() 方法用于拦截函数的调用。"},{"name":"handler.construct()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/construct.html","desc":"handler.construct() 方法用于拦截new 操作符. 为了使new操作符在生成的Proxy对象上生效，用于初始化代理的目标对象自身必须具有[[Construct]]内部方法（即 new target 必须是有效的）。"},{"name":"handler.defineProperty()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/defineProperty.html","desc":"handler.defineProperty() 用于拦截对对象的 Object.defineProperty() 操作。"},{"name":"handler.deleteProperty()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/deleteProperty.html","desc":"handler.deleteProperty() 方法用于拦截对对象属性的 delete 操作。"},{"name":"handler.enumerate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/enumerate.html","desc":"代理方法handler.enumerate()决定了被代理对象在for...in中的行为。不过这个方法已经在ES2016标准中被移除了。"},{"name":"handler.get()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/get.html","desc":"handler.get() 方法用于拦截对象的读取属性操作。"},{"name":"handler.getOwnPropertyDescriptor()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor.html","desc":"handler.getOwnPropertyDescriptor() 方法是 Object.getOwnPropertyDescriptor()  的陷阱。"},{"name":"handler.getPrototypeOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/getPrototypeOf.html","desc":"handler.getPrototypeOf() 是一个代理方法，当读取代理对象的原型时，该方法就会被调用。"},{"name":"handler.has()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/has.html","desc":"handler.has() 方法可以看作是针对 in 操作的钩子."},{"name":"handler.isExtensible()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/isExtensible.html","desc":"下列参数将会被传递给 isExtensible方法。 this 绑定在 handler 对象上。"},{"name":"handler.ownKeys()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/ownKeys.html","desc":"handler.ownKeys() 方法用于拦截 Reflect.ownKeys()."},{"name":"handler.preventExtensions()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/preventExtensions.html","desc":"handler.preventExtensions() 方法用于设置对"},{"name":"handler.set()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/set.html","desc":"handler.set() 方法用于拦截设置属性值的操作"},{"name":"handler.setPrototypeOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Proxy/handler/setPrototypeOf.html","desc":"handler.setPrototypeOf() 方法主要用来拦截 Object.setPrototypeOf()."},{"name":"RangeError","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RangeError.html","desc":"RangeError对象标明一个错误，当一个值不在其所允许的范围或者集合中。"},{"name":"RangeError.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RangeError/prototype.html","desc":"所有  RangeError 的实例都继承自 RangeError.prototype ，所以你可以使用这个属性来为所有的实例添加属性或方法。"},{"name":"ReferenceError","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ReferenceError.html","desc":"ReferenceError（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。"},{"name":"ReferenceError.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/ReferenceError/prototype.html","desc":"ReferenceError.prototype 表示 ReferenceError 的原型构造器。"},{"name":"Reflect","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect.html","desc":"Reflect 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与处理器对象的方法相同。Reflect不是一个函数对象，因此它是不可构造的。"},{"name":"Reflect.apply()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/apply.html","desc":"静态方法 Reflect.apply() 通过指定的参数列表发起对目标(target)函数的调用。"},{"name":"Reflect.construct()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/construct.html","desc":"Reflect.construct() 方法的行为有点像 new 操作符 构造函数 ， 相当于运行 new target(...args)."},{"name":"Reflect.defineProperty()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/defineProperty.html","desc":"静态方法 Reflect.defineProperty() 基本等同于 Object.defineProperty() 方法，唯一不同是返回 Boolean 值。"},{"name":"Reflect.deleteProperty()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/deleteProperty.html","desc":"静态方法 Reflect.deleteProperty() 允许用于删除属性。它很像 delete operator ，但它是一个函数。"},{"name":"Reflect.enumerate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/enumerate.html","desc":"目标对象自身和继承的可迭代属性的一个迭代器。"},{"name":"Reflect.get()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/get.html","desc":"Reflect.get() 方法的工作方式，就像从 object (target[propertyKey]) 中获取属性，但它是作为一个函数执行的。"},{"name":"Reflect.getOwnPropertyDescriptor()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor.html","desc":"静态方法 Reflect.getOwnPropertyDescriptor() 与 Object.getOwnPropertyDescriptor() 方法相似。如果在对象中存在，则返回给定的属性的属性描述符。否则返回 undefined。"},{"name":"Reflect.getPrototypeOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/getPrototypeOf.html","desc":"静态方法 Reflect.getPrototypeOf() 与 Object.getPrototypeOf() 方法是一样的。都是返回指定对象的原型（即，内部的 [[Prototype]] 属性的值）。"},{"name":"Reflect.has()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/has.html","desc":"静态方法 Reflect.has() 作用与 in 操作符 相同。"},{"name":"Reflect.isExtensible()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/isExtensible.html","desc":"静态方法 Reflect.isExtensible() 判断一个对象是否可扩展 （即是否能够添加新的属性）。与它 Object.isExtensible() 方法相似，但有一些不同，详情可见 differences。"},{"name":"Reflect.ownKeys()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/ownKeys.html","desc":"静态方法 Reflect.ownKeys() 返回一个由目标对象自身的属性键组成的数组。"},{"name":"Reflect.preventExtensions()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/preventExtensions.html","desc":"静态方法 Reflect.preventExtensions() 方法阻止新属性添加到对象 例如：防止将来对对象的扩展被添加到对象中)。该方法与 Object.preventExtensions()相似，但有一些不同点。详情可见 differences。"},{"name":"Reflect.set()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/set.html","desc":"静态方法 Reflect.set() 工作方式就像在一个对象上设置一个属性。"},{"name":"Reflect.setPrototypeOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Reflect/setPrototypeOf.html","desc":"静态方法 Reflect.setPrototypeOf() 与 Object.setPrototypeOf() 方法是一致的。它将指定对象的原型 （即，内部的[[Prototype]] 属性）设置为另一个对象或为 null。"},{"name":"RegExp","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp.html","desc":"RegExp 构造函数创建了一个正则表达式对象，用于将文本与一个模式匹配。"},{"name":"RegExp.$1-$9","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/n.html","desc":"非标准$1, $2, $3, $4, $5, $6, $7, $8, $9 属性是包含括号子串匹配的正则表达式的静态和只读属性。"},{"name":"RegExp.input ($_)","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/input.html","desc":"input 非标准属性是正则表达式静态属性，含有正则表达式所匹配的字符串。RegExp.$_是这个属性的别名。"},{"name":"RegExp.lastIndex","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/lastIndex.html","desc":"lastIndex 是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。"},{"name":"RegExp.lastMatch ($&)","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/lastMatch.html","desc":"lastMatch 非标准属性是正则表达式的静态和只读属性，含有最后匹配到的字符串。RegExp.$& 是这个属性的别名。"},{"name":"RegExp.lastParen ($+)","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/lastParen.html","desc":"lastParen 非标准属性是正则表达式的静态和只读属性，包含匹配到的最后一个子串（如果存在）。RegExp.$+是这一属性的别名。"},{"name":"RegExp.leftContext ($`)","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/leftContext.html","desc":"leftContext 非标准属性是正则表达式的静态和只读属性，含有最新匹配的左侧子串。 RegExp.$` 是这个属性的别名。"},{"name":"RegExp.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/prototype.html","desc":"RegExp.prototype 属性表示 RegExp 构造函数的原型对象。"},{"name":"RegExp.prototype.compile()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/compile.html","desc":"已废弃的compile() 方法被用于在脚本执行过程中（重新）编译正则表达式。与RegExp构造函数基本一样。"},{"name":"RegExp.prototype.dotAll","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/dotAll.html","desc":"dotAll 属性表明是否在正则表达式中一起使用&quot;s&quot;修饰符（引入/s修饰符，使得.可以匹配任意单个字符）。dotAll 是一个只读的属性，属于单个正则表达式实例。"},{"name":"RegExp.prototype.exec()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/exec.html","desc":"exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。"},{"name":"RegExp.prototype.flags","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/flags.html","desc":"flags属性返回一个字符串，由当前正则表达式对象的标志组成。"},{"name":"RegExp.prototype.global","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/global.html","desc":"global 属性表明正则表达式是否使用了 &quot;g&quot; 标志。global 是一个正则表达式实例的只读属性。"},{"name":"RegExp.prototype.ignoreCase","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/ignoreCase.html","desc":"ignoreCase 属性表明正则表达式是否使用了 &quot;i&quot; 标志。ignoreCase 是正则表达式实例的只读属性。"},{"name":"RegExp.prototype.multiline","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/multiline.html","desc":"multiline 属性表明正则表达式是否使用了 &quot;m&quot; 标志。multiline 是正则表达式实例的一个只读属性。"},{"name":"RegExp.prototype.source","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/source.html","desc":"source 属性返回一个值为当前正则表达式对象的模式文本的字符串，该字符串不会包含正则字面量两边的斜杠以及任何的标志字符。"},{"name":"RegExp.prototype.sticky","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/sticky.html","desc":"sticky 属性反映了搜索是否具有粘性（ 仅从正则表达式的 lastIndex 属性表示的索引处搜索 ）。sticky 是正则表达式对象的只读属性。"},{"name":"RegExp.prototype.test()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/test.html","desc":"test() 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false。"},{"name":"RegExp.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/toSource.html","desc":"返回一个字符串,代表当前对象的源代码"},{"name":"RegExp.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/toString.html","desc":"toString() 返回一个表示该正则表达式的字符串。"},{"name":"RegExp.prototype.unicode","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/unicode.html","desc":"unicode 属性表明正则表达式带有&quot;u&quot; 标志。 unicode 是正则表达式独立实例的只读属性。"},{"name":"RegExp.prototype[@@matchAll]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/@@matchAll.html","desc":"[@@matchAll]方法返回对字符串使用正则表达式的所有匹配项。"},{"name":"RegExp.prototype[@@match]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/@@match.html","desc":"对正则表达式匹配字符串时，[@@match]()方法用于获取匹配结果。"},{"name":"RegExp.prototype[@@replace]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/@@replace.html","desc":"[@@replace]() 方法会在一个字符串中用给定的替换器，替换所有符合正则模式的匹配项，并返回替换后的新字符串结果。用来替换的参数可以是一个字符串或是一个针对每次匹配的回调函数。"},{"name":"RegExp.prototype[@@search]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/@@search.html","desc":"[@@search]() 方法执行了一个在给定字符串中的一个搜索以取得匹配正则模式的项。"},{"name":"RegExp.prototype[@@split]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/@@split.html","desc":"[@@split]() 方法切割 String 对象为一个其子字符串的数组 。"},{"name":"RegExp.rightContext ($')","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/rightContext.html","desc":"rightContext 非标准属性是正则表达式的静态和只读属性，含有最新匹配的右侧子串。 RegExp.$' 是这个属性的别名。"},{"name":"get RegExp[@@species]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/RegExp/@@species.html","desc":"RegExp[@@species] 访问器属性返回RegExp 的构造器。"},{"name":"Set","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set.html","desc":"Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。"},{"name":"Set.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/prototype.html","desc":"Set.prototype属性表示Set构造器的原型。"},{"name":"Set.prototype.add()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/add.html","desc":"add() 方法用来向一个 Set 对象的末尾添加一个指定的值。"},{"name":"Set.prototype.clear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/clear.html","desc":"clear() 方法用来清空一个 Set 对象中的所有元素。"},{"name":"Set.prototype.delete()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/delete.html","desc":"delete() 方法可以从一个 Set 对象中删除指定的元素。"},{"name":"Set.prototype.entries()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/entries.html","desc":"entries() 方法返回一个新的迭代器对象 ，这个对象的元素是类似 [value, value] 形式的数组，value 是集合对象中的每个元素，迭代器对象元素的顺序即集合对象中元素插入的顺序。由于集合对象不像 Map 对象那样拥有 key，然而，为了与 Map 对象的 API 形式保持一致，故使得每一个 entry 的 key 和 value 都拥有相同的值，因而最终返回一个 [value, value] 形式的数组。"},{"name":"Set.prototype.forEach()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/forEach.html","desc":"forEach 方法根据集合中元素的顺序，对每个元素都执行提供的 callback 函数一次。"},{"name":"Set.prototype.has()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/has.html","desc":"has() 方法返回一个布尔值来指示对应的值value是否存在Set对象中。"},{"name":"Set.prototype.size","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/size.html","desc":"Size属性将会返回Set对象中元素的个数。"},{"name":"Set.prototype.values()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/values.html","desc":"values() 方法返回一个 Iterator  对象，这个对象以插入 Set 对象的顺序包含了原 Set 对象里的每个元素。"},{"name":"Set.prototype[@@iterator]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/@@iterator.html","desc":"The initial value of the @@iterator property is the same function object as the initial value of the values property."},{"name":"get Set[@@species]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Set/@@species.html","desc":"Set[@@species] 访问器属性返回Set的构造函数."},{"name":"SharedArrayBuffer","type":"Global_Objects","path":"javascript/Reference/Global_Objects/SharedArrayBuffer.html","desc":"SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。"},{"name":"SharedArrayBuffer.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/SharedArrayBuffer/prototype.html","desc":"SharedArrayBuffer.prototype  属性表示 SharedArrayBuffer  对象的原型。"},{"name":"SharedArrayBuffer.prototype.byteLength","type":"Global_Objects","path":"javascript/Reference/Global_Objects/SharedArrayBuffer/byteLength.html","desc":"byteLength 访问器属性表示以字节为单位的一个SharedArrayBuffer的长度。"},{"name":"SharedArrayBuffer.prototype.slice()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/SharedArrayBuffer/slice.html","desc":"SharedArrayBuffer.prototype.slice() 方法返回一个新的SharedArrayBuffer 其内容是该SharedArrayBuffer的字节从开始包含，直到结束，独占的副本。如果开始或结束是负的，它指的是从数组末尾开始的索引。此方法与 Array.prototype.slice() 具有相同的算法。"},{"name":"String","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String.html","desc":"String 全局对象是一个用于字符串或一个字符序列的构造函数。"},{"name":"String.fromCharCode()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/fromCharCode.html","desc":"静态 String.fromCharCode() 方法返回由指定的UTF-16代码单元序列创建的字符串。"},{"name":"String.fromCodePoint()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/fromCodePoint.html","desc":""},{"name":"String.length","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/length.html","desc":"length 属性表示一个字符串的长度。"},{"name":"String.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/prototype.html","desc":"String.prototype 属性表示 String原型对象。"},{"name":"String.prototype.anchor()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/anchor.html","desc":"anchor() 方法创建一个 <a> HTML 锚元素，被用作超文本靶标（hypertext target）。"},{"name":"String.prototype.big()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/big.html","desc":"big()方法的作用是创建一个使字符串显示大号字体的<big>标签。"},{"name":"String.prototype.blink()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/blink.html","desc":"blink()方法创建使字符串闪烁的 <blink> HTML 元素。"},{"name":"String.prototype.bold()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/bold.html","desc":"bold() 方法会创建 HTML 元素 “b”，并将字符串加粗展示。"},{"name":"String.prototype.charAt()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/charAt.html","desc":"charAt() 方法从一个字符串中返回指定的字符。"},{"name":"String.prototype.charCodeAt()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/charCodeAt.html","desc":"charCodeAt() 方法返回0到65535之间的整数，表示给定索引处的UTF-16代码单元 (在 Unicode 编码单元表示一个单一的 UTF-16 编码单元的情况下，UTF-16 编码单元匹配 Unicode 编码单元。但在——例如 Unicode 编码单元 > 0x10000 的这种——不能被一个 UTF-16 编码单元单独表示的情况下，只能匹配 Unicode 代理对的第一个编码单元) 。如果你想要整个代码点的值，使用 codePointAt()。"},{"name":"String.prototype.codePointAt()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/codePointAt.html","desc":"codePointAt() 方法返回 一个 Unicode 编码点值的非负整数。"},{"name":"String.prototype.concat()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/concat.html","desc":"concat() 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。"},{"name":"String.prototype.endsWith()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/endsWith.html","desc":"endsWith()方法用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。"},{"name":"String.prototype.fixed()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/fixed.html","desc":"fixed()方法创建了一个<tt>标签元素将字符串包裹起来，从而让这个字符串里面的内容具有固定间距。</tt>"},{"name":"String.prototype.fontcolor()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/fontcolor.html","desc":"fontcolor()方法创建一个<font>的HTML元素让字符串被显示成指定的字体颜色。"},{"name":"String.prototype.fontsize()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/fontsize.html","desc":"The fontsize() method creates a <font> HTML element that causes a string to be displayed in the specified font size."},{"name":"String.prototype.includes()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/includes.html","desc":"includes() 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。"},{"name":"String.prototype.indexOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/indexOf.html","desc":"indexOf() 方法返回调用  String 对象中第一次出现的指定值的索引，开始在 fromIndex进行搜索。"},{"name":"String.prototype.italics()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/italics.html","desc":"The italics() method creates an <i> HTML element that causes a string to be italic."},{"name":"String.prototype.lastIndexOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/lastIndexOf.html","desc":"lastIndexOf() 方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。从该字符串的后面向前查找，从 fromIndex 处开始。"},{"name":"String.prototype.link()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/link.html","desc":"link() 方法创建一个 HTML 元素 <a> ，用该字符串作为超链接的显示文本，参数作为指向另一个 URL 的超链接。"},{"name":"String.prototype.localeCompare()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/localeCompare.html","desc":"localeCompare() 方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。"},{"name":"String.prototype.match()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/match.html","desc":"match() 方法检索返回一个字符串匹配正则表达式的的结果。"},{"name":"String.prototype.matchAll()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/matchAll.html","desc":"matchAll() 方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。"},{"name":"String.prototype.normalize()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/normalize.html","desc":"normalize() 方法会按照指定的一种 Unicode 正规形式将当前字符串正规化."},{"name":"String.prototype.padEnd()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/padEnd.html","desc":"padEnd()  方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。"},{"name":"String.prototype.padStart()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/padStart.html","desc":"padStart() 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。"},{"name":"String.prototype.quote()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/quote.html","desc":"将字符串中包含的特殊字符进行转义(反斜杠),然后在字符串两边各加上一个双引号(&quot;)并返回,并不修改原字符串."},{"name":"String.prototype.repeat()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/repeat.html","desc":"repeat() 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。"},{"name":"String.prototype.replace()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/replace.html","desc":"replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。"},{"name":"String.prototype.search()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/search.html","desc":"search() 方法执行正则表达式和 String对象之间的一个搜索匹配。"},{"name":"String.prototype.slice()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/slice.html","desc":"slice() 方法提取一个字符串的一部分，并返回一新的字符串。"},{"name":"String.prototype.small()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/small.html","desc":"small() 方法的作用是创建一个使字符串显示小号字体的 <small> 标签。"},{"name":"String.prototype.split()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/split.html","desc":"split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。"},{"name":"String.prototype.startsWith()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/startsWith.html","desc":"startsWith()方法用来判断当前字符串是否是以另外一个给定的子字符串“开头”的，根据判断结果返回 true 或 false。"},{"name":"String.prototype.strike()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/strike.html","desc":"strike()方法创建<strike> HTML 元素，使字符串展示为被删除的文本。"},{"name":"String.prototype.sub()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/sub.html","desc":"sub()方法创建一个 <sub> HTML 元素，使字符串展示为下标。"},{"name":"String.prototype.substr()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/substr.html","desc":"substr() 方法返回一个字符串中从指定位置开始到指定字符数的字符。"},{"name":"String.prototype.substring()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/substring.html","desc":"substring() 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。"},{"name":"String.prototype.sup()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/sup.html","desc":"sup()方法创建 一个<sup>HTML 元素，使字符串显示为上标。"},{"name":"String.prototype.toLocaleLowerCase()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/toLocaleLowerCase.html","desc":"toLocaleLowerCase()方法根据任何特定于语言环境的案例映射，返回调用字符串值转换为小写的值。"},{"name":"String.prototype.toLocaleUpperCase()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/toLocaleUpperCase.html","desc":"toLocaleUpperCase() 使用本地化（locale-specific）的大小写映射规则将输入的字符串转化成大写形式并返回结果字符串。"},{"name":"String.prototype.toLowerCase()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/toLowerCase.html","desc":"toLowerCase() 会将调用该方法的字符串值转为小写形式，并返回。"},{"name":"String.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/toSource.html","desc":"toSource() 方法返回一个代表对象的源代码。"},{"name":"String.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/toString.html","desc":"toString() 方法返回指定对象的字符串形式。"},{"name":"String.prototype.toUpperCase()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/toUpperCase.html","desc":"toUpperCase() 将调用该方法的字符串值转换为大写形式，并返回。"},{"name":"String.prototype.trim()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/Trim.html","desc":"trim() 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。"},{"name":"String.prototype.trimLeft()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/TrimLeft.html","desc":"一个新字符串，表示从其开头（左端）剥离空格的调用字符串。"},{"name":"String.prototype.trimRight()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/TrimRight.html","desc":"trimRight() 方法从一个字符串的右端移除空白字符。"},{"name":"String.prototype.valueOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/valueOf.html","desc":"valueOf() 方法返回一个String对象的原始值（primitive value）。"},{"name":"String.prototype[@@iterator]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/@@iterator.html","desc":"[@@iterator]() 方法返回一个新的Iterator对象，它遍历字符串的代码点，返回每一个代码点的字符串值。"},{"name":"String.raw()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/String/raw.html","desc":"String.raw() 是一个模板字符串的标签函数，它的作用类似于 Python 中的字符串前缀 r 和 C# 中的字符串前缀 @，是用来获取一个模板字符串的原始字面量值的。"},{"name":"Symbol","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol.html","desc":"Symbol()函数会返回symbol类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：&quot;new Symbol()&quot;。"},{"name":"Symbol.for()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/for.html","desc":"Symbol.for(key) 方法会根据给定的键 key，来从运行时的 symbol 注册表中找到对应的 symbol，如果找到了，则返回它，否则，新建一个与该键关联的 symbol，并放入全局 symbol 注册表中。"},{"name":"Symbol.hasInstance","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/hasInstance.html","desc":"Symbol.hasInstance 用于判断某对象是否为某构造器的实例。 因此你可以用它自定义 instanceof 操作符在某个类上的行为。"},{"name":"Symbol.isConcatSpreadable","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/isConcatSpreadable.html","desc":"内置的Symbol.isConcatSpreadable符号用于配置某对象作为Array.prototype.concat()方法的参数时是否展开其数组元素。"},{"name":"Symbol.iterator","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/iterator.html","desc":"Symbol.iterator 为每一个对象定义了默认的迭代器。该迭代器可以被 for...of 循环使用。"},{"name":"Symbol.keyFor()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/keyFor.html","desc":"Symbol.keyFor(sym) 方法用来获取 symbol 注册表中与某个 symbol 关联的键。"},{"name":"Symbol.match","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/match.html","desc":"Symbol.match 指定了匹配的是正则表达式而不是字符串。String.prototype.match() 方法会调用此函数。"},{"name":"Symbol.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/prototype.html","desc":"Symbol.prototype 表示 Symbol 构造函数的原型。."},{"name":"Symbol.prototype.description","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/description.html","desc":"description 是一个只读属性，它会返回 Symbol 对象的可选描述的字符串。"},{"name":"Symbol.prototype.toSource()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/toSource.html","desc":"toSource() 方法返回代表该对象源码的字符串。"},{"name":"Symbol.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/toString.html","desc":"toString() 方法返回当前 symbol 对象的字符串表示。"},{"name":"Symbol.prototype.valueOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/valueOf.html","desc":"valueOf() 方法返回当前 symbol 对象所包含的 symbol 原始值。"},{"name":"Symbol.prototype[@@toPrimitive]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/@@toPrimitive.html","desc":"[@@toPrimitive]() 方法可将 Symbol 对象转换为原始值。"},{"name":"Symbol.replace","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/replace.html","desc":"Symbol.replace 这个属性指定了当一个字符串替换所匹配字符串时所调用的方法。String.prototype.replace() 方法会调用此方法。"},{"name":"Symbol.search","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/search.html","desc":"Symbol.search 指定了一个搜索方法，这个方法接受用户输入的正则表达式，返回该正则表达式在字符串中匹配到的下标，这个方法由以下的方法来调用 String.prototype.search()。"},{"name":"Symbol.species","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/species.html","desc":"知名的 Symbol.species 是个函数值属性，其被构造函数用以创建派生对象。"},{"name":"Symbol.split","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/split.html","desc":"Symbol.split 指向 一个正则表达式的索引处分割字符串的方法。 这个方法通过 String.prototype.split() 调用。"},{"name":"Symbol.toPrimitive","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/toPrimitive.html","desc":"Symbol.toPrimitive 指将被调用的指定函数值的属性转换为相对应的原始值。"},{"name":"Symbol.toStringTag","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/toStringTag.html","desc":"Symbol.toStringTag 是一个内置 symbol，它通常作为对象的属性键使用，对应的属性值应该为字符串类型，这个字符串用来表示该对象的自定义类型标签，通常只有内置的 Object.prototype.toString() 方法会去读取这个标签并把它包含在自己的返回值里。"},{"name":"Symbol.unscopables","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Symbol/unscopables.html","desc":"Symbol.unscopables 指用于指定对象值，其对象自身和继承的从关联对象的 with 环境绑定中排除的属性名称。"},{"name":"SyntaxError","type":"Global_Objects","path":"javascript/Reference/Global_Objects/SyntaxError.html","desc":"SyntaxError 对象代表尝试解析语法上不合法的代码的错误。"},{"name":"SyntaxError.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/SyntaxError/prototype.html","desc":"SyntaxError.prototype 属性表示SyntaxError 构造器的原型."},{"name":"TypeError","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypeError.html","desc":"TypeError（类型错误） 对象用来表示值的类型非预期类型时发生的错误。"},{"name":"TypeError.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypeError/prototype.html","desc":"TypeError.prototype 属性表示 TypeError构造函数的原型。"},{"name":"TypedArray","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray.html","desc":"一个TypedArray 对象描述一个底层的二进制数据缓存区的一个类似数组(array-like)视图。事实上，没有名为 TypedArray的全局对象，也没有一个名为的 TypedArray构造函数。相反，有许多不同的全局对象，下面会列出这些针对特定元素类型的类型化数组的构造函数。在下面的页面中，你会找到一些不管什么类型都公用的属性和方法。"},{"name":"TypedArray.BYTES_PER_ELEMENT","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT.html","desc":"TypedArray.BYTES_PER_ELEMENT 属性代表了强类型数组中每个元素所占用的字节数。"},{"name":"TypedArray.from()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/from.html","desc":"TypedArray.from() 方法 从一个类数组或者可迭代对象中创建一个新类型数组。 这个方法和 Array.from()类似。"},{"name":"TypedArray.name","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/name.html","desc":"TypedArray.name ?属性是描述类型数组构造名的字符串值。"},{"name":"TypedArray.of()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/of.html","desc":"TypedArray.of() 方法创建一个具有可变数量参数的新类型数组 。此方法几乎与Array.of() 相同。"},{"name":"TypedArray.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/prototype.html","desc":"TypedArray.prototype属性表示TypedArray构造器的原型."},{"name":"TypedArray.prototype.buffer","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/buffer.html","desc":"buffer访问器属性表示由TypedArray在构造期间引用的ArrayBuffer。"},{"name":"TypedArray.prototype.byteLength","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/byteLength.html","desc":"byteLength访问器属性表示类型化数组的长度（字节数）。"},{"name":"TypedArray.prototype.byteOffset","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/byteOffset.html","desc":"byteOffset 访问器属性表示类型化数组距离其ArrayBuffer起始位置的偏移（字节数）。"},{"name":"TypedArray.prototype.copyWithin()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/copyWithin.html","desc":"copyWithin()方法将数组中的元素序列复制到以target起始的位置。 副本取自第二个参数和第三个参数 start 和end的位置下标。end 参数是可选的，默认为数组长度。这个方法的算法和Array.prototype.copyWithin相同。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.entries()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/entries.html","desc":"The entries()返回新的Array Iterator对象，包含数组每个下标处的键值对。"},{"name":"TypedArray.prototype.every()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/every.html","desc":"every() 方法测试类型化数组的所有元素是否都能够通过由提供函数实现的测试。这个方法的算法与 Array.prototype.every()相同。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.fill()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/fill.html","desc":"fill() 方法将类型化数组中的从起始索引到终止索引内的全部元素。这个方法的算法和 Array.prototype.fill() 相同。 TypedArray 是这里的类型化数组类型之一。"},{"name":"TypedArray.prototype.filter()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/filter.html","desc":"filter()创建新的类型化数组，含有所有通过了测试的元素，测试由提供的函数实现。这个方法的算法和 Array.prototype.filter()相同。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.find()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/find.html","desc":"如果某个元素满足所提供的测试函数，find()方法返回类型化数组中的 值。否则返回undefined 。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.findIndex()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/findIndex.html","desc":"如果某个元素满足所提供的测试函数，findIndex()方法返回类型化数组中的 下标。否则返回 -1。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.forEach()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/forEach.html","desc":"forEach()方法对类型化数组的每个元素调用提供的函数。 这个方法的算法和 Array.prototype.forEach()相同。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.includes()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/includes.html","desc":"includes()方法判断类型化数组中是否含有特定元素，并相应返回true 或者false ，这个方法的算法和Array.prototype.includes()相同。 TypedArray 是这里的 类型化数组 之一。"},{"name":"TypedArray.prototype.indexOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/indexOf.html","desc":"indexOf() 方法返回在类型数组中可以找到给定元素的第一个索引，如果不存在，则返回-1。 方法具有与 Array.prototype.indexOf() 相同的算法。 TypedArray是这里的类型化数组类型之一。"},{"name":"TypedArray.prototype.join()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/join.html","desc":"join()方法将数组中所有元素连接为一个字符串。这个方法的算法和Array.prototype.join()相同。 TypedArray 是这里的 类型化数组 之一。"},{"name":"TypedArray.prototype.keys()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/keys.html","desc":"keys()方法返回新的 Array Iterator 对象，包含数组中每个下标的键。"},{"name":"TypedArray.prototype.lastIndexOf()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/lastIndexOf.html","desc":"lastIndexOf() 方法返回在类型数组中可以找到给定元素的最后一个索引，如果不存在，则返回-1。 方法具有与 Array.prototype.lastIndexOf() 相同的算法。 TypedArray是这里的类型化数组类型之一。"},{"name":"TypedArray.prototype.length","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/length.html","desc":"length访问器属性表示类型化数组的长度（元素数）。"},{"name":"TypedArray.prototype.map()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/map.html","desc":"map()方法对类型化数组的每个元素调用提供的函数，并使用结果来创建新的类型化数组。 这个方法的算法和 Array.prototype.map()相同。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.move()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/move.html","desc":"move()方法将数组中的元素序列复制到以target起始的位置。但是，这个非标准方法已经被TypedArray.prototype.copyWithin() 标准方法取代。TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.reduce()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/reduce.html","desc":"reduce() 方法接受一个函数作为参数，这个函数作为一个累加器，从左到右遍历整个类型数组，最后返回一个单一的值. 这个方法和Array.prototype.reduce()使用了同样的算法. TypedArray 是一个 类型数组."},{"name":"TypedArray.prototype.reduceRight()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/reduceRight.html","desc":"reduceRight()在累加器和类型化数组的每个元素上（从右到左）调用函数，使其归约为单一的值。这个方法的算法和 Array.prototype.reduceRight()相同。 TypedArray 是这里的类型化数组类型 之一。"},{"name":"TypedArray.prototype.reverse()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/reverse.html","desc":"reverse()方法原地翻转类型化数组。类型化数组的第一个元素变为最后一个，最后一个变为第一个。这个方法的算法和Array.prototype.reverse()相同。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.set()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/set.html","desc":"set() 方法用于从指定数组中读取值，并将其存储在类型化数组中。"},{"name":"TypedArray.prototype.slice()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/slice.html","desc":"slice()方法返回一个typed array的部分类型数组对象，数组内容采用浅拷贝方式. 方法采用与 Array.prototype.slice()相同的算法. 类型数组是 typed array types成员中的一员 ."},{"name":"TypedArray.prototype.some()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/some.html","desc":"这个 some() 方法检测 TypedArray 的一些元素是否通过所提供函数的测试. 这个方法和 Array.prototype.some() 相同. TypedArray 是 typed array types 之一."},{"name":"TypedArray.prototype.sort()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/sort.html","desc":"sort()方法原地排序类型化数组的元素，并且返回类型化数组。这个方法的算法和Array.prototype.sort()相同。 TypedArray 是这里的 类型化数组类型 之一。"},{"name":"TypedArray.prototype.subarray()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/subarray.html","desc":""},{"name":"TypedArray.prototype.toLocaleString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/toLocaleString.html","desc":"toLocaleString()方法返回一个字符串，表明该类型化数组的元素。这些元素被转化为字符串并由一个区域设置指定的分隔符（例如逗号 “,”）分隔。这个方法与Array.prototype.toLocaleString()拥有相同的算法。同时，由于类型化数组的元素都是数，将每个元素转化为字符串的算法与Number.prototype.toLocaleString()是相同的。（类型化数组）的是typed array types中的其中一个。"},{"name":"TypedArray.prototype.toString()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/toString.html","desc":"toString()方法返回一个表示指定数组及其元素的字符串。这个方法的算法和Array.prototype.toString()一样。TypedArray 在这是typed array types 之一。"},{"name":"TypedArray.prototype.values()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/values.html","desc":"values()返回新的 Array Iterator 对象，包含数组中每个下标处的值。"},{"name":"TypedArray.prototype[@@iterator]()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/@@iterator.html","desc":"@@iterator 的初始值是和 values 属性的初始值相同的对象。"},{"name":"get TypedArray[@@species]","type":"Global_Objects","path":"javascript/Reference/Global_Objects/TypedArray/@@species.html","desc":"TypedArray[@@species] 访问器属性返回类型化数组的构造器。"},{"name":"URIError","type":"Global_Objects","path":"javascript/Reference/Global_Objects/URIError.html","desc":"URIError 对象用来表示以一种错误的方式使用全局URI处理函数而产生的错误。"},{"name":"URIError.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/URIError/prototype.html","desc":"所有的 URIError 实例都继承自 URIError.prototype。 可以通过原型(prototype) 给所有的实例添加属性或者方法。"},{"name":"Uint16Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Uint16Array.html","desc":"The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."},{"name":"Uint32Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Uint32Array.html","desc":"Uint32Array表示一个由基于平台字节序的32位无符号字节组成的数组.如果需要对字节顺序进行控制(译者注:即 littleEndian 或 bigEndian),请使用DataView代替.数组中每个元素的初始值都是0.一旦创建，你可以用对象的方法引用数组里的元素，或者使用标准的数组索引语法（即，使用中括号）。"},{"name":"Uint8Array","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Uint8Array.html","desc":"Uint8Array 数组类型表示一个8位无符号整型数组，创建时内容被初始化为0。创建完后，可以以对象的方式或使用数组下标索引的方式引用数组中的元素。"},{"name":"Uint8ClampedArray","type":"Global_Objects","path":"javascript/Reference/Global_Objects/Uint8ClampedArray.html","desc":"Uint8ClampedArray（8位无符号整型固定数组） 类型化数组表示一个由值固定在0-255区间的8位无符号整型组成的数组；如果你指定一个在 [0,255] 区间外的值，它将被替换为0或255；如果你指定一个非整数，那么它将被设置为最接近它的整数。（数组）内容被初始化为0。一旦（数组）被创建，你可以使用对象的方法引用数组里的元素，或使用标准的数组索引语法（即使用方括号标记）。"},{"name":"WeakMap","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakMap.html","desc":"WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。"},{"name":"WeakMap.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakMap/prototype.html","desc":"WeakMap.prototype属性表现为 WeakMap的构造器。"},{"name":"WeakMap.prototype.clear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakMap/clear.html","desc":"clear()用来从 WeakMap对象中移除所有元素。但不再是ECMAScript和它的实现部分。"},{"name":"WeakMap.prototype.delete()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakMap/delete.html","desc":"delete() 方法可以从一个 WeakMap 对象中删除指定的元素。"},{"name":"WeakMap.prototype.get()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakMap/get.html","desc":"get() 方法返回  WeakMap 指定的元素。"},{"name":"WeakMap.prototype.has()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakMap/has.html","desc":"has() 方法根据WeakMap对象的元素中是否存在key键返回一个boolean值。"},{"name":"WeakMap.prototype.set()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakMap/set.html","desc":"set() 方法根据指定的key和value在 WeakMap对象中添加新/更新元素。"},{"name":"WeakSet","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakSet.html","desc":"WeakSet 对象允许你将弱保持对象存储在一个集合中。"},{"name":"WeakSet.prototype","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakSet/prototype.html","desc":"The WeakSet.prototype property represents the prototype for the WeakSet constructor."},{"name":"WeakSet.prototype.add()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakSet/add.html","desc":"add() 方法在 WeakSet 对象的最后一个元素后添加新的对象。"},{"name":"WeakSet.prototype.clear()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakSet/clear.html","desc":"clear() 方法用于删除 WeakSet 对象的所有元素，但是已经不是 ECMAScript 的一部分了。"},{"name":"WeakSet.prototype.delete()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakSet/delete.html","desc":"delete() 方法从 WeakSet 对象中移除指定的元素。"},{"name":"WeakSet.prototype.has()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WeakSet/has.html","desc":"has() 方法根据 WeakSet 是否存在相应对象返回布尔值。"},{"name":"WebAssembly","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly.html","desc":"WebAssemblyJavaScript 对象是所有 WebAssembly 相关功能的命名空间。"},{"name":"WebAssembly.Global","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/Global.html","desc":"WebAssembly.Global 对象表示一个全局变量实例, 可以被JavaScript 和importable/exportable 访问 ,跨越一个或多个WebAssembly.Module 实例. 他允许被多个modules动态连接."},{"name":"WebAssembly.Instance","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/Instance.html","desc":"一个 WebAssembly.Instance 对象是有状态的, 是WebAssembly.Module 的一个可执行实例.  实例包含所有的 WebAssembly 导出函数 ,允许从JavaScript 调用 WebAssembly 代码."},{"name":"WebAssembly.LinkError()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/LinkError.html","desc":""},{"name":"WebAssembly.Memory()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/Memory.html","desc":"WebAssembly.Memory() 构造函数创建一个新的 Memory 对象。它包含一个可调整大小的 ArrayBuffer ，其内存储的是 WebAssembly 实例 所访问内存的原始字节码。"},{"name":"WebAssembly.Module","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/Module.html","desc":"所有 Module 实例继承自 Module() 构造函数的原型对象 —— 修改它会影响所有 Module 实例。"},{"name":"WebAssembly.compile()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/compile.html","desc":"WebAssembly.compile() 方法编译WebAssembly二进制代码到一个WebAssembly.Module 对象。如果在实例化之前有必要去编译一个模块，那么这个方法是有用的（否则，将会使用WebAssembly.instantiate() 方法）"},{"name":"WebAssembly.compileStreaming()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/compileStreaming.html","desc":"WebAssembly.compileStreaming() 方法用来从一个流式源中直接编译一个 WebAssembly.Module。当模块需要在被实例化前被编译时，这个方法会很有用。如果要从流式源实例化一个模块应采用 WebAssembly.instantiateStreaming() 方法。"},{"name":"WebAssembly.instantiate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/instantiate.html","desc":"WebAssembly.instantiate() 是编译和实例化 WebAssembly 代码的主要方法.  这个方法有两个重载方式:"},{"name":"WebAssembly.instantiateStreaming()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/instantiateStreaming.html","desc":"WebAssembly.instantiateStreaming() 方法直接从流式底层源编译和实例化WebAssembly模块。这是加载wasm代码一种非常有效的优化方式。"},{"name":"WebAssembly.validate()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/WebAssembly/validate.html","desc":"WebAssembly.validate() 方法用于验证包含 WebAssembly 二进制码的一个 typed array 是否合法，返回 true 如果这些字节能构成一个合法的 wasm 模块，否则返回 false。"},{"name":"decodeURI()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/decodeURI.html","desc":"decodeURI() 函数解码一个由encodeURI 先前创建的统一资源标识符（URI）或类似的例程。"},{"name":"decodeURIComponent()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/decodeURIComponent.html","desc":"decodeURIComponent() 方法用于解码由 encodeURIComponent 方法或者其它类似方法编码的部分统一资源标识符（URI）。"},{"name":"encodeURI()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/encodeURI.html","desc":"encodeURI()  函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 &quot;代理&quot; 字符组成)。"},{"name":"encodeURIComponent()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/encodeURIComponent.html","desc":"encodeURIComponent()是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。"},{"name":"escape()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/escape.html","desc":"废弃的 escape() 方法生成新的由十六进制转义序列替换的字符串. 使用 encodeURI 或 encodeURIComponent 代替."},{"name":"eval()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/eval.html","desc":"执行指定代码之后的返回值。如果返回值为空，返回undefined"},{"name":"globalThis","type":"Global_Objects","path":"javascript/Reference/Global_Objects/globalThis.html","desc":"globalThis 可以获取全局对象。"},{"name":"isFinite()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/isFinite.html","desc":"该全局 isFinite() 函数用来判断被传入的参数值是否为一个有限数值（finite number）。在必要情况下，参数会首先转为一个数值。"},{"name":"isNaN()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/isNaN.html","desc":"isNaN() 函数用来确定一个值是否为NaN 。注：isNaN函数内包含一些非常有趣的规则；你也可以通过ECMAScript 2015/ES6 中定义的Number.isNaN()或者 可以使用typeof 来判断该值是否为一个非数字。"},{"name":"null","type":"Global_Objects","path":"javascript/Reference/Global_Objects/null.html","desc":"值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。"},{"name":"parseFloat","type":"Global_Objects","path":"javascript/Reference/Global_Objects/parseFloat.html","desc":"parseFloat() 函数解析一个字符串参数并返回一个浮点数。"},{"name":"parseInt","type":"Global_Objects","path":"javascript/Reference/Global_Objects/parseInt.html","desc":"parseInt() 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。"},{"name":"undefined","type":"Global_Objects","path":"javascript/Reference/Global_Objects/undefined.html","desc":"undefined是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined的最初值就是原始数据类型undefined。"},{"name":"unescape()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/unescape.html","desc":"已废弃的unescape() 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换。上述的转义序列就像escape里介绍的一样。因为 unescape 已经废弃，建议使用 decodeURI或者decodeURIComponent 替代本方法。"},{"name":"uneval()","type":"Global_Objects","path":"javascript/Reference/Global_Objects/uneval.html","desc":"uneval() 函数创建一个代表对象的源代码的字符串。"},{"name":"JavaScript 错误参考","type":"Reference","path":"javascript/Reference/Errors.html","desc":"下面列出了 JavaScript 抛出的错误。这些错误是有用的调试帮助，但报告的问题并不总是十分明了。下面的页面提供有关这些错误的详细信息。每个错误都是基于 Error  的对象，并且具有名称和消息。"},{"name":"Error: Permission denied to access property &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Property_access_denied.html","desc":"错误."},{"name":"InternalError: too much recursion","type":"Errors","path":"javascript/Reference/Errors/Too_much_recursion.html","desc":"内部错误."},{"name":"RangeError: argument is not a valid code point","type":"Errors","path":"javascript/Reference/Errors/Not_a_codepoint.html","desc":"RangeError"},{"name":"RangeError: invalid array length","type":"Errors","path":"javascript/Reference/Errors/Invalid_array_length.html","desc":"RangeError"},{"name":"RangeError: invalid date","type":"Errors","path":"javascript/Reference/Errors/Invalid_date.html","desc":"RangeError"},{"name":"RangeError: precision is out of range","type":"Errors","path":"javascript/Reference/Errors/Precision_range.html","desc":"RangeError"},{"name":"RangeError: radix must be an integer","type":"Errors","path":"javascript/Reference/Errors/Bad_radix.html","desc":"RangeError"},{"name":"RangeError: repeat count must be less than infinity","type":"Errors","path":"javascript/Reference/Errors/Resulting_string_too_large.html","desc":"RangeError"},{"name":"RangeError: repeat count must be non-negative","type":"Errors","path":"javascript/Reference/Errors/Negative_repetition_count.html","desc":"RangeError"},{"name":"ReferenceError: &quot;x&quot; is not defined","type":"Errors","path":"javascript/Reference/Errors/Not_defined.html","desc":"ReferenceError."},{"name":"ReferenceError: assignment to undeclared variable &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Undeclared_var.html","desc":"仅在严格模式中出现 ReferenceError 警告。"},{"name":"ReferenceError: can't access lexical declaration`X' before initialization","type":"Errors","path":"javascript/Reference/Errors/Cant_access_lexical_declaration_before_init.html","desc":"ReferenceError"},{"name":"ReferenceError: deprecated caller or arguments usage","type":"Errors","path":"javascript/Reference/Errors/Deprecated_caller_or_arguments_usage.html","desc":"仅在严格模式下出现的 ReferenceError 警告。JavaScript 的执行将不会停止。"},{"name":"ReferenceError: invalid assignment left-hand side","type":"Errors","path":"javascript/Reference/Errors/Invalid_assignment_left-hand_side.html","desc":"ReferenceError."},{"name":"ReferenceError: reference to undefined property &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Undefined_prop.html","desc":"仅在 strict mode 下出现 ReferenceError 警告。"},{"name":"SyntaxError: &quot;0&quot;-prefixed octal literals and octal escape seq. are deprecated","type":"Errors","path":"javascript/Reference/Errors/Deprecated_octal.html","desc":"语法错误（SyntaxError ），只出现于严格模式下。"},{"name":"SyntaxError: &quot;use strict&quot; not allowed in function with non-simple parameters","type":"Errors","path":"javascript/Reference/Errors/Strict_Non_Simple_Params.html","desc":"SyntaxError."},{"name":"SyntaxError: &quot;x&quot; is a reserved identifier","type":"Errors","path":"javascript/Reference/Errors/Reserved_identifier.html","desc":"SyntaxError"},{"name":"SyntaxError: &quot;x&quot; is not a legal ECMA-262 octal constant","type":"Errors","path":"javascript/Reference/Errors/Bad_octal.html","desc":"仅在 strict mode 下出现 SyntaxError 警告。"},{"name":"SyntaxError: JSON.parse: bad parsing","type":"Errors","path":"javascript/Reference/Errors/JSON_bad_parse.html","desc":"SyntaxError"},{"name":"SyntaxError: Malformed formal parameter","type":"Errors","path":"javascript/Reference/Errors/Malformed_formal_parameter.html","desc":"SyntaxError"},{"name":"SyntaxError: Unexpected token","type":"Errors","path":"javascript/Reference/Errors/Unexpected_token.html","desc":"SyntaxError"},{"name":"SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead","type":"Errors","path":"javascript/Reference/Errors/Deprecated_source_map_pragma.html","desc":"SyntaxError 的警告。不会终止 JavaScript 的执行。"},{"name":"SyntaxError: a declaration in the head of a for-of loop can't have an initializer","type":"Errors","path":"javascript/Reference/Errors/Invalid_for-of_initializer.html","desc":"SyntaxError"},{"name":"SyntaxError: applying the 'delete' operator to an unqualified name is deprecated","type":"Errors","path":"javascript/Reference/Errors/Delete_in_strict_mode.html","desc":"SyntaxError 仅出现在严格模式下。"},{"name":"SyntaxError: for-in loop head declarations may not have initializers","type":"Errors","path":"javascript/Reference/Errors/Invalid_for-in_initializer.html","desc":"该 SyntaxError 只出现于严格模式下。"},{"name":"SyntaxError: function statement requires a name","type":"Errors","path":"javascript/Reference/Errors/Unnamed_function_statement.html","desc":"SyntaxError"},{"name":"SyntaxError: identifier starts immediately after numeric literal","type":"Errors","path":"javascript/Reference/Errors/Identifier_after_number.html","desc":"SyntaxError"},{"name":"SyntaxError: illegal character","type":"Errors","path":"javascript/Reference/Errors/Illegal_character.html","desc":"SyntaxError"},{"name":"SyntaxError: invalid regular expression flag &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Bad_regexp_flag.html","desc":"语法错误."},{"name":"SyntaxError: missing ) after argument list","type":"Errors","path":"javascript/Reference/Errors/Missing_parenthesis_after_argument_list.html","desc":"SyntaxError."},{"name":"SyntaxError: missing ) after condition","type":"Errors","path":"javascript/Reference/Errors/Missing_parenthesis_after_condition.html","desc":"SyntaxError"},{"name":"SyntaxError: missing : after property id","type":"Errors","path":"javascript/Reference/Errors/Missing_colon_after_property_id.html","desc":"SyntaxError"},{"name":"SyntaxError: missing ; before statement","type":"Errors","path":"javascript/Reference/Errors/Missing_semicolon_before_statement.html","desc":"SyntaxError."},{"name":"SyntaxError: missing = in const declaration","type":"Errors","path":"javascript/Reference/Errors/Missing_initializer_in_const.html","desc":"SyntaxError"},{"name":"SyntaxError: missing ] after element list","type":"Errors","path":"javascript/Reference/Errors/Missing_bracket_after_list.html","desc":"SyntaxError."},{"name":"SyntaxError: missing formal parameter","type":"Errors","path":"javascript/Reference/Errors/Missing_formal_parameter.html","desc":"SyntaxError"},{"name":"SyntaxError: missing name after . operator","type":"Errors","path":"javascript/Reference/Errors/Missing_name_after_dot_operator.html","desc":"SyntaxError"},{"name":"SyntaxError: missing variable name","type":"Errors","path":"javascript/Reference/Errors/No_variable_name.html","desc":"SyntaxError"},{"name":"SyntaxError: missing } after function body","type":"Errors","path":"javascript/Reference/Errors/Missing_curly_after_function_body.html","desc":"SyntaxError"},{"name":"SyntaxError: missing } after property list","type":"Errors","path":"javascript/Reference/Errors/Missing_curly_after_property_list.html","desc":"SyntaxError"},{"name":"SyntaxError: redeclaration of formal parameter &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Redeclared_parameter.html","desc":"SyntaxError"},{"name":"SyntaxError: return not in function","type":"Errors","path":"javascript/Reference/Errors/Bad_return_or_yield.html","desc":"SyntaxError."},{"name":"SyntaxError: test for equality (==) mistyped as assignment (=)?","type":"Errors","path":"javascript/Reference/Errors/Equal_as_assign.html","desc":"SyntaxError 只在严格模式下会出现的警告。"},{"name":"SyntaxError: unterminated string literal","type":"Errors","path":"javascript/Reference/Errors/Unterminated_string_literal.html","desc":"SyntaxError"},{"name":"TypeError: &quot;x&quot; has no properties","type":"Errors","path":"javascript/Reference/Errors/No_properties.html","desc":"TypeError."},{"name":"TypeError: &quot;x&quot; is (not) &quot;y&quot;","type":"Errors","path":"javascript/Reference/Errors/Unexpected_type.html","desc":"TypeError."},{"name":"TypeError: &quot;x&quot; is not a constructor","type":"Errors","path":"javascript/Reference/Errors/Not_a_constructor.html","desc":"TypeError"},{"name":"TypeError: &quot;x&quot; is not a function","type":"Errors","path":"javascript/Reference/Errors/Not_a_function.html","desc":"TypeError"},{"name":"TypeError: &quot;x&quot; is not a non-null object","type":"Errors","path":"javascript/Reference/Errors/No_non-null_object.html","desc":"TypeError"},{"name":"TypeError: &quot;x&quot; is read-only","type":"Errors","path":"javascript/Reference/Errors/Read-only.html","desc":"TypeError"},{"name":"TypeError: 'x' is not iterable","type":"Errors","path":"javascript/Reference/Errors/is_not_iterable.html","desc":"TypeError"},{"name":"TypeError: More arguments needed","type":"Errors","path":"javascript/Reference/Errors/More_arguments_needed.html","desc":"TypeError."},{"name":"TypeError: can't access dead object","type":"Errors","path":"javascript/Reference/Errors/Dead_object.html","desc":"TypeError"},{"name":"TypeError: can't access property &quot;x&quot; of &quot;y&quot;","type":"Errors","path":"javascript/Reference/Errors/Cant_access_property.html","desc":"TypeError."},{"name":"TypeError: can't define property &quot;x&quot;: &quot;obj&quot; is not extensible","type":"Errors","path":"javascript/Reference/Errors/Cant_define_property_object_not_extensible.html","desc":"TypeError"},{"name":"TypeError: can't delete non-configurable array element","type":"Errors","path":"javascript/Reference/Errors/Non_configurable_array_element.html","desc":"TypeError"},{"name":"TypeError: can't redefine non-configurable property &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Cant_redefine_property.html","desc":"TypeError"},{"name":"TypeError: cyclic object value","type":"Errors","path":"javascript/Reference/Errors/Cyclic_object_value.html","desc":"TypeError"},{"name":"TypeError: invalid 'in' operand &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/in_operator_no_object.html","desc":"TypeError"},{"name":"TypeError: invalid 'instanceof' operand 'x'","type":"Errors","path":"javascript/Reference/Errors/invalid_right_hand_side_instanceof_operand.html","desc":"TypeError"},{"name":"TypeError: invalid Array.prototype.sort argument","type":"Errors","path":"javascript/Reference/Errors/Array_sort_argument.html","desc":"TypeError"},{"name":"TypeError: invalid arguments","type":"Errors","path":"javascript/Reference/Errors/Typed_array_invalid_arguments.html","desc":"TypeError"},{"name":"TypeError: invalid assignment to const &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Invalid_const_assignment.html","desc":"TypeError"},{"name":"TypeError: property &quot;x&quot; is non-configurable and can't be deleted","type":"Errors","path":"javascript/Reference/Errors/Cant_delete.html","desc":"TypeError 只出现在严格模式下。"},{"name":"TypeError: setting getter-only property &quot;x&quot;","type":"Errors","path":"javascript/Reference/Errors/Getter_only.html","desc":"仅在严格模式下报 TypeError 错误。"},{"name":"TypeError: variable &quot;x&quot; redeclares argument","type":"Errors","path":"javascript/Reference/Errors/Var_hides_argument.html","desc":"TypeError 警告仅仅在 严格模式下 出现。"},{"name":"URIError: malformed URI sequence","type":"Errors","path":"javascript/Reference/Errors/Malformed_URI.html","desc":"URIError"},{"name":"Warning: -file- is being assigned a //# sourceMappingURL, but already has one","type":"Errors","path":"javascript/Reference/Errors/Already_has_pragma.html","desc":"一个警告。JavaScript 的执行不会中止。"},{"name":"Warning: Date.prototype.toLocaleFormat is deprecated","type":"Errors","path":"javascript/Reference/Errors/Deprecated_toLocaleFormat.html","desc":"警告。JavaScript 引擎不会停止运行。"},{"name":"Warning: JavaScript 1.6's for-each-in loops are deprecated","type":"Errors","path":"javascript/Reference/Errors/For-each-in_loops_are_deprecated.html","desc":"警告"},{"name":"Warning: String.x is deprecated; use String.prototype.x instead","type":"Errors","path":"javascript/Reference/Errors/Deprecated_String_generics.html","desc":"警告。JavaScript 引擎不会停止运行。"},{"name":"Warning: expression closures are deprecated","type":"Errors","path":"javascript/Reference/Errors/Deprecated_expression_closures.html","desc":"警告。JavaScript 引擎不会停止运行。"},{"name":"Warning: unreachable code after return statement","type":"Errors","path":"javascript/Reference/Errors/Stmt_after_return.html","desc":"警告"},{"name":"X.prototype.y called on incompatible type","type":"Errors","path":"javascript/Reference/Errors/Called_on_incompatible_type.html","desc":"TypeError"},{"name":"类型错误：在没有初始值的情况下简化空数组","type":"Errors","path":"javascript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value.html","desc":"消息"},{"name":"Reserved Words","type":"Reference","path":"javascript/Reference/Reserved_words.html","desc":""},{"name":"严格模式","type":"Reference","path":"javascript/Reference/Strict_mode.html","desc":"如果你想改变你的代码，让其工作在具有限制性JavaScript环境中，请参阅转换成严格模式。"},{"name":"向严格模式过渡","type":"Strict_mode","path":"javascript/Reference/Strict_mode/Transitioning_to_strict_mode.html","desc":"ECMAScript 5 引入了 strict mode ,现在已经被大多浏览器实现(包括IE10. 会使web浏览器更容易的解析代码(只需要添加 &quot;use strict&quot;; 在源码的最上面), 由现有的代码到严格模式的过渡需要一些事做."},{"name":"关于该参考","type":"Reference","path":"javascript/Reference/About.html","desc":"该JavaScript参考提供Javascript语言的知识仓库。 详细的描述了完整的Javascript语言的信息。如果你编写JavaScript代码， 你会经常使用这些页面 (因此标题为 &quot;JavaScript参考文档&quot;)。如果你正在学习JavaScript， 或需要帮助理解一些Javascript的功能或特性, 请查看 JavaScript指南。"},{"name":"函数","type":"Reference","path":"javascript/Reference/Functions.html","desc":"有关更多示例和说明，请参阅有关函数的JavaScript指南。"},{"name":"Arguments 对象","type":"Functions","path":"javascript/Reference/Functions/arguments.html","desc":"arguments 是一个对应于传递给函数的参数的类数组对象。"},{"name":"arguments.callee","type":"Functions","path":"javascript/Reference/Functions/arguments/callee.html","desc":"arguments.callee 属性包含当前正在执行的函数。"},{"name":"arguments.length","type":"Functions","path":"javascript/Reference/Functions/arguments/length.html","desc":"本次函数调用时传入函数的实参数量."},{"name":"arguments[@@iterator]()","type":"Functions","path":"javascript/Reference/Functions/arguments/@@iterator.html","desc":"@@iterator 属性的初始值是和 Array.prototype.values 属性的初始值相同的对象。"},{"name":"caller","type":"Functions","path":"javascript/Reference/Functions/arguments/caller.html","desc":"废弃的 arguments.caller 属性原先用在函数执行的时候调用自身。本属性已被移除且不再有用。"},{"name":"getter","type":"Functions","path":"javascript/Reference/Functions/get.html","desc":"get语法将对象属性绑定到查询该属性时将被调用的函数。"},{"name":"setter","type":"Functions","path":"javascript/Reference/Functions/set.html","desc":"当尝试设置属性时，set语法将对象属性绑定到要调用的函数。"},{"name":"剩余参数","type":"Functions","path":"javascript/Reference/Functions/Rest_parameters.html","desc":"剩余参数语法允许我们将一个不定数量的参数表示为一个数组。"},{"name":"方法的定义","type":"Functions","path":"javascript/Reference/Functions/Method_definitions.html","desc":"从ECMAScript 2015开始，在对象初始器中引入了一种更简短定义方法的语法，这是一种把方法名直接赋给函数的简写方式。"},{"name":"箭头函数","type":"Functions","path":"javascript/Reference/Functions/Arrow_functions.html","desc":"箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。"},{"name":"默认参数值","type":"Functions","path":"javascript/Reference/Functions/Default_parameters.html","desc":"函数默认参数允许在没有值或undefined被传入时使用默认形参。"},{"name":"声明：Statements and declarations","type":"Reference","path":"javascript/Reference/Statements.html","desc":"JavaScript 应用程序是由许多语法正确的语句组成的。单个语句可以跨多行。如果每个语句用分号隔开，那么多个语句可以在一行中出现。本页的内容并不是一个关键字，而是一组关键字。"},{"name":"async function","type":"Statements","path":"javascript/Reference/Statements/async_function.html","desc":"async function 声明用于定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。"},{"name":"block","type":"Statements","path":"javascript/Reference/Statements/block.html","desc":"块语句（或其他语言的复合语句）用于组合零个或多个语句。该块由一对大括号界定，可以是labelled："},{"name":"break","type":"Statements","path":"javascript/Reference/Statements/break.html","desc":"break 语句中止当前循环，switch语句或label 语句，并把程序控制流转到紧接着被中止语句后面的语句。"},{"name":"class","type":"Statements","path":"javascript/Reference/Statements/class.html","desc":"class 声明创建一个基于原型继承的具有给定名称的新类。"},{"name":"const","type":"Statements","path":"javascript/Reference/Statements/const.html","desc":"常量是块级作用域，很像使用 let 语句定义的变量。常量的值不能通过重新赋值来改变，并且不能重新声明。"},{"name":"continue","type":"Statements","path":"javascript/Reference/Statements/continue.html","desc":"continue 语句结束当前（或标签）的循环语句的本次迭代，并继续执行循环的下一次迭代。"},{"name":"debugger","type":"Statements","path":"javascript/Reference/Statements/debugger.html","desc":"debugger 语句调用任何可用的调试功能，例如设置断点。 如果没有调试功能可用，则此语句不起作用。"},{"name":"default","type":"Statements","path":"javascript/Reference/Statements/default.html","desc":"default 关键字可以在 JavaScript 的两种情况下使用：在 switch ，或 export 中。"},{"name":"do...while","type":"Statements","path":"javascript/Reference/Statements/do...while.html","desc":"do...while 语句创建一个执行指定语句的循环，直到condition值为 false。在执行statement 后检测condition，所以指定的statement至少执行一次。"},{"name":"empty","type":"Statements","path":"javascript/Reference/Statements/Empty.html","desc":"空语句用来表明没有语句，尽管 JavaScript 语法希望有语句。"},{"name":"export","type":"Statements","path":"javascript/Reference/Statements/export.html","desc":"在创建JavaScript模块时，export 语句用于从模块中导出函数、对象或原始值，以便其他程序可以通过 import 语句使用它们。"},{"name":"for","type":"Statements","path":"javascript/Reference/Statements/for.html","desc":"for 语句用于创建一个循环，它包含了三个可选的表达式，三个可选的表达式包围在圆括号中并由分号分隔， 后跟一个在循环中执行的语句（通常是一个块语句）。"},{"name":"for await...of","type":"Statements","path":"javascript/Reference/Statements/for-await...of.html","desc":"The for await...of 语句在异步或者同步可迭代对象上（包括 String，Array，Array-like 对象（比如arguments 或者NodeList)，TypedArray，Map， Set和其他对象等等）创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。"},{"name":"for each...in","type":"Statements","path":"javascript/Reference/Statements/for_each...in.html","desc":"使用一个变量迭代一个对象的所有属性值,对于每一个属性值,有一个指定的语句块被执行."},{"name":"for...in","type":"Statements","path":"javascript/Reference/Statements/for...in.html","desc":"for...in语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。"},{"name":"for...of","type":"Statements","path":"javascript/Reference/Statements/for...of.html","desc":"for...of语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句"},{"name":"function","type":"Statements","path":"javascript/Reference/Statements/function.html","desc":"函数声明定义一个具有指定参数的函数。"},{"name":"function*","type":"Statements","path":"javascript/Reference/Statements/function-.html","desc":"function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。"},{"name":"if...else","type":"Statements","path":"javascript/Reference/Statements/if...else.html","desc":"当指定条件为真，if 语句会执行一段语句。如果条件为假，则执行另一段语句。"},{"name":"import","type":"Statements","path":"javascript/Reference/Statements/import.html","desc":"静态的import 语句用于导入由另一个模块导出的绑定。无论是否声明了 strict mode ，导入的模块都运行在严格模式下。在浏览器中，import 语句只能在声明了 type=&quot;module&quot; 的 script 的标签中使用。"},{"name":"import.meta","type":"Statements","path":"javascript/Reference/Statements/import.meta.html","desc":"import.meta是一个给JavaScript模块暴露特定上下文的元数据属性的对象。它包含了这个模块的信息，比如说这个模块的URL。"},{"name":"label","type":"Statements","path":"javascript/Reference/Statements/label.html","desc":"标记语句可以和 break 或 continue 语句一起使用。标记就是在一条语句前面加个可以引用的标识符。"},{"name":"let","type":"Statements","path":"javascript/Reference/Statements/let.html","desc":"let允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与var关键字不同的是，var声明的变量只能是全局或者整个函数块的。"},{"name":"return","type":"Statements","path":"javascript/Reference/Statements/return.html","desc":"return语句终止函数的执行，并返回一个指定的值给函数调用者。"},{"name":"switch","type":"Statements","path":"javascript/Reference/Statements/switch.html","desc":"switch 语句评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句。"},{"name":"throw","type":"Statements","path":"javascript/Reference/Statements/throw.html","desc":"throw语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个catch块。如果调用者函数中没有catch块，程序将会终止。"},{"name":"try...catch","type":"Statements","path":"javascript/Reference/Statements/try...catch.html","desc":"try...catch语句将能引发错误的代码放在try块中，并且对应一个响应，然后有异常被抛出。"},{"name":"var","type":"Statements","path":"javascript/Reference/Statements/var.html","desc":"var 声明语句声明一个变量，并可选地将其初始化为一个值。"},{"name":"while","type":"Statements","path":"javascript/Reference/Statements/while.html","desc":"while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环。"},{"name":"with","type":"Statements","path":"javascript/Reference/Statements/with.html","desc":"JavaScript查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的context或者包含这个变量的函数有关。'with'语句將某个对象添加到作用域链的顶部，如果在statement中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出ReferenceError异常。"},{"name":"遗留的生成器函数","type":"Statements","path":"javascript/Reference/Statements/Legacy_generator_function.html","desc":"遗留的生成器函数语句 使用特殊参数声明遗留的生成器函数。"},{"name":"尾后逗号","type":"Reference","path":"javascript/Reference/Trailing_commas.html","desc":"尾后逗号 （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制的比较更加清晰，以及代码便器的麻烦更少。"},{"name":"废弃和过时的JavaScript特性","type":"Reference","path":"javascript/Reference/Deprecated_and_obsolete_features.html","desc":"本附录列出了那些已经被废弃的(仍然可用,但未来会被删除)或者已经过时的(已经被删除,不能再用了)JavaScript特性."},{"name":"原始迭代协议","type":"Deprecated_and_obsolete_features","path":"javascript/Reference/Deprecated_and_obsolete_features/The_legacy_Iterator_protocol.html","desc":"Firefox在version 26版本生效的与ES2015迭代协议相似的另一种迭代协议。以下统称为旧迭代协议。"},{"name":"模板字符串","type":"Reference","path":"javascript/Reference/template_strings.html","desc":"模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为“模板字符串”。"},{"name":"类","type":"Reference","path":"javascript/Reference/Classes.html","desc":"ECMAScript 2015 中引入的 JavaScript 类实质上是 JavaScript 现有的基于原型的继承的语法糖。类语法不会为JavaScript引入新的面向对象的继承模型。"},{"name":"extends","type":"Classes","path":"javascript/Reference/Classes/extends.html","desc":"extends关键字用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。"},{"name":"static","type":"Classes","path":"javascript/Reference/Classes/static.html","desc":"类（class）通过 static 关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。这些通常是实用程序方法，例如创建或克隆对象的功能。"},{"name":"构造方法","type":"Classes","path":"javascript/Reference/Classes/constructor.html","desc":"constructor 是一种用于创建和初始化class创建的对象的特殊方法。"},{"name":"表达式和运算符","type":"Reference","path":"javascript/Reference/Operators.html","desc":"左侧工具栏是按字母表排序的列表。"},{"name":"Expression closures","type":"Operators","path":"javascript/Reference/Operators/Expression_closures.html","desc":"表达式闭包是定义简单函数的一种便捷方式。"},{"name":"Generator推导式","type":"Operators","path":"javascript/Reference/Operators/Generator_comprehensions.html","desc":"生成器推导语法是一种JavaScript表达式，它允许您基于现有的可迭代对象快速组合新的生成器函数。"},{"name":"async function expression","type":"Operators","path":"javascript/Reference/Operators/async.html","desc":"async function 关键字用来在表达式中定义异步函数。当然，你也可以用 异步函数语句 来定义。"},{"name":"await","type":"Operators","path":"javascript/Reference/Operators/await.html","desc":"await  操作符用于等待一个Promise 对象。它只能在异步函数 async function 中使用。"},{"name":"delete 操作符","type":"Operators","path":"javascript/Reference/Operators/delete.html","desc":"delete 操作符用于删除对象的某个属性；如果没有指向这个属性的引用，那它最终会被释放。"},{"name":"function* 表达式","type":"Operators","path":"javascript/Reference/Operators/function*.html","desc":"function*关键字可以在表达式内部定义一个生成器函数。"},{"name":"in","type":"Operators","path":"javascript/Reference/Operators/in.html","desc":"如果指定的属性在指定的对象或其原型链中，则in 运算符返回true。"},{"name":"instanceof","type":"Operators","path":"javascript/Reference/Operators/instanceof.html","desc":"instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置"},{"name":"new.target","type":"Operators","path":"javascript/Reference/Operators/new.target.html","desc":"new.target语法由一个关键字&quot;new&quot;，一个点，和一个属性名&quot;target&quot;组成。通常&quot;new.&quot;的作用是提供属性访问的上下文，但这里&quot;new.&quot;其实不是一个真正的对象。不过在构造方法调用中，new.target指向被new调用的构造函数，所以&quot;new.&quot;成为了一个虚拟上下文。"},{"name":"new运算符","type":"Operators","path":"javascript/Reference/Operators/new.html","desc":"new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。"},{"name":"super","type":"Operators","path":"javascript/Reference/Operators/super.html","desc":"super关键字用于访问和调用一个对象的父对象上的函数。"},{"name":"this","type":"Operators","path":"javascript/Reference/Operators/this.html","desc":"与其他语言相比，函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别。"},{"name":"typeof","type":"Operators","path":"javascript/Reference/Operators/typeof.html","desc":"typeof操作符返回一个字符串，表示未经计算的操作数的类型。"},{"name":"void 运算符","type":"Operators","path":"javascript/Reference/Operators/void.html","desc":"void 运算符 对给定的表达式进行求值，然后返回 undefined。"},{"name":"yield","type":"Operators","path":"javascript/Reference/Operators/yield.html","desc":"yield 关键字用来暂停和恢复一个生成器函数（(function* 或遗留的生成器函数）。"},{"name":"yield*","type":"Operators","path":"javascript/Reference/Operators/yield*.html","desc":"yield* 表达式用于委托给另一个generator 或可迭代对象。"},{"name":"函数表达式","type":"Operators","path":"javascript/Reference/Operators/function.html","desc":"function 关键字可以用来在一个表达式中定义一个函数。"},{"name":"圆括号运算符","type":"Operators","path":"javascript/Reference/Operators/Grouping.html","desc":"圆括号运算符( ) 用来控制表达式中的运算优先级。"},{"name":"对象初始化","type":"Operators","path":"javascript/Reference/Operators/Object_initializer.html","desc":"可以通过new Object()， Object.create()方法，或者使用字面量标记（初始化标记）初始化对象。 一个对象初始化器，由花括号/大括号 ({}) 包含的一个由零个或多个对象属性名和其关联值组成的一个逗号分隔的列表构成。"},{"name":"展开语法","type":"Operators","path":"javascript/Reference/Operators/Spread_syntax.html","desc":"该示例的源代码存放于Github中，如果你想进行修订，请先克隆https://github.com/mdn/interactive-examples, 修改完成之后再通过pull request的方式推送给源仓库。"},{"name":"属性访问器","type":"Operators","path":"javascript/Reference/Operators/Property_Accessors.html","desc":"属性访问器提供了两种方式用于访问一个对象的属性，它们分别是点号和方括号。"},{"name":"按位操作符","type":"Operators","path":"javascript/Reference/Operators/Bitwise_Operators.html","desc":"按位操作符（Bitwise operators） 将其操作数（operands）当作32位的比特序列（由0和1组成），而不是十进制、十六进制或八进制数值。例如，十进制数9，用二进制表示则为1001。按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。"},{"name":"数组推导式","type":"Operators","path":"javascript/Reference/Operators/Array_comprehensions.html","desc":"数组推导式是一种 JavaScript 表达式语法，使用它，你可以在一个原有数组的基础上快速的构造出一个新的数组。但是它已经从标准和火狐中移除。不要用它！"},{"name":"旧式生成器函数","type":"Operators","path":"javascript/Reference/Operators/Legacy_generator_function.html","desc":"function 关键字可以用于在表达式中定义旧式的生成器函数。为使定义的函数为一个旧式的生成器函数，该函数的函数体中需要至少包含一个 yield 表达式。"},{"name":"条件运算符","type":"Operators","path":"javascript/Reference/Operators/Conditional_Operator.html","desc":"条件（三元）运算符是 JavaScript 仅有的使用三个操作数的运算符。本运算符经常作为if语句的简短形式来使用。"},{"name":"比较操作符","type":"Operators","path":"javascript/Reference/Operators/Comparison_Operators.html","desc":"JavaScript 有两种比较方式：严格比较运算符和转换类型比较运算符。对于严格比较运算符（===）来说，仅当两个操作数的类型相同且值相等为 true，而对于被广泛使用的比较运算符（==）来说，会在进行比较之前，将两个操作数转换成相同的类型。对于关系运算符（比如 <=）来说，会先将操作数转为原始值，使它们类型相同，再进行比较运算。"},{"name":"算术运算符","type":"Operators","path":"javascript/Reference/Operators/Arithmetic_Operators.html","desc":"算术运算符以数值（字面量或变量）作为其操作数，并返回一个单个数值。标准算术运算符是加法（+），减法（ - ），乘法（*）和除法（/）。"},{"name":"管道操作符","type":"Operators","path":"javascript/Reference/Operators/管道操作符.html","desc":"试验性的管道操作符 |> （目前其标准化流程处于 stage 1 阶段）允许以一种易读的方式去对函数链式调用。本质上来说，管道操作符是单参数函数调用的语法糖，它允许你像这样执行一个调用："},{"name":"类表达式","type":"Operators","path":"javascript/Reference/Operators/class.html","desc":"类表达式是用来定义类的一种语法。和函数表达式相同的一点是，类表达式可以是命名也可以是匿名的。如果是命名类表达式，这个名字只能在类体内部才能访问到。JavaScript 的类也是基于原型继承的。"},{"name":"解构赋值","type":"Operators","path":"javascript/Reference/Operators/Destructuring_assignment.html","desc":"解构赋值语法是一种 Javascript 表达式，它使得将值从数组，或属性从对象，提取到不同的变量中，成为可能。"},{"name":"赋值运算符","type":"Operators","path":"javascript/Reference/Operators/Assignment_Operators.html","desc":"赋值运算符（assignment operator）基于右值（right operand）的值，给左值（left operand）赋值。"},{"name":"运算符优先级","type":"Operators","path":"javascript/Reference/Operators/Operator_Precedence.html","desc":"运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。"},{"name":"逗号操作符","type":"Operators","path":"javascript/Reference/Operators/Comma_Operator.html","desc":"逗号操作符  对它的每个操作数求值（从左到右），并返回最后一个操作数的值。"},{"name":"逻辑运算符","type":"Operators","path":"javascript/Reference/Operators/Logical_Operators.html","desc":"逻辑运算符通常用于布尔型（逻辑）值。这种情况下，它们返回一个布尔值。然而，&& 和 || 运算符会返回一个指定操作数的值，因此，这些运算符也用于非布尔值。这时，它们也就会返回一个非布尔型值。"},{"name":"词法文法","type":"Reference","path":"javascript/Reference/Lexical_grammar.html","desc":"这部分描述了JavaScript的词法。ECMAScript源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括tokens、控制符、行终止符、注释和空白符。ECMAScript定义了一些关键字、字面量以及行尾分号补全的规则。"},{"name":"迭代协议","type":"Reference","path":"javascript/Reference/Iteration_protocols.html","desc":"ECMAScript 2015的几个补充，并不是新的内置实现或语法，而是协议。这些协议可以被任何遵循某些约定的对象来实现。"},{"name":"JavaScript 技术概览","type":"","path":"javascript/JavaScript_technologies_overview.html","desc":"HTML是用来存储网页内容的，CSS是用来定义这些内容的显示样式的，而JavaScript是用来创造丰富的页面效果或者网页应用的。"},{"name":"JavaScript 指南","type":"","path":"javascript/Guide.html","desc":"JavaScript 指南向你介绍如何使用 JavaScript，并且给出了语言概述。如果你需要了解某些语言特性的详细信息，请参阅 JavaScript 参考。"},{"name":"JavaScript 概述","type":"Guide","path":"javascript/Guide/JavaScript_Overview.html","desc":"本节将介绍并讨论 JavaScript 的基本概念。"},{"name":"Text formatting","type":"Guide","path":"javascript/Guide/Text_formatting.html","desc":"本章介绍在Javascript中如何使用字符串与文本内容。"},{"name":"介绍","type":"Guide","path":"javascript/Guide/Introduction.html","desc":"我们假设你已经掌握了以下基础技能："},{"name":"使用 Promises","type":"Guide","path":"javascript/Guide/Using_promises.html","desc":"一个 Promise 就是一个代表了异步操作最终完成或者失败的结果对象。大多数人仅使用Promise，因此本教程将首先说明怎样使用 Promise，之后说明如何创建Promise。"},{"name":"使用对象","type":"Guide","path":"javascript/Guide/Working_with_Objects.html","desc":"JavaScript 的设计是一个简单的基于对象的范式。一个对象就是一系列属性的集合，一个属性包含一个名和一个值。一个属性的值可以是函数，这种情况下属性也被称为方法。除了浏览器里面预定义的那些对象之外，你也可以定义你自己的对象。本章节讲述了怎么使用对象、属性、函数和方法，怎样实现自定义对象。"},{"name":"元编程","type":"Guide","path":"javascript/Guide/Meta_programming.html","desc":"从ECMAScript 2015 开始，JavaScript 获得对Proxy和 Reflect对象的支持，允许你拦截并定义基本语言操作的自定义行为（例如，属性查找，赋值，枚举，函数调用等）。借助这两个对象，你可以在 JavaScript 元级别进行编程。"},{"name":"关于本指南","type":"Guide","path":"javascript/Guide/About.html","desc":"JavaScript 是一种跨平台的，基于对象的脚本语言。本指南介绍了所有您使用 JavaScript 所需要了解的事情。"},{"name":"函数","type":"Guide","path":"javascript/Guide/Functions.html","desc":"函数是 JavaScript 中的基本组件之一。 一个函数是 JavaScript 过程 — 一组执行任务或计算值的语句。要使用一个函数，你必须将其定义在你希望调用它的作用域内。"},{"name":"对象模型的细节","type":"Guide","path":"javascript/Guide/Details_of_the_Object_Model.html","desc":"JavaScript 是一种基于原型而不是基于类的面向对象语言。正是由于这一根本的区别，其如何创建对象的层级结构以及对象的属性与属性值是如何继承的并不是那么清晰。本节试着阐明。"},{"name":"带键的集合","type":"Guide","path":"javascript/Guide/Keyed_collections.html","desc":"这一章介绍由key值标记的数据容器；Map 和 Set 对象承载的数据元素可以按照插入时的顺序被迭代遍历。"},{"name":"循环和迭代","type":"Guide","path":"javascript/Guide/Loops_and_iteration.html","desc":"循环提供了一种快速和简单的方式去做一些重复的事。JavaScript入门的这个章节会介绍在JavaScript中存在哪些不同的迭代语句。"},{"name":"数字和日期","type":"Guide","path":"javascript/Guide/Numbers_and_dates.html","desc":"本章节介绍如何掌握Javascript里的数字和日期类型"},{"name":"正则表达式","type":"Guide","path":"javascript/Guide/Regular_Expressions.html","desc":"正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。本章介绍 JavaScript正则表达式。"},{"name":"流程控制与错误处理","type":"Guide","path":"javascript/Guide/Control_flow_and_error_handling.html","desc":"JavaScript 提供一套灵活的语句集，特别是控制流语句，你可以用它在你的应用程序中实现大量的交互性功能。本章节我们将带来关于JavaScript语句的一些概览。"},{"name":"索引集合类 (Indexed collections)","type":"Guide","path":"javascript/Guide/Indexed_collections.html","desc":"这个章节主要介绍了以索引进行排序的数据集合。包括数组以及类似于数组的数据结构，如 Array 、TypedArray 。"},{"name":"表达式和运算符","type":"Guide","path":"javascript/Guide/Expressions_and_Operators.html","desc":"本章描述了 JavaScript 的表达式和运算符，包括了赋值，比较，算数，位运算，逻辑，字符串，三元等等。"},{"name":"语法和数据类型","type":"Guide","path":"javascript/Guide/Grammar_and_types.html","desc":"本章讨论 JavaScript 的基本语法，变量声明，数据类型 和 字面量。"},{"name":"迭代器和生成器","type":"Guide","path":"javascript/Guide/Iterators_and_Generators.html","desc":"处理集合中的每个项是很常见的操作。JavaScript 提供了许多迭代集合的方法，从简单的for循环到map()和filter()。迭代器和生成器将迭代的概念直接带入核心语言，并提供了一种机制来自定义for...of循环的行为 。"},{"name":"JavaScript 数据类型和数据结构","type":"","path":"javascript/Data_structures.html","desc":"编程语言都具有内建的数据结构，但各种编程语言的数据结构常有不同之处。本文试图列出 JavaScript 语言中内建的数据结构及其属性，它们可以用来构建其他的数据结构；同时尽可能的描述与其他语言的不同之处。"},{"name":"JavaScript 类数组对象","type":"","path":"javascript/Typed_arrays.html","desc":"JavaScript类型化数组是一种类似数组的对象，并提供了一种用于访问原始二进制数据的机制。 正如你可能已经知道，Array 存储的对象能动态增多和减少，并且可以存储任何JavaScript值。JavaScript引擎会做一些内部优化，以便对数组的操作可以很快。然而，随着Web应用程序变得越来越强大，尤其一些新增加的功能例如：音频视频编辑，访问WebSockets的原始数据等，很明显有些时候如果使用JavaScript代码可以快速方便地通过类型化数组来操作原始的二进制数据将会非常有帮助。"},{"name":"JavaScript更新","type":"","path":"javascript/New_in_JavaScript.html","desc":"本章包含有关JavaScript版本历史记录的信息，以及基于Mozilla/SpiderMonkey-的JavaScript应用程序的实现状态，例如Firefox。"},{"name":"ECMAScript 5 support in Mozilla","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla.html","desc":"ECMAScript 5.1, an older version of the standard upon which JavaScript is based, was approved in June 2011."},{"name":"Firefox 中的 JavaScript 更新日志","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/Firefox_JavaScript_changelog.html","desc":"下面是 Firefox 发布版本的 JavaScript 日志更新情况。"},{"name":"JavaScript 1.1的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.1.html","desc":"下面介绍的是JavaScript从Netscape Navigator 2.0到3.0的更新日志。旧的Netscape文档请参考&quot;第1版之后新增的特性&quot;。Netscape Navigator 3.0在1996年8月19发布，是支持JavaScript的浏览器的第二个主要的版本。"},{"name":"JavaScript 1.2的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.2.html","desc":"下面介绍的是JavaScript从Netscape Navigator 3.0到4.0的更新日志。旧的Netscape文档可以在archive.org上面找到。Netscape Navigator 4.0在1997年6月11日发布，它是是支持JavaScript的浏览器的第三个主要的版本。"},{"name":"JavaScript 1.3的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.3.html","desc":"下面介绍的是JavaScript从Netscape Navigator 4.0到4.5的更新日志。旧的Netscape文档可以在archive.org上面找到。Netscape Navigator 4.5是在1998年10月19日发布的。"},{"name":"JavaScript 1.4的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.4.html","desc":"下面是 JavaScript 1.4 的更新记录，它只可用于 1999 年发布的 Netscape 服务端 JavaScript。 旧的 Netscape 文档可在 archive.org 找到。"},{"name":"JavaScript 1.5 的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.5.html","desc":"以下为JavaScript 1.5 的更新日志。该版本包含在发行于2000年11月14日的Netscape Navigator 6.0中，也在后续的的Netscape Navigator版本和Firefox 1.0中使用。你可以拿JavaScript 1.5 和JScript version 5.5，Internet Explorer 5.5进行比较，后者发行于2000年7月。相应的ECMA 标准是 ECMA-262 Edition 3版 (自1999年12月)。"},{"name":"JavaScript 1.6 的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.6.html","desc":""},{"name":"JavaScript 1.7 的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.7.html","desc":""},{"name":"JavaScript 1.8.1 的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.8.1.html","desc":"下面是JavaScript 1.8.1 的更新内容. 该版本已包含在 Firefox 3.5 中."},{"name":"JavaScript 1.8.5 的新特性","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.8.5.html","desc":"下面的内容是JavaScript 1.8.5的更新记录. 该版本已包含在Firefox 4中."},{"name":"Mozilla 对 ECMAScript 6 的支持","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla.html","desc":""},{"name":"New in JavaScript 1.8","type":"New_in_JavaScript","path":"javascript/New_in_JavaScript/1.8.html","desc":"以下为JavaScript 1.8的更新日志。JavaScript 1.8 是 Gecko 1.9（已合并在 Firefox 3 中）的一部分。参见 bug 380236 以跟踪 JavaScript 1.8。"},{"name":"JavaScript资源","type":"","path":"javascript/Language_Resources.html","desc":"ECMAScript是形成JavaScript语言基础的脚本语言。ECMAScript是由Ecma国际标准组织以ECMA-262和ECMA-402规范的形式进行标准化的。下面的ECMAScript标准已经通过批准："},{"name":"JavaScript面向对象简介","type":"","path":"javascript/Introduction_to_Object-Oriented_JavaScript.html","desc":"JavaScript 的核心是支持面向对象的，同时它也提供了强大灵活的 OOP 语言能力。本文从对面向对象编程的介绍开始，带您探索 JavaScript 的对象模型，最后描述 JavaScript 当中面向对象编程的一些概念。"},{"name":"Microsoft JavaScript extensions","type":"","path":"javascript/Microsoft_Extensions.html","desc":"Microsoft browsers (Internet Explorer, and in a few cases, Microsoft Edge) support a number of special Microsoft extensions to the otherwise standard JavaScript APIs."},{"name":"ActiveXObject","type":"Microsoft_Extensions","path":"javascript/Microsoft_Extensions/ActiveXObject.html","desc":"ActiveXObject 启用会返回一个自动化对象的引用"},{"name":"Mozilla对下一代ECMAScript 的支持","type":"","path":"javascript/ECMAScript_7_support_in_Mozilla.html","desc":"下一代 ECMAScript 是指在 ECMAScript 2015 被推出后的 ECMA-262 标准（通常被称为 JavaScript）的新特性。新版本的 ECMAScript 规范会每年发布。"},{"name":"The performance hazards of  [[Prototype]] mutation","type":"","path":"javascript/The_performance_hazards_of__%5B%5BPrototype%5D%5D_mutation.html","desc":""},{"name":"javascript(起步)","type":"","path":"javascript/javascript(%E8%B5%B7%E6%AD%A5).html","desc":"作为一门计算机语言，JavaScript本身强大、复杂，且难于理解。但是，你可以用它来开发一系列的应用程序，它有巨大的潜力来改变当前的互联网现状。下面这个应用程序就是一个很好的例子：Google Maps。"},{"name":"关于 JavaScript","type":"","path":"javascript/About_JavaScript.html","desc":"JavaScript® （通常简写为JS）是一种轻量的、解释性的、面向对象的头等函数语言，其最广为人知的应用是作为网页的脚本语言，但同时它也在很多非浏览器环境下使用。JS是一种动态的基于原型和多范式的脚本语言，支持面向对象、命令式和函数式的编程风格。"},{"name":"内存管理","type":"","path":"javascript/Memory_Management.html","desc":"像C语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()。另一方面，JavaScript创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放。 后一个过程称为垃圾回收。这个“自动”是混乱的根源，并让JavaScript（和其他高级语言）开发者感觉他们可以不关心内存管理。 这是错误的。"},{"name":"属性的可枚举性和所有权","type":"","path":"javascript/Enumerability_and_ownership_of_properties.html","desc":"可枚举属性是指那些内部 “可枚举” 标志设置为 true 的属性，对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true，对于通过 Object.defineProperty 等定义的属性，该标识值默认为 false。可枚举的属性可以通过 for...in 循环进行遍历（除非该属性名是一个 Symbol）。属性的所有权是通过判断该属性是否直接属于某个对象决定的，而不是通过原型链继承的。一个对象的所有的属性可以一次性的获取到。有一些内置的方法可以用于判断、迭代/枚举以及获取对象的一个或一组属性，下表对这些方法进行了列举。对于部分不可用的类别，下方的示例代码对获取方法进行了演示。"},{"name":"并发模型与事件循环","type":"","path":"javascript/EventLoop.html","desc":"JavaScript 的并发模型基于“事件循环”。这个模型与像 C 或者 Java 这种其它语言中的模型截然不同。"},{"name":"继承与原型链","type":"","path":"javascript/Inheritance_and_the_prototype_chain.html","desc":"对于有基于类的语言经验 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015/ES6 中引入了 class 关键字，但只是语法糖，JavaScript 仍然是基于原型的）。"},{"name":"起步(Javascript 教程)","type":"","path":"javascript/Getting_Started.html","desc":"作为一门计算机语言，JavaScript本身强大、复杂，且难于理解。但是，你可以用它来开发一系列的应用程序，它有巨大的潜力来改变当前的互联网现状。下面这个应用程序就是一个很好的例子：Google Maps。"},{"name":"闭包","type":"","path":"javascript/Closures.html","desc":"闭包是函数和声明该函数的词法环境的组合。"}]