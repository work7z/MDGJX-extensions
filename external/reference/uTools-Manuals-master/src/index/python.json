[{ "name": "intro", "type": "intro", "path": "python/intro.html", "desc": "介绍" }, { "name": "functions", "type": "functions", "path": "python/functions.html", "desc": "内置函数" }, { "name": "constants", "type": "constants", "path": "python/constants.html", "desc": "内置常量" }, { "name": "stdtypes", "type": "stdtypes", "path": "python/stdtypes.html", "desc": "内置类型" }, { "name": "exceptions", "type": "exceptions", "path": "python/exceptions.html", "desc": "内置异常" }, { "name": "text", "type": "text", "path": "python/text.html", "desc": "文字处理服务" }, { "name": "string", "type": "string", "path": "python/string.html", "desc": "字符串操作" }, { "name": "re", "type": "re", "path": "python/re.html", "desc": "正则表达式操作" }, { "name": "difflib", "type": "difflib", "path": "python/difflib.html", "desc": "计算delta的帮助" }, { "name": "textwrap", "type": "textwrap", "path": "python/textwrap.html", "desc": "文字换行和填充" }, { "name": "unicodedata", "type": "unicodedata", "path": "python/unicodedata.html", "desc": "Unicode 数据库" }, { "name": "stringprep", "type": "stringprep", "path": "python/stringprep.html", "desc": "互联网字符串制备" }, { "name": "readline", "type": "readline", "path": "python/readline.html", "desc": "GNU readline 接口" }, { "name": "rlcompleter", "type": "rlcompleter", "path": "python/rlcompleter.html", "desc": "GNU readline的完成功能" }, { "name": "binary", "type": "binary", "path": "python/binary.html", "desc": "二进制数据服务" }, { "name": "struct", "type": "struct", "path": "python/struct.html", "desc": "格式化解析bytes" }, { "name": "codecs", "type": "codecs", "path": "python/codecs.html", "desc": "Codec注册表和基类" }, { "name": "datatypes", "type": "datatypes", "path": "python/datatypes.html", "desc": "数据类型" }, { "name": "datetime", "type": "datetime", "path": "python/datetime.html", "desc": "基本日期时间类型" }, { "name": "calendar", "type": "calendar", "path": "python/calendar.html", "desc": "与日历相关的一般函数" }, { "name": "collections", "type": "collections", "path": "python/collections.html", "desc": "容器" }, { "name": "collections.abc", "type": "collections.abc", "path": "python/collections.abc.html", "desc": "抽象基类容器" }, { "name": "heapq", "type": "heapq", "path": "python/heapq.html", "desc": "堆队列算法" }, { "name": "bisect", "type": "bisect", "path": "python/bisect.html", "desc": "数组分割算法" }, { "name": "array", "type": "array", "path": "python/array.html", "desc": "高效的数值数组" }, { "name": "weakref", "type": "weakref", "path": "python/weakref.html", "desc": "弱引用" }, { "name": "types", "type": "types", "path": "python/types.html", "desc": "创建动态类型和内置类型的名称" }, { "name": "copy", "type": "copy", "path": "python/copy.html", "desc": "浅层和深层复制操作" }, { "name": "pprint", "type": "pprint", "path": "python/pprint.html", "desc": "打印整洁的数据" }, { "name": "reprlib", "type": "reprlib", "path": "python/reprlib.html", "desc": "备用 repr() 执行" }, { "name": "enum", "type": "enum", "path": "python/enum.html", "desc": "支持枚举类型" }, { "name": "numeric", "type": "numeric", "path": "python/numeric.html", "desc": "数字和数学模块" }, { "name": "numbers", "type": "numbers", "path": "python/numbers.html", "desc": "数字抽象基类" }, { "name": "math", "type": "math", "path": "python/math.html", "desc": "数学函数" }, { "name": "cmath", "type": "cmath", "path": "python/cmath.html", "desc": "数学函数，用于复数" }, { "name": "decimal", "type": "decimal", "path": "python/decimal.html", "desc": "十进制固定和浮点算术" }, { "name": "fractions", "type": "fractions", "path": "python/fractions.html", "desc": "有理数" }, { "name": "random", "type": "random", "path": "python/random.html", "desc": "生成伪随机数" }, { "name": "statistics", "type": "statistics", "path": "python/statistics.html", "desc": "数理统计函数" }, { "name": "functional", "type": "functional", "path": "python/functional.html", "desc": "函数编程模块" }, { "name": "itertools", "type": "itertools", "path": "python/itertools.html", "desc": "功能创建迭代器高效循环" }, { "name": "functools", "type": "functools", "path": "python/functools.html", "desc": "高阶函数和可调用对象的操作" }, { "name": "operator", "type": "operator", "path": "python/operator.html", "desc": "标准运算符作为函数" }, { "name": "filesys", "type": "filesys", "path": "python/filesys.html", "desc": "文件与目录的访问" }, { "name": "pathlib", "type": "pathlib", "path": "python/pathlib.html", "desc": "面向对象的文件系统路径" }, { "name": "os.path", "type": "os.path", "path": "python/os.path.html", "desc": "常见的路径名称操作" }, { "name": "fileinput", "type": "fileinput", "path": "python/fileinput.html", "desc": "从多个输入流中迭代" }, { "name": "stat", "type": "stat", "path": "python/stat.html", "desc": "解释stat()结果" }, { "name": "filecmp", "type": "filecmp", "path": "python/filecmp.html", "desc": "文件和目录比较" }, { "name": "tempfile", "type": "tempfile", "path": "python/tempfile.html", "desc": "生成临时文件和目录" }, { "name": "glob", "type": "glob", "path": "python/glob.html", "desc": "Unix样式路径名模式扩展" }, { "name": "fnmatch", "type": "fnmatch", "path": "python/fnmatch.html", "desc": "Unix文件名匹配模式" }, { "name": "linecache", "type": "linecache", "path": "python/linecache.html", "desc": "文字行缓存" }, { "name": "shutil", "type": "shutil", "path": "python/shutil.html", "desc": "高级文件操作" }, { "name": "macpath", "type": "macpath", "path": "python/macpath.html", "desc": "Mac OS 9路径处理函数" }, { "name": "persistence", "type": "persistence", "path": "python/persistence.html", "desc": "数据持久性" }, { "name": "pickle", "type": "pickle", "path": "python/pickle.html", "desc": "Python对象序列化" }, { "name": "copyreg", "type": "copyreg", "path": "python/copyreg.html", "desc": "注册pickle支持功能" }, { "name": "shelve", "type": "shelve", "path": "python/shelve.html", "desc": "Python对象持久性" }, { "name": "marshal", "type": "marshal", "path": "python/marshal.html", "desc": "内部Python对象序列化" }, { "name": "dbm", "type": "dbm", "path": "python/dbm.html", "desc": "与Unix“数据库”的接口" }, { "name": "sqlite3", "type": "sqlite3", "path": "python/sqlite3.html", "desc": "SQLite数据库的DB-API 0接口" }, { "name": "archiving", "type": "archiving", "path": "python/archiving.html", "desc": "数据压缩和归档" }, { "name": "zlib", "type": "zlib", "path": "python/zlib.html", "desc": "兼容 gzip 压缩" }, { "name": "gzip", "type": "gzip", "path": "python/gzip.html", "desc": "支持 gzip 文件" }, { "name": "bz2", "type": "bz2", "path": "python/bz2.html", "desc": "支持 bzip2 压缩" }, { "name": "lzma", "type": "lzma", "path": "python/lzma.html", "desc": "基于LZMA算法的压缩" }, { "name": "zipfile", "type": "zipfile", "path": "python/zipfile.html", "desc": "ZIP归档访问" }, { "name": "tarfile", "type": "tarfile", "path": "python/tarfile.html", "desc": "读取与压缩tar文件" }, { "name": "fileformats", "type": "fileformats", "path": "python/fileformats.html", "desc": "文件格式" }, { "name": "csv", "type": "csv", "path": "python/csv.html", "desc": "CSV 文件的读写" }, { "name": "configparser", "type": "configparser", "path": "python/configparser.html", "desc": "配置文件解析器" }, { "name": "netrc", "type": "netrc", "path": "python/netrc.html", "desc": "netrc文件处理" }, { "name": "xdrlib", "type": "xdrlib", "path": "python/xdrlib.html", "desc": "对XDR数据进行编码和解码" }, { "name": "plistlib", "type": "plistlib", "path": "python/plistlib.html", "desc": "生成并解析Mac OS X " }, { "name": "crypto", "type": "crypto", "path": "python/crypto.html", "desc": "加密服务" }, { "name": "hashlib", "type": "hashlib", "path": "python/hashlib.html", "desc": "安全哈希和消息摘要" }, { "name": "hmac", "type": "hmac", "path": "python/hmac.html", "desc": "用于消息验证的加密哈希" }, { "name": "allos", "type": "allos", "path": "python/allos.html", "desc": "通用操作系统服务" }, { "name": "os", "type": "os", "path": "python/os.html", "desc": "操作系统的各种接口" }, { "name": "io", "type": "io", "path": "python/io.html", "desc": "以流方式处理打开的核心工具" }, { "name": "time", "type": "time", "path": "python/time.html", "desc": "时间存取和转换" }, { "name": "argparse", "type": "argparse", "path": "python/argparse.html", "desc": "解析命令行参数的Parser工具" }, { "name": "getopt", "type": "getopt", "path": "python/getopt.html", "desc": "命令行选项的C样式解析器" }, { "name": "logging", "type": "logging", "path": "python/logging.html", "desc": "Python日志记录工具" }, { "name": "logging.config", "type": "logging.config", "path": "python/logging.config.html", "desc": "日志配置" }, { "name": "logging.handlers", "type": "logging.handlers", "path": "python/logging.handlers.html", "desc": "日志处理程序" }, { "name": "getpass", "type": "getpass", "path": "python/getpass.html", "desc": "便携式密码输入" }, { "name": "curses", "type": "curses", "path": "python/curses.html", "desc": "字符单元显示的终端处理" }, { "name": "curses.ascii", "type": "curses.ascii", "path": "python/curses.ascii.html", "desc": "ASCII字符的实用工具" }, { "name": "curses.panel", "type": "curses.panel", "path": "python/curses.panel.html", "desc": "curses的面板集扩展" }, { "name": "platform", "type": "platform", "path": "python/platform.html", "desc": "访问底层平台的识别数据" }, { "name": "errno", "type": "errno", "path": "python/errno.html", "desc": "标准errno系统符号" }, { "name": "ctypes", "type": "ctypes", "path": "python/ctypes.html", "desc": "Python的外部函数库" }, { "name": "concurrency", "type": "concurrency", "path": "python/concurrency.html", "desc": "并发执行" }, { "name": "threading", "type": "threading", "path": "python/threading.html", "desc": "基于线程的并行" }, { "name": "multiprocessing", "type": "multiprocessing", "path": "python/multiprocessing.html", "desc": "基于进程的并行" }, { "name": "concurrent", "type": "concurrent", "path": "python/concurrent.html", "desc": "concurrent" }, { "name": "concurrent.futures", "type": "concurrent.futures", "path": "python/concurrent.futures.html", "desc": "启动并行任务" }, { "name": "subprocess", "type": "subprocess", "path": "python/subprocess.html", "desc": "子进程管理" }, { "name": "sched", "type": "sched", "path": "python/sched.html", "desc": "事件调度程序" }, { "name": "queue", "type": "queue", "path": "python/queue.html", "desc": "同步队列类" }, { "name": "dummy_threading", "type": "dummy_threading", "path": "python/dummy_threading.html", "desc": "threading模块的插入替换" }, { "name": "_thread", "type": "_thread", "path": "python/_thread.html", "desc": "低级线程API" }, { "name": "_dummy_thread", "type": "_dummy_thread", "path": "python/_dummy_thread.html", "desc": "替换_thread模块" }, { "name": "ipc", "type": "ipc", "path": "python/ipc.html", "desc": "进程间通信和联网" }, { "name": "socket", "type": "socket", "path": "python/socket.html", "desc": "低级网络接口" }, { "name": "ssl", "type": "ssl", "path": "python/ssl.html", "desc": "套接字对象的TLS / SSL包装器" }, { "name": "select", "type": "select", "path": "python/select.html", "desc": "等待I / O完成" }, { "name": "selectors", "type": "selectors", "path": "python/selectors.html", "desc": "高级I / O复用" }, { "name": "asyncio", "type": "asyncio", "path": "python/asyncio.html", "desc": "异步 I/O、 事件循环、 协同程序和任务" }, { "name": "asyncore", "type": "asyncore", "path": "python/asyncore.html", "desc": "异步套接字处理程序" }, { "name": "asynchat", "type": "asynchat", "path": "python/asynchat.html", "desc": "异步套接字命令/响应处理程序" }, { "name": "signal", "type": "signal", "path": "python/signal.html", "desc": "设置异步事件处理程序" }, { "name": "mmap", "type": "mmap", "path": "python/mmap.html", "desc": "内存映射文件支持 0>" }, { "name": "netdata", "type": "netdata", "path": "python/netdata.html", "desc": "互联网数据处理" }, { "name": "email", "type": "email", "path": "python/email.html", "desc": "电子邮件和MIME处理包" }, { "name": "json", "type": "json", "path": "python/json.html", "desc": "JSON 编码与解码" }, { "name": "mailcap", "type": "mailcap", "path": "python/mailcap.html", "desc": "Mailcap文件处理" }, { "name": "mailbox", "type": "mailbox", "path": "python/mailbox.html", "desc": "以各种格式处理邮箱" }, { "name": "mimetypes", "type": "mimetypes", "path": "python/mimetypes.html", "desc": "将文件名映射到MIME类型" }, { "name": "base64", "type": "base64", "path": "python/base64.html", "desc": "Base16、Base32、Base64、Base85数据编码" }, { "name": "binhex", "type": "binhex", "path": "python/binhex.html", "desc": "编码和解码binhex4文件" }, { "name": "binascii", "type": "binascii", "path": "python/binascii.html", "desc": "在二进制和ASCII之间转换" }, { "name": "quopri", "type": "quopri", "path": "python/quopri.html", "desc": "编码和解码MIME可引用的数据" }, { "name": "uu", "type": "uu", "path": "python/uu.html", "desc": "对uuencode文件进行编码和解码" }, { "name": "markup", "type": "markup", "path": "python/markup.html", "desc": "结构化标记处理工具" }, { "name": "html", "type": "html", "path": "python/html.html", "desc": "超文本标记语言的支持" }, { "name": "html.parser", "type": "html.parser", "path": "python/html.parser.html", "desc": "简单的HTML和XHTML解析器" }, { "name": "html.entities", "type": "html.entities", "path": "python/html.entities.html", "desc": "HTML一般实体的定义" }, { "name": "xml", "type": "xml", "path": "python/xml.html", "desc": "XML处理模块" }, { "name": "xml.etree.elementtree", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html", "desc": "ElementTree XML API" }, { "name": "xml.dom", "type": "xml.dom", "path": "python/xml.dom.html", "desc": "文档对象模型API" }, { "name": "xml.dom.minidom", "type": "xml.dom.minidom", "path": "python/xml.dom.minidom.html", "desc": "最小DOM实现" }, { "name": "xml.dom.pulldom", "type": "xml.dom.pulldom", "path": "python/xml.dom.pulldom.html", "desc": "支持构建部分DOM树" }, { "name": "xml.sax", "type": "xml.sax", "path": "python/xml.sax.html", "desc": "支持SAX2解析器" }, { "name": "xml.sax.handler", "type": "xml.sax.handler", "path": "python/xml.sax.handler.html", "desc": "SAX处理程序的基类" }, { "name": "xml.sax.utils", "type": "xml.sax.utils", "path": "python/xml.sax.utils.html", "desc": "SAX实用程序" }, { "name": "xml.sax.reader", "type": "xml.sax.reader", "path": "python/xml.sax.reader.html", "desc": "XML解析器接口" }, { "name": "pyexpat", "type": "pyexpat", "path": "python/pyexpat.html", "desc": "使用Expat进行快速XML解析" }, { "name": "internet", "type": "internet", "path": "python/internet.html", "desc": "网络协议与支持" }, { "name": "webbrowser", "type": "webbrowser", "path": "python/webbrowser.html", "desc": "方便的 Web 浏览器控制器" }, { "name": "cgi", "type": "cgi", "path": "python/cgi.html", "desc": "通用网关接口支持" }, { "name": "cgitb", "type": "cgitb", "path": "python/cgitb.html", "desc": "CGI 脚本的回馈错误管理" }, { "name": "wsgiref", "type": "wsgiref", "path": "python/wsgiref.html", "desc": "WSGI Utilities和参考实现" }, { "name": "urllib", "type": "urllib", "path": "python/urllib.html", "desc": "URL 处理模块" }, { "name": "urllib.request", "type": "urllib.request", "path": "python/urllib.request.html", "desc": "可扩展的开放Url类" }, { "name": "urllib.parse", "type": "urllib.parse", "path": "python/urllib.parse.html", "desc": "将网址解析到组件" }, { "name": "urllib.error", "type": "urllib.error", "path": "python/urllib.error.html", "desc": "由urllib" }, { "name": "urllib.robotparser", "type": "urllib.robotparser", "path": "python/urllib.robotparser.html", "desc": "用于robots" }, { "name": "http", "type": "http", "path": "python/http.html", "desc": "HTTP模块" }, { "name": "http.client", "type": "http.client", "path": "python/http.client.html", "desc": "HTTP 协议客户端" }, { "name": "ftplib", "type": "ftplib", "path": "python/ftplib.html", "desc": "FTP 协议客户端" }, { "name": "poplib", "type": "poplib", "path": "python/poplib.html", "desc": "POP3 协议客户端" }, { "name": "imaplib", "type": "imaplib", "path": "python/imaplib.html", "desc": "IMAP4 协议客户端" }, { "name": "nntplib", "type": "nntplib", "path": "python/nntplib.html", "desc": "NNTP 协议客户端" }, { "name": "smtplib", "type": "smtplib", "path": "python/smtplib.html", "desc": "SMTP 协议客户端" }, { "name": "smtpd", "type": "smtpd", "path": "python/smtpd.html", "desc": "SMTP 服务" }, { "name": "telnetlib", "type": "telnetlib", "path": "python/telnetlib.html", "desc": "Telnet 客户端" }, { "name": "uuid", "type": "uuid", "path": "python/uuid.html", "desc": "根据RFC 4122的UUID对象" }, { "name": "socketserver", "type": "socketserver", "path": "python/socketserver.html", "desc": "网络服务器框架" }, { "name": "http.server", "type": "http.server", "path": "python/http.server.html", "desc": "HTTP服务器" }, { "name": "http.cookies", "type": "http.cookies", "path": "python/http.cookies.html", "desc": "HTTP状态管理" }, { "name": "http.cookiejar", "type": "http.cookiejar", "path": "python/http.cookiejar.html", "desc": "HTTP客户端的Cookie处理" }, { "name": "xmlrpc", "type": "xmlrpc", "path": "python/xmlrpc.html", "desc": "XMLRPC服务器和客户端模块" }, { "name": "xmlrpc.client", "type": "xmlrpc.client", "path": "python/xmlrpc.client.html", "desc": "XML-RPC客户端访问" }, { "name": "xmlrpc.server", "type": "xmlrpc.server", "path": "python/xmlrpc.server.html", "desc": "基本XML-RPC服务器" }, { "name": "ipaddress", "type": "ipaddress", "path": "python/ipaddress.html", "desc": "IPv4 / IPv6操作库" }, { "name": "mm", "type": "mm", "path": "python/mm.html", "desc": "多媒体服务" }, { "name": "audioop", "type": "audioop", "path": "python/audioop.html", "desc": "处理原始音频数据" }, { "name": "aifc", "type": "aifc", "path": "python/aifc.html", "desc": "读写AIFF和AIFC文件" }, { "name": "sunau", "type": "sunau", "path": "python/sunau.html", "desc": "读写Sun AU文件" }, { "name": "wave", "type": "wave", "path": "python/wave.html", "desc": "读取和写入WAV文件" }, { "name": "chunk", "type": "chunk", "path": "python/chunk.html", "desc": "读取IFF分块数据" }, { "name": "colorsys", "type": "colorsys", "path": "python/colorsys.html", "desc": "颜色系统之间的转换" }, { "name": "imghdr", "type": "imghdr", "path": "python/imghdr.html", "desc": "确定图像的类型" }, { "name": "sndhdr", "type": "sndhdr", "path": "python/sndhdr.html", "desc": "确定声音文件的类型" }, { "name": "ossaudiodev", "type": "ossaudiodev", "path": "python/ossaudiodev.html", "desc": "访问与OSS兼容的音频设备" }, { "name": "i18n", "type": "i18n", "path": "python/i18n.html", "desc": "国际化" }, { "name": "gettext", "type": "gettext", "path": "python/gettext.html", "desc": "多语言国际化服务" }, { "name": "locale", "type": "locale", "path": "python/locale.html", "desc": "国际化服务" }, { "name": "frameworks", "type": "frameworks", "path": "python/frameworks.html", "desc": "程序框架" }, { "name": "turtle", "type": "turtle", "path": "python/turtle.html", "desc": "Turtle graphics(图像)" }, { "name": "cmd", "type": "cmd", "path": "python/cmd.html", "desc": "支持面向行的命令解释器" }, { "name": "shlex", "type": "shlex", "path": "python/shlex.html", "desc": "简单词法分析" }, { "name": "tk", "type": "tk", "path": "python/tk.html", "desc": "TK图形用户接口" }, { "name": "tkinter", "type": "tkinter", "path": "python/tkinter.html", "desc": "Tcl/Tk的python接口" }, { "name": "tkinter.ttk", "type": "tkinter", "path": "python/tkinter.ttk.html", "desc": "Tk主题化部件" }, { "name": "tkinter.tix", "type": "tkinter", "path": "python/tkinter.tix.html", "desc": "Tk扩展控件" }, { "name": "tkinter.scrolledtext", "type": "tkinter", "path": "python/tkinter.scrolledtext.html", "desc": "滚动文本控件" }, { "name": "tkinter.examples", "type": "tkinter", "path": "python/tkinter.examples.html", "desc": "tkinter各个控件的示例" }, { "name": "tkinter_Label", "type": "tkinter", "path": "python/tkinter.examples.html#b", "desc": "标签控件，可以显示文本" }, { "name": "tkinter_Button", "type": "tkinter", "path": "python/tkinter.examples.html#c", "desc": "按钮控件，显示一个按钮" }, { "name": "tkinter_Entry", "type": "tkinter", "path": "python/tkinter.examples.html#d", "desc": "输入控件，用于显示简单的文本内容" }, { "name": "tkinter_Text", "type": "tkinter", "path": "python/tkinter.examples.html#f", "desc": "文本控件，用于显示多行文本" }, { "name": "tkinter_Scrollbar", "type": "tkinter", "path": "python/tkinter.examples.html#g", "desc": "滚动条控件，给一个控件绑定滚动条" }, { "name": "tkinter_Checkbutton", "type": "tkinter", "path": "python/tkinter.examples.html#h", "desc": "多选框控件" }, { "name": "tkinter_Radiobutton", "type": "tkinter", "path": "python/tkinter.examples.html#i", "desc": "单选框控件" }, { "name": "tkinter_Listbox", "type": "tkinter", "path": "python/tkinter.examples.html#j", "desc": "列表框控件，可以包含一个或多个文本框" }, { "name": "tkinter_Scale", "type": "tkinter", "path": "python/tkinter.examples.html#n", "desc": "供用户通过拖拽指示器来改变变量的值，可以水平，也可以竖直" }, { "name": "tkinter_Spinbox", "type": "tkinter", "path": "python/tkinter.examples.html#o", "desc": "数值范围控件" }, { "name": "tkinter_Menu", "type": "tkinter", "path": "python/tkinter.examples.html#p", "desc": "菜单控件，包括顶层菜单和鼠标右键菜单" }, { "name": "tkinter_Combobox", "type": "tkinter", "path": "python/tkinter.examples.html#r", "desc": "下拉框控件" }, { "name": "tkinter_Frame", "type": "tkinter", "path": "python/tkinter.examples.html#s", "desc": "框架控件，在桌面上显示一个矩形区域，多作为一个容器控件" }, { "name": "tkinter_Treeview", "type": "tkinter", "path": "python/tkinter.examples.html#t", "desc": "显示表格数据或树状数据" }, { "name": "tkinter_place", "type": "tkinter", "path": "python/tkinter.examples.html#v", "desc": "绝对布局" }, { "name": "tkinter_pack", "type": "tkinter", "path": "python/tkinter.examples.html#w", "desc": "相对布局" }, { "name": "tkinter_grid", "type": "tkinter", "path": "python/tkinter.examples.html#x", "desc": "表格布局" }, { "name": "tkinter_<Button-1>", "type": "tkinter", "path": "python/tkinter.examples.html#y", "desc": "绑定鼠标点击事件" }, { "name": "tkinter_<B1-Motion>", "type": "tkinter", "path": "python/tkinter.examples.html#z", "desc": "绑定鼠标移动事件" }, { "name": "tkinter_<ButtonRelease>", "type": "tkinter", "path": "python/tkinter.examples.html#A", "desc": "绑定鼠标释放事件" }, { "name": "tkinter_<Enter><Leave>", "type": "tkinter", "path": "python/tkinter.examples.html#B", "desc": "绑定进入和离开事件" }, { "name": "tkinter_<Key>", "type": "tkinter", "path": "python/tkinter.examples.html#C", "desc": "响应所有按键的事件" }, { "name": "tkinter_<BackSpace>", "type": "tkinter", "path": "python/tkinter.examples.html#D", "desc": "响应特殊按键事件" }, { "name": "tkinter_bind", "type": "tkinter", "path": "python/tkinter.examples.html#E", "desc": "指定按键事件" }, { "name": "tkinter_<Control-Alt-a>", "type": "tkinter", "path": "python/tkinter.examples.html#F", "desc": "组合按键事件" }, { "name": "idle", "type": "idle", "path": "python/idle.html", "desc": "集成开发与学习环境" }, { "name": "othergui", "type": "othergui", "path": "python/othergui.html", "desc": "其他图形用户接口包" }, { "name": "development", "type": "development", "path": "python/development.html", "desc": "开发工具" }, { "name": "typing", "type": "typing", "path": "python/typing.html", "desc": "支持类型提示" }, { "name": "pydoc", "type": "pydoc", "path": "python/pydoc.html", "desc": "文档生成器和联机帮助系统" }, { "name": "doctest", "type": "doctest", "path": "python/doctest.html", "desc": "测试交互式 Python 示例" }, { "name": "unittest", "type": "unittest", "path": "python/unittest.html", "desc": "单元测试框架" }, { "name": "unittest.mock", "type": "unittest.mock", "path": "python/unittest.mock.html", "desc": "模拟对象库" }, { "name": "unittest.mock-examples", "type": "unittest.mock-examples", "path": "python/unittest.mock-examples.html", "desc": "开始使用" }, { "name": "2to3", "type": "2to3", "path": "python/2to3.html", "desc": "2to3-Python 2 到 3 代码自动转化" }, { "name": "test", "type": "test", "path": "python/test.html", "desc": "回归测试包为 Python" }, { "name": "debug", "type": "debug", "path": "python/debug.html", "desc": "调试和分析" }, { "name": "bdb", "type": "bdb", "path": "python/bdb.html", "desc": "调试器框架" }, { "name": "faulthandler", "type": "faulthandler", "path": "python/faulthandler.html", "desc": "转储Python回溯" }, { "name": "pdb", "type": "pdb", "path": "python/pdb.html", "desc": "The Python Debugger" }, { "name": "profile", "type": "profile", "path": "python/profile.html", "desc": "Python分析器" }, { "name": "timeit", "type": "timeit", "path": "python/timeit.html", "desc": "测量小代码片段的执行时间" }, { "name": "trace", "type": "trace", "path": "python/trace.html", "desc": "跟踪或跟踪 Python 语句执行" }, { "name": "tracemalloc", "type": "tracemalloc", "path": "python/tracemalloc.html", "desc": "跟踪内存分配" }, { "name": "distribution", "type": "distribution", "path": "python/distribution.html", "desc": "软件包装及分销" }, { "name": "distutils", "type": "distutils", "path": "python/distutils.html", "desc": "建立和安装的 Python 模块" }, { "name": "ensurepip", "type": "ensurepip", "path": "python/ensurepip.html", "desc": "引导 pip 安装程序" }, { "name": "venv", "type": "venv", "path": "python/venv.html", "desc": "创建虚拟环境" }, { "name": "zipapp", "type": "zipapp", "path": "python/zipapp.html", "desc": "管理可执行 python zip档案" }, { "name": "python", "type": "python", "path": "python/python.html", "desc": "Python 运行时服务" }, { "name": "sys", "type": "sys", "path": "python/sys.html", "desc": "系统特定参数和函数" }, { "name": "sysconfig", "type": "sysconfig", "path": "python/sysconfig.html", "desc": "提供对 Python 的配置信息的访问" }, { "name": "builtins", "type": "builtins", "path": "python/builtins.html", "desc": "内置对象" }, { "name": "__main__", "type": "__main__", "path": "python/__main__.html", "desc": "顶级脚本环境" }, { "name": "warnings", "type": "warnings", "path": "python/warnings.html", "desc": "警告控制" }, { "name": "contextlib", "type": "contextlib", "path": "python/contextlib.html", "desc": "with语句的上下文实用程序" }, { "name": "abc", "type": "abc", "path": "python/abc.html", "desc": "抽象基类" }, { "name": "atexit", "type": "atexit", "path": "python/atexit.html", "desc": "退出处理程序" }, { "name": "traceback", "type": "traceback", "path": "python/traceback.html", "desc": "打印或检索堆栈跟踪" }, { "name": "__future__", "type": "__future__", "path": "python/__future__.html", "desc": "未来语句定义" }, { "name": "gc", "type": "gc", "path": "python/gc.html", "desc": "垃圾回收器接口" }, { "name": "inspect", "type": "inspect", "path": "python/inspect.html", "desc": "检查活跃的对象" }, { "name": "site", "type": "site", "path": "python/site.html", "desc": "网站特定的配置挂钩" }, { "name": "fpectl", "type": "fpectl", "path": "python/fpectl.html", "desc": "浮点异常控制" }, { "name": "custominterp", "type": "custominterp", "path": "python/custominterp.html", "desc": "自定义 Python 解释器" }, { "name": "code", "type": "code", "path": "python/code.html", "desc": "解释器基类" }, { "name": "codeop", "type": "codeop", "path": "python/codeop.html", "desc": "编译 Python 代码" }, { "name": "modules", "type": "modules", "path": "python/modules.html", "desc": "导入模块" }, { "name": "zipimport", "type": "zipimport", "path": "python/zipimport.html", "desc": "从 Zip 存档导入模块" }, { "name": "pkgutil", "type": "pkgutil", "path": "python/pkgutil.html", "desc": "软件包扩展程序" }, { "name": "modulefinder", "type": "modulefinder", "path": "python/modulefinder.html", "desc": "查找脚本使用的模块" }, { "name": "runpy", "type": "runpy", "path": "python/runpy.html", "desc": "定位和执行Python模块" }, { "name": "importlib", "type": "importlib", "path": "python/importlib.html", "desc": "执行import" }, { "name": "language", "type": "language", "path": "python/language.html", "desc": "Python 语言服务" }, { "name": "parser", "type": "parser", "path": "python/parser.html", "desc": "访问 Python 语法树" }, { "name": "ast", "type": "ast", "path": "python/ast.html", "desc": "抽象语法树" }, { "name": "symtable", "type": "symtable", "path": "python/symtable.html", "desc": "访问编译器的符号表" }, { "name": "symbol", "type": "symbol", "path": "python/symbol.html", "desc": "常数用 Python 语法树" }, { "name": "token", "type": "token", "path": "python/token.html", "desc": "常数用 Python 语法树" }, { "name": "keyword", "type": "keyword", "path": "python/keyword.html", "desc": "测试Python关键字" }, { "name": "tokenize", "type": "tokenize", "path": "python/tokenize.html", "desc": "适用于Python源代码的Tokenizer" }, { "name": "tabnanny", "type": "tabnanny", "path": "python/tabnanny.html", "desc": "检测模糊缩进" }, { "name": "pyclbr", "type": "pyclbr", "path": "python/pyclbr.html", "desc": "Python类浏览器支持" }, { "name": "py_compile", "type": "py_compile", "path": "python/py_compile.html", "desc": "编译Python源文件" }, { "name": "compileall", "type": "compileall", "path": "python/compileall.html", "desc": "字节编译Python库" }, { "name": "dis", "type": "dis", "path": "python/dis.html", "desc": "Python 字节码反汇编器" }, { "name": "pickletools", "type": "pickletools", "path": "python/pickletools.html", "desc": "pickle 开发工具" }, { "name": "misc", "type": "misc", "path": "python/misc.html", "desc": "杂项服务" }, { "name": "formatter", "type": "formatter", "path": "python/formatter.html", "desc": "通用输出格式" }, { "name": "windows", "type": "windows", "path": "python/windows.html", "desc": "MS Windows 专用服务" }, { "name": "msilib", "type": "msilib", "path": "python/msilib.html", "desc": "读写Microsoft安装程序文件" }, { "name": "msvcrt", "type": "msvcrt", "path": "python/msvcrt.html", "desc": "从MS VC ++运行时的有用例程" }, { "name": "winreg", "type": "winreg", "path": "python/winreg.html", "desc": "注册表访问" }, { "name": "winsound", "type": "winsound", "path": "python/winsound.html", "desc": "Windows的声音播放接口" }, { "name": "unix", "type": "unix", "path": "python/unix.html", "desc": "Unix 专用服务" }, { "name": "posix", "type": "posix", "path": "python/posix.html", "desc": "最常见的POSIX系统调用" }, { "name": "pwd", "type": "pwd", "path": "python/pwd.html", "desc": "密码数据库" }, { "name": "spwd", "type": "spwd", "path": "python/spwd.html", "desc": "影子密码数据库" }, { "name": "grp", "type": "grp", "path": "python/grp.html", "desc": "群组数据库" }, { "name": "crypt", "type": "crypt", "path": "python/crypt.html", "desc": "检查Unix密码的功能" }, { "name": "termios", "type": "termios", "path": "python/termios.html", "desc": "POSIX style tty control" }, { "name": "tty", "type": "tty", "path": "python/tty.html", "desc": "终端控制功能" }, { "name": "pty", "type": "pty", "path": "python/pty.html", "desc": "伪终端实用程序" }, { "name": "fcntl", "type": "fcntl", "path": "python/fcntl.html", "desc": "fcntl和ioctl系统调用" }, { "name": "pipes", "type": "pipes", "path": "python/pipes.html", "desc": "shell管道接口" }, { "name": "resource", "type": "resource", "path": "python/resource.html", "desc": "资源使用信息" }, { "name": "nis", "type": "nis", "path": "python/nis.html", "desc": "Sun的NIS（黄页）接口" }, { "name": "syslog", "type": "syslog", "path": "python/syslog.html", "desc": "Unix syslog库例程" }, { "name": "superseded", "type": "superseded", "path": "python/superseded.html", "desc": "废弃的模块" }, { "name": "optparse", "type": "optparse", "path": "python/optparse.html", "desc": "解析命令行选项" }, { "name": "imp", "type": "imp", "path": "python/imp.html", "desc": "访问import内部" }, { "name": "BeautifulSoup", "type": "BeautifulSoup", "path": "python/BeautifulSoup.html", "desc": "一个HTML或XML的解析库,可以用它来方便的从网页中提取数据" }, { "name": "Pillow(PIL)", "type": "Pillow", "path": "python/Pillow(PIL).html", "desc": "功能强大的图像处理库" }, { "name": "requests(basic)", "type": "requests", "path": "python/requests(basic).html", "desc": "强大、便捷的HTTP库（基础）" }, { "name": "requests(advance)", "type": "requests", "path": "python/requests(advance).html", "desc": "强大、便捷的HTTP库（进阶）" }, { "name": "Scrapy", "type": "Scrapy", "path": "python/Scrapy.html", "desc": "一个快速、高层次的屏幕抓取和web抓取框架，用于抓取web站点并从页面中提取结构化的数据" }, { "name": "abc.abstractmethod", "type": "abc", "path": "python/abc.html#abc.abstractmethod", "desc": "装饰器指示抽象方法" }, { "name": "abc.abstractclassmethod", "type": "abc", "path": "python/abc.html#abc.abstractclassmethod", "desc": "内建classmethod()的子类，表示抽象类方法" }, { "name": "abc.abstractstaticmethod", "type": "abc", "path": "python/abc.html#abc.abstractstaticmethod", "desc": "内建staticmethod()的子类，表示抽象静态方法" }, { "name": "abc.abstractproperty", "type": "abc", "path": "python/abc.html#abc.abstractproperty", "desc": "内建property()的子类，表示一个抽象属性" }, { "name": "abc.get_cache_token", "type": "abc", "path": "python/abc.html#abc.get_cache_token", "desc": "返回当前抽象基类缓存令牌" }, { "name": "aifc.open", "type": "aifc", "path": "python/aifc.html#aifc.open", "desc": "打开AIFF或AIFF-C文件并返回对象实例，方法如下所述" }, { "name": "array.typecodes", "type": "array", "path": "python/array.html#array.typecodes", "desc": "包含所有可用类型代码的字符串" }, { "name": "ast.parse", "type": "ast", "path": "python/ast.html#ast.parse", "desc": "将源解析为AST节点" }, { "name": "ast.literal_eval", "type": "ast", "path": "python/ast.html#ast.literal_eval", "desc": "安全计算表达式节点或包含Python字面值或容器显示的字符串" }, { "name": "ast.get_docstring", "type": "ast", "path": "python/ast.html#ast.get_docstring", "desc": "Return the docstring of the given node (which must be a FunctionDef, ClassDef or Module node), or None if it has no docstring" }, { "name": "ast.fix_missing_locations", "type": "ast", "path": "python/ast.html#ast.fix_missing_locations", "desc": "当使用compile()编译节点树时，编译器对于支持它们的每个节点都需要lineno和col_offset属性" }, { "name": "ast.increment_lineno", "type": "ast", "path": "python/ast.html#ast.increment_lineno", "desc": "从节点开始，通过n增加树中每个节点的行号" }, { "name": "ast.copy_location", "type": "ast", "path": "python/ast.html#ast.copy_location", "desc": "如果可能，将源位置（lineno和col_offset）从old_node复制到new_node，然后返回new_node " }, { "name": "ast.iter_fields", "type": "ast", "path": "python/ast.html#ast.iter_fields", "desc": "Yield a tuple of (fieldname, value) for each field in node" }, { "name": "ast.iter_child_nodes", "type": "ast", "path": "python/ast.html#ast.iter_child_nodes", "desc": "产生节点的所有直接子节点，即作为节点的所有字段和作为节点列表的所有字段项" }, { "name": "ast.walk", "type": "ast", "path": "python/ast.html#ast.walk", "desc": "递归地以节点（包括节点本身）开始生成树中的所有后代节点，没有指定顺序" }, { "name": "ast.dump", "type": "ast", "path": "python/ast.html#ast.dump", "desc": "在节点中返回树的格式化转储" }, { "name": "asynchat.async_chat.ac_in_buffer_size", "type": "asynchat", "path": "python/asynchat.html#asynchat.async_chat.ac_in_buffer_size", "desc": "异步输入缓冲区大小（默认值4096）" }, { "name": "asynchat.async_chat.ac_out_buffer_size", "type": "asynchat", "path": "python/asynchat.html#asynchat.async_chat.ac_out_buffer_size", "desc": "异步输出缓冲区大小（默认值4096）" }, { "name": "asyncore.loop", "type": "asyncore", "path": "python/asyncore.html#asyncore.loop", "desc": "输入轮询循环，在计数过程或所有打开的通道关闭后终止循环" }, { "name": "atexit.register", "type": "atexit", "path": "python/atexit.html#atexit.register", "desc": "将func寄存器作为要在终止时执行的函数" }, { "name": "atexit.unregister", "type": "atexit", "path": "python/atexit.html#atexit.unregister", "desc": "从要在解释器关机运行的函数列表中删除func" }, { "name": "audioop.add", "type": "audioop", "path": "python/audioop.html#audioop.add", "desc": "返回一个片段，它是作为参数传递的两个样本的相加" }, { "name": "audioop.adpcm2lin", "type": "audioop", "path": "python/audioop.html#audioop.adpcm2lin", "desc": "将Intel / DVI ADPCM编码片段解码为线性片段" }, { "name": "audioop.alaw2lin", "type": "audioop", "path": "python/audioop.html#audioop.alaw2lin", "desc": "将a-LAW编码中的声音片段转换为线性编码的声音片段" }, { "name": "audioop.avg", "type": "audioop", "path": "python/audioop.html#audioop.avg", "desc": "返回片段中所有样本的平均值" }, { "name": "audioop.avgpp", "type": "audioop", "path": "python/audioop.html#audioop.avgpp", "desc": "返回片段中所有样本的平均峰 - 峰值" }, { "name": "audioop.bias", "type": "audioop", "path": "python/audioop.html#audioop.bias", "desc": "返回作为原始片段的片段，并向每个样本添加偏差" }, { "name": "audioop.byteswap", "type": "audioop", "path": "python/audioop.html#audioop.byteswap", "desc": "“Byteswap”片段中的所有样本，并返回修改的片段" }, { "name": "audioop.cross", "type": "audioop", "path": "python/audioop.html#audioop.cross", "desc": "返回作为参数传递的片段中的零交叉的数量" }, { "name": "audioop.findfactor", "type": "audioop", "path": "python/audioop.html#audioop.findfactor", "desc": "返回因子F使得rms（add（fragment， mul（reference， -F））） t4>是最小的，即返回要乘以参考的因子，以使其与片段尽可能匹配" }, { "name": "audioop.findfit", "type": "audioop", "path": "python/audioop.html#audioop.findfit", "desc": "尝试将引用与片段（应为更长的片段）的一部分匹配" }, { "name": "audioop.findmax", "type": "audioop", "path": "python/audioop.html#audioop.findmax", "desc": "搜索片段获取长度长度的切片（不是字节！）with maximum energy, i" }, { "name": "audioop.getsample", "type": "audioop", "path": "python/audioop.html#audioop.getsample", "desc": "返回样本index的值" }, { "name": "audioop.lin2adpcm", "type": "audioop", "path": "python/audioop.html#audioop.lin2adpcm", "desc": "将采样转换为4位Intel / DVI ADPCM编码" }, { "name": "audioop.lin2alaw", "type": "audioop", "path": "python/audioop.html#audioop.lin2alaw", "desc": "将音频片段中的样本转换为a-LAW编码，并将其作为字节对象返回" }, { "name": "audioop.lin2lin", "type": "audioop", "path": "python/audioop.html#audioop.lin2lin", "desc": "以1-，2-，3-和4字节格式转换样本" }, { "name": "audioop.lin2ulaw", "type": "audioop", "path": "python/audioop.html#audioop.lin2ulaw", "desc": "将音频片段中的样本转换为u-LAW编码，并将其作为字节对象返回" }, { "name": "audioop.max", "type": "audioop", "path": "python/audioop.html#audioop.max", "desc": "返回片段中所有样本的绝对值的最大值" }, { "name": "audioop.maxpp", "type": "audioop", "path": "python/audioop.html#audioop.maxpp", "desc": "返回声音片段中的最大峰 - 峰值" }, { "name": "audioop.minmax", "type": "audioop", "path": "python/audioop.html#audioop.minmax", "desc": "返回由声音片段中所有样本的最小值和最大值组成的元组" }, { "name": "audioop.mul", "type": "audioop", "path": "python/audioop.html#audioop.mul", "desc": "返回具有原始片段中的所有样本乘以浮点值因子的片段" }, { "name": "audioop.ratecv", "type": "audioop", "path": "python/audioop.html#audioop.ratecv", "desc": "转换输入片段的帧速率" }, { "name": "audioop.reverse", "type": "audioop", "path": "python/audioop.html#audioop.reverse", "desc": "反转片段中的样本，并返回修改的片段" }, { "name": "audioop.rms", "type": "audioop", "path": "python/audioop.html#audioop.rms", "desc": "返回片段的均方根，即sqrt(sum(S_i^2)/n)" }, { "name": "audioop.tomono", "type": "audioop", "path": "python/audioop.html#audioop.tomono", "desc": "将立体声片段转换为单声道片段" }, { "name": "audioop.tostereo", "type": "audioop", "path": "python/audioop.html#audioop.tostereo", "desc": "从单声道片段生成立体声片段" }, { "name": "audioop.ulaw2lin", "type": "audioop", "path": "python/audioop.html#audioop.ulaw2lin", "desc": "将u-LAW编码中的声音片段转换为线性编码的声音片段" }, { "name": "base64.b64encode", "type": "base64", "path": "python/base64.html#base64.b64encode", "desc": "使用Base64编码类字节对象s，并返回编码后的字节" }, { "name": "base64.b64decode", "type": "base64", "path": "python/base64.html#base64.b64decode", "desc": "解码Base64编码的类字节对象或ASCII字符串s并返回解码的字节" }, { "name": "base64.standard_b64encode", "type": "base64", "path": "python/base64.html#base64.standard_b64encode", "desc": "使用标准的Base64字母表编码类字节对象 s并返回编码的字节" }, { "name": "base64.standard_b64decode", "type": "base64", "path": "python/base64.html#base64.standard_b64decode", "desc": "使用标准的Base64字母表解码类字节对象或ASCII字符串s并返回解码的字节" }, { "name": "base64.urlsafe_b64encode", "type": "base64", "path": "python/base64.html#base64.urlsafe_b64encode", "desc": "使用URL和文件系统安全的字母表编码类字节对象s，它用-和_分别替换标准的Base64字母表中的+和/，并返回编码的字节" }, { "name": "base64.urlsafe_b64decode", "type": "base64", "path": "python/base64.html#base64.urlsafe_b64decode", "desc": "使用URL及文件系统安全的字母表解码类字节对象或ASCII字符串s，它将标准Base64字母表中的+替换为-、/替换为_，并返回解码后的字节" }, { "name": "base64.b32encode", "type": "base64", "path": "python/base64.html#base64.b32encode", "desc": "使用Base32编码类字节对象s并返回编码后的字节" }, { "name": "base64.b32decode", "type": "base64", "path": "python/base64.html#base64.b32decode", "desc": "解码Base32编码的bytes-like object或ASCII字符串s并返回解码的bytes" }, { "name": "base64.b16encode", "type": "base64", "path": "python/base64.html#base64.b16encode", "desc": "使用Base16编码bytes-like object s并返回编码的bytes" }, { "name": "base64.b16decode", "type": "base64", "path": "python/base64.html#base64.b16decode", "desc": "解码Base16编码的bytes-like object或ASCII字符串s并返回解码的bytes" }, { "name": "base64.a85encode", "type": "base64", "path": "python/base64.html#base64.a85encode", "desc": "使用Ascii85编码bytes-like object b并返回编码的bytes" }, { "name": "base64.a85decode", "type": "base64", "path": "python/base64.html#base64.a85decode", "desc": "解码Ascii85编码的bytes-like object或ASCII字符串b并返回解码的bytes" }, { "name": "base64.b85encode", "type": "base64", "path": "python/base64.html#base64.b85encode", "desc": "使用base85编码bytes-like object b（如git-style binary diffs）并返回编码的bytes" }, { "name": "base64.b85decode", "type": "base64", "path": "python/base64.html#base64.b85decode", "desc": "解码base85编码的bytes-like object或ASCII字符串b并返回解码的bytes" }, { "name": "base64.decode", "type": "base64", "path": "python/base64.html#base64.decode", "desc": "解码二进制输入文件的内容，并将生成的二进制数据写入输出文件" }, { "name": "base64.decodebytes", "type": "base64", "path": "python/base64.html#base64.decodebytes", "desc": "解码bytes-like object s，其中必须包含一行或多行base64编码数据，并返回解码的bytes" }, { "name": "base64.encode", "type": "base64", "path": "python/base64.html#base64.encode", "desc": "编码二进制输入文件的内容，并将生成的base64编码数据写入输出文件" }, { "name": "base64.encodebytes", "type": "base64", "path": "python/base64.html#base64.encodebytes", "desc": "编码类字节对象s，它可以包含任意二进制数据，并返回base64编码数据的字节，根据RFC 2045 （MIME），在输出的每76个字节之后插入换行符（b'\\n'），并确保末尾有一个换行符" }, { "name": "bdb.checkfuncname", "type": "bdb", "path": "python/bdb.html#bdb.checkfuncname", "desc": "检查我们是否应该在这里断开，这取决于断点b设置的方式" }, { "name": "bdb.effective", "type": "bdb", "path": "python/bdb.html#bdb.effective", "desc": "确定此行代码是否存在有效（活动）断点" }, { "name": "bdb.set_trace", "type": "bdb", "path": "python/bdb.html#bdb.set_trace", "desc": "使用调用者框架中的Bdb实例开始调试" }, { "name": "binascii.a2b_uu", "type": "binascii", "path": "python/binascii.html#binascii.a2b_uu", "desc": "将单行的uuencoded数据转换回二进制并返回二进制数据" }, { "name": "binascii.b2a_uu", "type": "binascii", "path": "python/binascii.html#binascii.b2a_uu", "desc": "将二进制数据转换为一行ASCII字符，返回值是转换后的行，包括换行符" }, { "name": "binascii.a2b_base64", "type": "binascii", "path": "python/binascii.html#binascii.a2b_base64", "desc": "将一个base64数据块转换回二进制并返回二进制数据" }, { "name": "binascii.b2a_base64", "type": "binascii", "path": "python/binascii.html#binascii.b2a_base64", "desc": "在base64编码中将二进制数据转换为一行ASCII字符" }, { "name": "binascii.a2b_qp", "type": "binascii", "path": "python/binascii.html#binascii.a2b_qp", "desc": "将一组引用可打印数据转换回二进制并返回二进制数据" }, { "name": "binascii.b2a_qp", "type": "binascii", "path": "python/binascii.html#binascii.b2a_qp", "desc": "将二进制数据转换为带引号的可打印编码中的ASCII字符行" }, { "name": "binascii.a2b_hqx", "type": "binascii", "path": "python/binascii.html#binascii.a2b_hqx", "desc": "将binhex4格式的ASCII数据转换为二进制，不进行RLE解压缩" }, { "name": "binascii.rledecode_hqx", "type": "binascii", "path": "python/binascii.html#binascii.rledecode_hqx", "desc": "按照binhex4标准对数据执行RLE解压缩" }, { "name": "binascii.rlecode_hqx", "type": "binascii", "path": "python/binascii.html#binascii.rlecode_hqx", "desc": "对数据执行binhex4样式RLE压缩并返回结果" }, { "name": "binascii.b2a_hqx", "type": "binascii", "path": "python/binascii.html#binascii.b2a_hqx", "desc": "执行hexbin4二进制到ASCII的转换并返回结果字符串" }, { "name": "binascii.crc_hqx", "type": "binascii", "path": "python/binascii.html#binascii.crc_hqx", "desc": "计算数据的binhex4 crc值，以值开始作为初始crc，并返回结果" }, { "name": "binascii.crc32", "type": "binascii", "path": "python/binascii.html#binascii.crc32", "desc": "以值的初始CRC开始，计算数据的32位校验和CRC-32" }, { "name": "binascii.b2a_hex", "type": "binascii", "path": "python/binascii.html#binascii.b2a_hex", "desc": "返回二进制数据的十六进制表示" }, { "name": "binascii.a2b_hex", "type": "binascii", "path": "python/binascii.html#binascii.a2b_hex", "desc": "返回由十六进制字符串hexstr表示的二进制数据" }, { "name": "binhex.binhex", "type": "binhex", "path": "python/binhex.html#binhex.binhex", "desc": "将文件名输入的二进制文件转换为binhex文件输出" }, { "name": "binhex.hexbin", "type": "binhex", "path": "python/binhex.html#binhex.hexbin", "desc": "解码binhex文件输入" }, { "name": "bisect.bisect_left", "type": "bisect", "path": "python/bisect.html#bisect.bisect_left", "desc": "在a中找到x的插入点以保持排序顺序" }, { "name": "bisect.bisect_right", "type": "bisect", "path": "python/bisect.html#bisect.bisect_right", "desc": "类似于bisect_left()，但返回在a中x的任何现有条目之后（右侧）的插入点" }, { "name": "bisect.insort_left", "type": "bisect", "path": "python/bisect.html#bisect.insort_left", "desc": "以排序顺序在a中插入x" }, { "name": "bisect.insort_right", "type": "bisect", "path": "python/bisect.html#bisect.insort_right", "desc": "类似于insort_left()，但在x的任何现有条目后在a中插入x" }, { "name": "bz2.open", "type": "bz2", "path": "python/bz2.html#bz2.open", "desc": "在二进制或文本模式下打开bzip2压缩文件，返回file object" }, { "name": "bz2.compress", "type": "bz2", "path": "python/bz2.html#bz2.compress", "desc": "压缩数据" }, { "name": "bz2.decompress", "type": "bz2", "path": "python/bz2.html#bz2.decompress", "desc": "解压缩数据" }, { "name": "calendar.setfirstweekday", "type": "calendar", "path": "python/calendar.html#calendar.setfirstweekday", "desc": "设置每周开始的工作日（0是星期一，6是星期日）" }, { "name": "calendar.firstweekday", "type": "calendar", "path": "python/calendar.html#calendar.firstweekday", "desc": "返回为平日的当前设置，每个星期开始" }, { "name": "calendar.isleap", "type": "calendar", "path": "python/calendar.html#calendar.isleap", "desc": "如果年是闰年，则返回True，否则False" }, { "name": "calendar.leapdays", "type": "calendar", "path": "python/calendar.html#calendar.leapdays", "desc": "返回闰年的数目范围内从y1到y2 （专用）， y1和y2是几年" }, { "name": "calendar.weekday", "type": "calendar", "path": "python/calendar.html#calendar.weekday", "desc": "返回年（1970 -" }, { "name": "calendar.weekheader", "type": "calendar", "path": "python/calendar.html#calendar.weekheader", "desc": "返回包含缩写的星期几名称的标头" }, { "name": "calendar.monthrange", "type": "calendar", "path": "python/calendar.html#calendar.monthrange", "desc": "返回月份，为指定的年、月中的工作日的天数，每月的第一天" }, { "name": "calendar.monthcalendar", "type": "calendar", "path": "python/calendar.html#calendar.monthcalendar", "desc": "返回一个矩阵，代表一个月的日历" }, { "name": "calendar.prmonth", "type": "calendar", "path": "python/calendar.html#calendar.prmonth", "desc": "打印由month()返回的一个月的日历" }, { "name": "calendar.month", "type": "calendar", "path": "python/calendar.html#calendar.month", "desc": "使用TextCalendar类的formatmonth()返回多行字符串中的一个月的日历" }, { "name": "calendar.prcal", "type": "calendar", "path": "python/calendar.html#calendar.prcal", "desc": "打印由calendar()返回的整年的日历" }, { "name": "calendar.calendar", "type": "calendar", "path": "python/calendar.html#calendar.calendar", "desc": "使用TextCalendar类的formatyear()）作为多行字符串返回整年的3列日历" }, { "name": "calendar.timegm", "type": "calendar", "path": "python/calendar.html#calendar.timegm", "desc": "一个不相关但方便的函数，它需要一个时间元组，例如由time模块中的gmtime()函数返回，并返回相应的Unix时间戳值， 1970，和POSIX编码" }, { "name": "calendar.day_name", "type": "calendar", "path": "python/calendar.html#calendar.day_name", "desc": "一个数组，表示当前的区域设置中的星期数" }, { "name": "calendar.day_abbr", "type": "calendar", "path": "python/calendar.html#calendar.day_abbr", "desc": "一个数组，表示当前的区域设置中的缩写的星期数" }, { "name": "calendar.month_name", "type": "calendar", "path": "python/calendar.html#calendar.month_name", "desc": "一个数组，表示今年的几个月中的当前区域设置" }, { "name": "calendar.month_abbr", "type": "calendar", "path": "python/calendar.html#calendar.month_abbr", "desc": "一个数组，表示今年的缩写个月中的当前区域设置" }, { "name": "cgi.parse", "type": "cgi", "path": "python/cgi.html#cgi.parse", "desc": "在环境或文件中解析查询（文件默认为sys" }, { "name": "cgi.parse_qs", "type": "cgi", "path": "python/cgi.html#cgi.parse_qs", "desc": "此模块中已弃用此函数" }, { "name": "cgi.parse_qsl", "type": "cgi", "path": "python/cgi.html#cgi.parse_qsl", "desc": "此模块中已弃用此函数" }, { "name": "cgi.parse_multipart", "type": "cgi", "path": "python/cgi.html#cgi.parse_multipart", "desc": "解析类型multipart / form-data的输入（用于文件上传）" }, { "name": "cgi.parse_header", "type": "cgi", "path": "python/cgi.html#cgi.parse_header", "desc": "将MIME标头（例如Content-Type）解析为主值和参数字典" }, { "name": "cgi.test", "type": "cgi", "path": "python/cgi.html#cgi.test", "desc": "稳健的测试CGI脚本，可用作主程序" }, { "name": "cgi.print_environ", "type": "cgi", "path": "python/cgi.html#cgi.print_environ", "desc": "在HTML中格式化shell环境" }, { "name": "cgi.print_form", "type": "cgi", "path": "python/cgi.html#cgi.print_form", "desc": "在HTML中格式化表单" }, { "name": "cgi.print_directory", "type": "cgi", "path": "python/cgi.html#cgi.print_directory", "desc": "使用HTML格式化当前目录" }, { "name": "cgi.print_environ_usage", "type": "cgi", "path": "python/cgi.html#cgi.print_environ_usage", "desc": "在HTML中打印有用（由CGI使用）环境变量的列表" }, { "name": "cgi.escape", "type": "cgi", "path": "python/cgi.html#cgi.escape", "desc": "将字符串s中的字符'&'，'<'和'>'如果您需要显示可能在HTML中包含此类字符的文本，请使用此选项" }, { "name": "cgitb.enable", "type": "cgitb", "path": "python/cgitb.html#cgitb.enable", "desc": "此函数使cgitb模块通过设置sys" }, { "name": "cgitb.handler", "type": "cgitb", "path": "python/cgitb.html#cgitb.handler", "desc": "此函数使用默认设置处理异常 （也即是，在浏览器中显示错误小心但不记录到一个文件中小心）" }, { "name": "cmath.phase", "type": "cmath", "path": "python/cmath.html#cmath.phase", "desc": "返回阶段的x （也被称为参数的x），作为一个浮点数" }, { "name": "cmath.polar", "type": "cmath", "path": "python/cmath.html#cmath.polar", "desc": "返回在极坐标系中的x表示" }, { "name": "cmath.rect", "type": "cmath", "path": "python/cmath.html#cmath.rect", "desc": "返回复数x用极坐标r和phi" }, { "name": "cmath.exp", "type": "cmath", "path": "python/cmath.html#cmath.exp", "desc": "返回指数值e**x" }, { "name": "cmath.log", "type": "cmath", "path": "python/cmath.html#cmath.log", "desc": "返回给定基的x的对数" }, { "name": "cmath.log10", "type": "cmath", "path": "python/cmath.html#cmath.log10", "desc": "返回x的对数" }, { "name": "cmath.sqrt", "type": "cmath", "path": "python/cmath.html#cmath.sqrt", "desc": "返回x的平方根" }, { "name": "cmath.acos", "type": "cmath", "path": "python/cmath.html#cmath.acos", "desc": "返回x的反余弦" }, { "name": "cmath.asin", "type": "cmath", "path": "python/cmath.html#cmath.asin", "desc": "返回x的反正弦值" }, { "name": "cmath.atan", "type": "cmath", "path": "python/cmath.html#cmath.atan", "desc": "返回x的反正切值" }, { "name": "cmath.cos", "type": "cmath", "path": "python/cmath.html#cmath.cos", "desc": "返回x的余弦值" }, { "name": "cmath.sin", "type": "cmath", "path": "python/cmath.html#cmath.sin", "desc": "返回x的正弦值" }, { "name": "cmath.tan", "type": "cmath", "path": "python/cmath.html#cmath.tan", "desc": "返回x的正切值" }, { "name": "cmath.acosh", "type": "cmath", "path": "python/cmath.html#cmath.acosh", "desc": "返回x的反双曲余弦值" }, { "name": "cmath.asinh", "type": "cmath", "path": "python/cmath.html#cmath.asinh", "desc": "返回x的反双曲正弦值" }, { "name": "cmath.atanh", "type": "cmath", "path": "python/cmath.html#cmath.atanh", "desc": "返回x的反双曲正切值" }, { "name": "cmath.cosh", "type": "cmath", "path": "python/cmath.html#cmath.cosh", "desc": "返回x的双曲余弦值" }, { "name": "cmath.sinh", "type": "cmath", "path": "python/cmath.html#cmath.sinh", "desc": "返回x的双曲正弦值" }, { "name": "cmath.tanh", "type": "cmath", "path": "python/cmath.html#cmath.tanh", "desc": "返回x的双曲正切值" }, { "name": "cmath.isfinite", "type": "cmath", "path": "python/cmath.html#cmath.isfinite", "desc": "如果x的实部和虚部都是有限的，则返回True，否则返回False" }, { "name": "cmath.isinf", "type": "cmath", "path": "python/cmath.html#cmath.isinf", "desc": "如果x的实部或虚部是无穷大，而False则返回True" }, { "name": "cmath.isnan", "type": "cmath", "path": "python/cmath.html#cmath.isnan", "desc": "如果x的实部或虚部是NaN，而False则返回True" }, { "name": "cmath.isclose", "type": "cmath", "path": "python/cmath.html#cmath.isclose", "desc": "如果a和b的值彼此接近，而False则返回True" }, { "name": "cmath.pi", "type": "cmath", "path": "python/cmath.html#cmath.pi", "desc": "数学常量π，作为一个浮点数" }, { "name": "cmath.e", "type": "cmath", "path": "python/cmath.html#cmath.e", "desc": "数学常数e，作为一个浮点数" }, { "name": "code.interact", "type": "code", "path": "python/code.html#code.interact", "desc": "便利功能运行读取 - 打印回路" }, { "name": "code.compile_command", "type": "code", "path": "python/code.html#code.compile_command", "desc": "这个函数对于想要模拟Python的解释器主循环（a" }, { "name": "codecs.encode", "type": "codecs", "path": "python/codecs.html#codecs.encode", "desc": "使用为编码注册的编解码器编码obj" }, { "name": "codecs.decode", "type": "codecs", "path": "python/codecs.html#codecs.decode", "desc": "使用为编码注册的编解码器解码obj" }, { "name": "codecs.lookup", "type": "codecs", "path": "python/codecs.html#codecs.lookup", "desc": "在Python编解码器注册表中查找编解码器信息，并返回如下定义的CodecInfo对象" }, { "name": "codecs.getencoder", "type": "codecs", "path": "python/codecs.html#codecs.getencoder", "desc": "查找给定编码的编解码器并返回其编码器功能" }, { "name": "codecs.getdecoder", "type": "codecs", "path": "python/codecs.html#codecs.getdecoder", "desc": "查找给定编码的编解码器并返回其解码器功能" }, { "name": "codecs.getincrementalencoder", "type": "codecs", "path": "python/codecs.html#codecs.getincrementalencoder", "desc": "查找给定编码的编解码器并返回其增量编码器类或工厂功能" }, { "name": "codecs.getincrementaldecoder", "type": "codecs", "path": "python/codecs.html#codecs.getincrementaldecoder", "desc": "查找给定编码的编解码器并返回其增量解码器类或工厂功能" }, { "name": "codecs.getreader", "type": "codecs", "path": "python/codecs.html#codecs.getreader", "desc": "查找给定编码的编解码器并返回它的StreamReader类或工厂函数" }, { "name": "codecs.getwriter", "type": "codecs", "path": "python/codecs.html#codecs.getwriter", "desc": "查找给定编码的编解码器并返回它的StreamWriter类或工厂函数" }, { "name": "codecs.register", "type": "codecs", "path": "python/codecs.html#codecs.register", "desc": "注册编解码器搜索功能" }, { "name": "codecs.open", "type": "codecs", "path": "python/codecs.html#codecs.open", "desc": "使用给定的模式打开编码文件并返回StreamReaderWriter的实例，从而提供透明的编码/解码" }, { "name": "codecs.EncodedFile", "type": "codecs", "path": "python/codecs.html#codecs.EncodedFile", "desc": "返回一个StreamRecoder实例，它提供了透明代码转换的文件的包装版本" }, { "name": "codecs.iterencode", "type": "codecs", "path": "python/codecs.html#codecs.iterencode", "desc": "使用增量编码器迭代编码迭代器提供的输入" }, { "name": "codecs.iterdecode", "type": "codecs", "path": "python/codecs.html#codecs.iterdecode", "desc": "使用增量式解码器迭代解码迭代器提供的输入" }, { "name": "codecs.register_error", "type": "codecs", "path": "python/codecs.html#codecs.register_error", "desc": "在名称name下注册错误处理函数error_handler" }, { "name": "codecs.lookup_error", "type": "codecs", "path": "python/codecs.html#codecs.lookup_error", "desc": "返回之前在名称name下注册的错误处理程序" }, { "name": "codecs.strict_errors", "type": "codecs", "path": "python/codecs.html#codecs.strict_errors", "desc": "实现'strict'错误处理：每个编码或解码错误都会引发一个UnicodeError" }, { "name": "codecs.replace_errors", "type": "codecs", "path": "python/codecs.html#codecs.replace_errors", "desc": "实现'replace'错误处理（仅用于text encodings）：替换'?' for encoding errors (to be encoded by the codec), and '\\ufffd' (the Unicode replacement character) for decoding errors" }, { "name": "codecs.ignore_errors", "type": "codecs", "path": "python/codecs.html#codecs.ignore_errors", "desc": "实现'ignore'错误处理：忽略格式错误的数据，继续编码或解码，恕不另行通知" }, { "name": "codecs.xmlcharrefreplace_errors", "type": "codecs", "path": "python/codecs.html#codecs.xmlcharrefreplace_errors", "desc": "实现'xmlcharrefreplace'错误处理（仅适用于使用text encodings编码）：将不可编码字符替换为适当的XML字符引用" }, { "name": "codecs.backslashreplace_errors", "type": "codecs", "path": "python/codecs.html#codecs.backslashreplace_errors", "desc": "实现'backslashreplace'错误处理（仅适用于text encodings）：格式错误的数据被替换为反斜杠转义序列" }, { "name": "codecs.namereplace_errors", "type": "codecs", "path": "python/codecs.html#codecs.namereplace_errors", "desc": "实现'namereplace'错误处理（仅适用于使用text encodings编码）：不可编码字符被替换为\\N{" }, { "name": "encodings.idna.nameprep", "type": "codecs", "path": "python/codecs.html#encodings.idna.nameprep", "desc": "返回标签的名称准备版本" }, { "name": "encodings.idna.ToASCII", "type": "codecs", "path": "python/codecs.html#encodings.idna.ToASCII", "desc": "按照 RFC 3490的规定将标签转换为ASCII" }, { "name": "encodings.idna.ToUnicode", "type": "codecs", "path": "python/codecs.html#encodings.idna.ToUnicode", "desc": "按照 RFC 3490的规定将标签转换为Unicode" }, { "name": "codecs.BOM", "type": "codecs", "path": "python/codecs.html#codecs.BOM", "desc": "这些常量定义了各种字节序列，即多个编码的Unicode字节顺序标记（BOM）" }, { "name": "codeop.compile_command", "type": "codeop", "path": "python/codeop.html#codeop.compile_command", "desc": "尝试编译源，它应是一个Python代码字符串，并且如果source是有效的Python代码，则返回一个代码对象" }, { "name": "collections.namedtuple", "type": "collections", "path": "python/collections.html#collections.namedtuple", "desc": "返回一个叫做typename的新的元组子类" }, { "name": "colorsys.rgb_to_yiq", "type": "colorsys", "path": "python/colorsys.html#colorsys.rgb_to_yiq", "desc": "将颜色从RGB坐标转换为YIQ坐标" }, { "name": "colorsys.yiq_to_rgb", "type": "colorsys", "path": "python/colorsys.html#colorsys.yiq_to_rgb", "desc": "将颜色从YIQ坐标转换为RGB坐标" }, { "name": "colorsys.rgb_to_hls", "type": "colorsys", "path": "python/colorsys.html#colorsys.rgb_to_hls", "desc": "将颜色从RGB坐标转换为HLS坐标" }, { "name": "colorsys.hls_to_rgb", "type": "colorsys", "path": "python/colorsys.html#colorsys.hls_to_rgb", "desc": "将颜色从HLS坐标转换为RGB坐标" }, { "name": "colorsys.rgb_to_hsv", "type": "colorsys", "path": "python/colorsys.html#colorsys.rgb_to_hsv", "desc": "将颜色从RGB坐标转换为HSV坐标" }, { "name": "colorsys.hsv_to_rgb", "type": "colorsys", "path": "python/colorsys.html#colorsys.hsv_to_rgb", "desc": "将颜色从HSV坐标转换为RGB坐标" }, { "name": "compileall.compile_dir", "type": "compileall", "path": "python/compileall.html#compileall.compile_dir", "desc": "递归地下降由dir命名的目录树，编译所有" }, { "name": "compileall.compile_file", "type": "compileall", "path": "python/compileall.html#compileall.compile_file", "desc": "使用路径fullname编译文件" }, { "name": "compileall.compile_path", "type": "compileall", "path": "python/compileall.html#compileall.compile_path", "desc": "字节编译沿sys" }, { "name": "concurrent.futures.wait", "type": "concurrent.futures", "path": "python/concurrent.futures.html#concurrent.futures.wait", "desc": "等待由fs给出的Future实例（可能由不同的Executor实例创建）完成" }, { "name": "concurrent.futures.as_completed", "type": "concurrent.futures", "path": "python/concurrent.futures.html#concurrent.futures.as_completed", "desc": "在多个Future实例（可能由不同的Executor实例创建）上的迭代器（iterator）将会被返回，这些Future实例由fs完成（结束或者被停止）时产生（译者注：fs可以是隐含有一系列Future实例以及其他普通值的组合，返回的迭代器迭代的是那些Future实例，不包含普通的值）" }, { "name": "configparser.MAX_INTERPOLATION_DEPTH", "type": "configparser", "path": "python/configparser.html#configparser.MAX_INTERPOLATION_DEPTH", "desc": "当raw参数为false时，get()的递归插值的最大深度" }, { "name": "False", "type": "constants", "path": "python/constants.html#False", "desc": "bool类型的假值" }, { "name": "True", "type": "constants", "path": "python/constants.html#True", "desc": "bool类型的真值" }, { "name": "None", "type": "constants", "path": "python/constants.html#None", "desc": "NoneType 类型的唯一值" }, { "name": "NotImplemented", "type": "constants", "path": "python/constants.html#NotImplemented", "desc": "应该由特殊的二元方法返回的特殊值（例如__eq__(), __lt__(), __add__(), __rsub__()等）以指示没有相对于另一类型实现所述操作；可以通过就地二进制特殊方法（例如，__imul__()，__iand__()等）为同一目的" }, { "name": "Ellipsis", "type": "constants", "path": "python/constants.html#Ellipsis", "desc": "与" }, { "name": "__debug__", "type": "constants", "path": "python/constants.html#__debug__", "desc": "如果Python未使用-O选项启动，则此常数为true" }, { "name": "quit", "type": "constants", "path": "python/constants.html#quit", "desc": "打印时打印对象，打印一条消息，如“退出()”或Ctrl-D（即“EOF）退出，并且在调用时，使用指定的退出代码提升SystemExit" }, { "name": "copyright", "type": "constants", "path": "python/constants.html#copyright", "desc": "当打印这些对象时，打印一条类似“Type license() to see the full license text”的信息，当调用它们时，则以分页的方式（一次一个屏幕）显示相应的文本" }, { "name": "contextlib.contextmanager", "type": "contextlib", "path": "python/contextlib.html#contextlib.contextmanager", "desc": "这个函数是一个装饰器，它可以用来一个工厂函数用于with语句上下文管理器，而不需要创建一个类或单独的__enter__()和__exit__()方法" }, { "name": "contextlib.closing", "type": "contextlib", "path": "python/contextlib.html#contextlib.closing", "desc": "返回一个上下文管理器，在块完成后关闭事" }, { "name": "contextlib.suppress", "type": "contextlib", "path": "python/contextlib.html#contextlib.suppress", "desc": "返回上下文管理器，如果它们出现在with语句的主体中，则禁止任何指定的异常，然后使用with语句结束后的第一个语句恢复执行" }, { "name": "contextlib.redirect_stdout", "type": "contextlib", "path": "python/contextlib.html#contextlib.redirect_stdout", "desc": "上下文管理器用于将sys" }, { "name": "contextlib.redirect_stderr", "type": "contextlib", "path": "python/contextlib.html#contextlib.redirect_stderr", "desc": "与redirect_stdout()类似，但将sys" }, { "name": "copy.copy", "type": "copy", "path": "python/copy.html#copy.copy", "desc": "返回x的浅拷贝" }, { "name": "copy.deepcopy", "type": "copy", "path": "python/copy.html#copy.deepcopy", "desc": "返回x的深度副本" }, { "name": "copyreg.constructor", "type": "copyreg", "path": "python/copyreg.html#copyreg.constructor", "desc": "将对象声明为有效的构造函数" }, { "name": "copyreg.pickle", "type": "copyreg", "path": "python/copyreg.html#copyreg.pickle", "desc": "声明函数应用作类型类型的对象的“缩减”函数" }, { "name": "crypt.crypt", "type": "crypt", "path": "python/crypt.html#crypt.crypt", "desc": "字通常是在提示或图形界面中输入的用户密码" }, { "name": "crypt.mksalt", "type": "crypt", "path": "python/crypt.html#crypt.mksalt", "desc": "返回指定方法的随机生成的盐" }, { "name": "crypt.METHOD_SHA512", "type": "crypt", "path": "python/crypt.html#crypt.METHOD_SHA512", "desc": "一个16字符盐和86字符散列的模块化地址格式方法" }, { "name": "crypt.METHOD_SHA256", "type": "crypt", "path": "python/crypt.html#crypt.METHOD_SHA256", "desc": "另一个模块化地址格式方法，具有16个字符的盐和43个字符的哈希" }, { "name": "crypt.METHOD_MD5", "type": "crypt", "path": "python/crypt.html#crypt.METHOD_MD5", "desc": "另一个模块化地址格式方法，具有8个字符的盐和22个字符的哈希" }, { "name": "crypt.METHOD_CRYPT", "type": "crypt", "path": "python/crypt.html#crypt.METHOD_CRYPT", "desc": "传统方法使用2个字符的盐和13个字符的哈希" }, { "name": "csv.reader", "type": "csv", "path": "python/csv.html#csv.reader", "desc": "返回一个读取器对象，它将在给定的csvfile中迭代" }, { "name": "csv.writer", "type": "csv", "path": "python/csv.html#csv.writer", "desc": "返回一个writer对象，负责将用户的数据转换为给定类文件对象上的分隔字符串" }, { "name": "csv.register_dialect", "type": "csv", "path": "python/csv.html#csv.register_dialect", "desc": "将方言与名称相关联" }, { "name": "csv.unregister_dialect", "type": "csv", "path": "python/csv.html#csv.unregister_dialect", "desc": "从方言注册表中删除与名称关联的方言" }, { "name": "csv.get_dialect", "type": "csv", "path": "python/csv.html#csv.get_dialect", "desc": "返回与名称关联的方言" }, { "name": "csv.list_dialects", "type": "csv", "path": "python/csv.html#csv.list_dialects", "desc": "返回所有注册方言的名称" }, { "name": "csv.field_size_limit", "type": "csv", "path": "python/csv.html#csv.field_size_limit", "desc": "返回解析器允许的当前最大字段大小" }, { "name": "csv.QUOTE_ALL", "type": "csv", "path": "python/csv.html#csv.QUOTE_ALL", "desc": "指示writer对象引用所有字段" }, { "name": "csv.QUOTE_MINIMAL", "type": "csv", "path": "python/csv.html#csv.QUOTE_MINIMAL", "desc": "指示writer对象仅引用包含特殊字符（如分隔符，quotechar或lineterminator t5>" }, { "name": "csv.QUOTE_NONNUMERIC", "type": "csv", "path": "python/csv.html#csv.QUOTE_NONNUMERIC", "desc": "指示writer对象引用所有非数字字段" }, { "name": "csv.QUOTE_NONE", "type": "csv", "path": "python/csv.html#csv.QUOTE_NONE", "desc": "指示writer对象从不引用字段" }, { "name": "ctypes.CFUNCTYPE", "type": "ctypes", "path": "python/ctypes.html#ctypes.CFUNCTYPE", "desc": "返回的函数原型创建使用标准C调用约定的函数" }, { "name": "ctypes.WINFUNCTYPE", "type": "ctypes", "path": "python/ctypes.html#ctypes.WINFUNCTYPE", "desc": "仅Windows：返回的函数原型创建使用stdcall调用约定的函数，除了在Windows CE上，WINFUNCTYPE()与CFUNCTYPE()该功能将在通话过程中释放GIL" }, { "name": "ctypes.PYFUNCTYPE", "type": "ctypes", "path": "python/ctypes.html#ctypes.PYFUNCTYPE", "desc": "返回的函数原型创建使用Python调用约定的函数" }, { "name": "ctypes.addressof", "type": "ctypes", "path": "python/ctypes.html#ctypes.addressof", "desc": "以整数形式返回内存缓冲区的地址" }, { "name": "ctypes.alignment", "type": "ctypes", "path": "python/ctypes.html#ctypes.alignment", "desc": "返回ctypes类型的对齐要求" }, { "name": "ctypes.byref", "type": "ctypes", "path": "python/ctypes.html#ctypes.byref", "desc": "返回指向obj的轻量级指针，该指针必须是ctypes类型的实例" }, { "name": "ctypes.cast", "type": "ctypes", "path": "python/ctypes.html#ctypes.cast", "desc": "该函数与C中的cast操作符类似" }, { "name": "ctypes.create_string_buffer", "type": "ctypes", "path": "python/ctypes.html#ctypes.create_string_buffer", "desc": "这个函数创建一个可变的字符缓冲区" }, { "name": "ctypes.create_unicode_buffer", "type": "ctypes", "path": "python/ctypes.html#ctypes.create_unicode_buffer", "desc": "这个函数创建一个可变的unicode字符缓冲区" }, { "name": "ctypes.DllCanUnloadNow", "type": "ctypes", "path": "python/ctypes.html#ctypes.DllCanUnloadNow", "desc": "仅Windows：这个函数是一个钩子，它允许实现具有ctypes的进程内COM服务器" }, { "name": "ctypes.DllGetClassObject", "type": "ctypes", "path": "python/ctypes.html#ctypes.DllGetClassObject", "desc": "仅Windows：这个函数是一个钩子，它允许实现具有ctypes的进程内COM服务器" }, { "name": "ctypes.util.find_library", "type": "ctypes", "path": "python/ctypes.html#ctypes.util.find_library", "desc": "尝试找到一个库并返回一个路径名" }, { "name": "ctypes.util.find_msvcrt", "type": "ctypes", "path": "python/ctypes.html#ctypes.util.find_msvcrt", "desc": "仅Windows：返回Python使用的VC运行时库的文件名，以及扩展模块" }, { "name": "ctypes.FormatError", "type": "ctypes", "path": "python/ctypes.html#ctypes.FormatError", "desc": "仅限Windows：返回错误代码代码的文本描述" }, { "name": "ctypes.GetLastError", "type": "ctypes", "path": "python/ctypes.html#ctypes.GetLastError", "desc": "仅Windows：返回调用线程中由Windows设置的最后一个错误代码" }, { "name": "ctypes.memmove", "type": "ctypes", "path": "python/ctypes.html#ctypes.memmove", "desc": "与标准C memmove库函数相同：将count个字节从src复制到dst" }, { "name": "ctypes.memset", "type": "ctypes", "path": "python/ctypes.html#ctypes.memset", "desc": "与标准C memset库函数相同：使用值c的count字节填充地址dst处的存储器块" }, { "name": "ctypes.POINTER", "type": "ctypes", "path": "python/ctypes.html#ctypes.POINTER", "desc": "这个工厂函数创建并返回一个新的ctypes指针类型" }, { "name": "ctypes.pointer", "type": "ctypes", "path": "python/ctypes.html#ctypes.pointer", "desc": "这个函数创建一个新的指针实例，指向obj" }, { "name": "ctypes.resize", "type": "ctypes", "path": "python/ctypes.html#ctypes.resize", "desc": "此函数调整obj的内部缓冲区，该缓冲区必须是ctypes类型的实例" }, { "name": "ctypes.sizeof", "type": "ctypes", "path": "python/ctypes.html#ctypes.sizeof", "desc": "返回ctypes类型或实例内存缓冲区的大小（以字节为单位）" }, { "name": "ctypes.string_at", "type": "ctypes", "path": "python/ctypes.html#ctypes.string_at", "desc": "此函数返回从内存地址address开始的C字符串作为字节对象" }, { "name": "ctypes.WinError", "type": "ctypes", "path": "python/ctypes.html#ctypes.WinError", "desc": "仅Windows：这个函数可能是ctypes中命名最差的东西" }, { "name": "ctypes.wstring_at", "type": "ctypes", "path": "python/ctypes.html#ctypes.wstring_at", "desc": "该函数以字符串的形式返回从内存地址地址开始的宽字符串" }, { "name": "curses.ascii.isalnum", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isalnum", "desc": "检查ASCII字母数字字符；它等同于isalpha（c） 或 isdigit（c）" }, { "name": "curses.ascii.isalpha", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isalpha", "desc": "检查ASCII字母字符；它等于isupper（c） 或 islower（c）" }, { "name": "curses.ascii.isascii", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isascii", "desc": "检查符合7位ASCII集的字符值" }, { "name": "curses.ascii.isblank", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isblank", "desc": "检查ASCII空格字符；空间或水平制表符" }, { "name": "curses.ascii.iscntrl", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.iscntrl", "desc": "检查ASCII控制字符（范围为0x00到0x1f或0x7f）" }, { "name": "curses.ascii.isdigit", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isdigit", "desc": "检查ASCII十进制数字，'0'到'9'" }, { "name": "curses.ascii.isgraph", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isgraph", "desc": "检查ASCII任何可打印字符（空格除外）" }, { "name": "curses.ascii.islower", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.islower", "desc": "检查ASCII小写字符" }, { "name": "curses.ascii.isprint", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isprint", "desc": "检查任何ASCII可打印字符（包括空格）" }, { "name": "curses.ascii.ispunct", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.ispunct", "desc": "检查任何可打印的ASCII字符，它不是空格或字母数字字符" }, { "name": "curses.ascii.isspace", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isspace", "desc": "检查ASCII空格字符；空格，换行，回车，换页，水平制表，垂直制表" }, { "name": "curses.ascii.isupper", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isupper", "desc": "检查ASCII大写字母" }, { "name": "curses.ascii.isxdigit", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isxdigit", "desc": "检查ASCII十六进制数字" }, { "name": "curses.ascii.isctrl", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.isctrl", "desc": "检查ASCII控制字符（序数值0到31）" }, { "name": "curses.ascii.ismeta", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.ismeta", "desc": "检查非ASCII字符（序数值为0x80及以上）" }, { "name": "curses.ascii.ascii", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.ascii", "desc": "返回对应于c的低7位的ASCII值" }, { "name": "curses.ascii.ctrl", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.ctrl", "desc": "返回与给定字符相对应的控制字符（字符位值按位和0x1f）" }, { "name": "curses.ascii.alt", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.alt", "desc": "返回与给定ASCII字符相对应的8位字符（字符位值以0x80为单位）" }, { "name": "curses.ascii.unctrl", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.unctrl", "desc": "返回ASCII字符c的字符串表示形式" }, { "name": "curses.ascii.controlnames", "type": "curses.ascii", "path": "python/curses.ascii.html#curses.ascii.controlnames", "desc": "一个33个元素的字符串数组，包含从0（NUL）到0x1f（US）的32个ASCII控制字符的ASCII助记符，加上空格字符的助记符SP" }, { "name": "curses.baudrate", "type": "curses", "path": "python/curses.html#curses.baudrate", "desc": "以每秒位数返回终端的输出速度" }, { "name": "curses.beep", "type": "curses", "path": "python/curses.html#curses.beep", "desc": "发出短注意的声音" }, { "name": "curses.can_change_color", "type": "curses", "path": "python/curses.html#curses.can_change_color", "desc": "返回 True 或者 False, 具体取决于是否程序员可以更改显示的颜色由终端" }, { "name": "curses.cbreak", "type": "curses", "path": "python/curses.html#curses.cbreak", "desc": "进入 cbreak 模式" }, { "name": "curses.color_content", "type": "curses", "path": "python/curses.html#curses.color_content", "desc": "返回一组红绿蓝RGB的颜色强度分量color_number,其值要介于 0 和 COLORS" }, { "name": "curses.color_pair", "type": "curses", "path": "python/curses.html#curses.color_pair", "desc": "返回在指定的颜色显示文本的属性值" }, { "name": "curses.curs_set", "type": "curses", "path": "python/curses.html#curses.curs_set", "desc": "设置光标的状态" }, { "name": "curses.def_prog_mode", "type": "curses", "path": "python/curses.html#curses.def_prog_mode", "desc": "作为&quot;程序&quot;模式，模式正在运行的程序使用curss时保存当前的终端模式" }, { "name": "curses.def_shell_mode", "type": "curses", "path": "python/curses.html#curses.def_shell_mode", "desc": "作为&quot;shell&quot;模式，模式正在运行的程序不使用curses时保存当前的终端模式" }, { "name": "curses.delay_output", "type": "curses", "path": "python/curses.html#curses.delay_output", "desc": "插入一个 ms 毫秒的暂停再输出上" }, { "name": "curses.doupdate", "type": "curses", "path": "python/curses.html#curses.doupdate", "desc": "更新物理屏幕" }, { "name": "curses.echo", "type": "curses", "path": "python/curses.html#curses.echo", "desc": "进入echo模型" }, { "name": "curses.endwin", "type": "curses", "path": "python/curses.html#curses.endwin", "desc": "取消初始化库，和终端回到正常状态" }, { "name": "curses.erasechar", "type": "curses", "path": "python/curses.html#curses.erasechar", "desc": "返回用户当前的擦除字符" }, { "name": "curses.filter", "type": "curses", "path": "python/curses.html#curses.filter", "desc": "必须在调用initscr()之前调用filter()例程（如果使用）" }, { "name": "curses.flash", "type": "curses", "path": "python/curses.html#curses.flash", "desc": "闪烁屏幕" }, { "name": "curses.flushinp", "type": "curses", "path": "python/curses.html#curses.flushinp", "desc": "刷新所有输入缓冲区" }, { "name": "curses.getmouse", "type": "curses", "path": "python/curses.html#curses.getmouse", "desc": "After getch() returns KEY_MOUSE to signal a mouse event, this method should be call to retrieve the queued mouse event, represented as a 5-tuple (id, x, y, z, bstate)" }, { "name": "curses.getsyx", "type": "curses", "path": "python/curses.html#curses.getsyx", "desc": "返回y和x中虚拟屏幕光标的当前坐标" }, { "name": "curses.getwin", "type": "curses", "path": "python/curses.html#curses.getwin", "desc": "通过前面的putwin()调用读取存储在文件中的窗口相关数据" }, { "name": "curses.has_colors", "type": "curses", "path": "python/curses.html#curses.has_colors", "desc": "如果终端可以显示颜色，则返回True；否则，返回False" }, { "name": "curses.has_ic", "type": "curses", "path": "python/curses.html#curses.has_ic", "desc": "如果终端具有插入和删除字符功能，则返回True" }, { "name": "curses.has_il", "type": "curses", "path": "python/curses.html#curses.has_il", "desc": "如果终端具有插入和删除行功能，或者可以使用滚动区域模拟它们，则返回True" }, { "name": "curses.has_key", "type": "curses", "path": "python/curses.html#curses.has_key", "desc": "如果当前终端类型识别出具有该值的关键字，则获取关键值ch，并返回True" }, { "name": "curses.halfdelay", "type": "curses", "path": "python/curses.html#curses.halfdelay", "desc": "用于半延时模式，类似于Cbreak模式，因为用户键入的字符可立即用于程序" }, { "name": "curses.init_color", "type": "curses", "path": "python/curses.html#curses.init_color", "desc": "改变颜色的定义，取出要改变的颜色的数字，后面跟着三个RGB值（红色，绿色和蓝色成分的数量）" }, { "name": "curses.init_pair", "type": "curses", "path": "python/curses.html#curses.init_pair", "desc": "更改颜色对的定义" }, { "name": "curses.initscr", "type": "curses", "path": "python/curses.html#curses.initscr", "desc": "初始化库" }, { "name": "curses.is_term_resized", "type": "curses", "path": "python/curses.html#curses.is_term_resized", "desc": "如果resize_term()会修改窗口结构，则返回True否则返回False" }, { "name": "curses.isendwin", "type": "curses", "path": "python/curses.html#curses.isendwin", "desc": "如果调用了endwin()（即，curses库已被初始化），则返回True" }, { "name": "curses.keyname", "type": "curses", "path": "python/curses.html#curses.keyname", "desc": "返回编号为k的密钥的名称" }, { "name": "curses.killchar", "type": "curses", "path": "python/curses.html#curses.killchar", "desc": "返回用户的当前行杀死字符" }, { "name": "curses.longname", "type": "curses", "path": "python/curses.html#curses.longname", "desc": "返回一个字符串，其中包含描述当前终端的terminfo长名称字段" }, { "name": "curses.meta", "type": "curses", "path": "python/curses.html#curses.meta", "desc": "如果是是1，则允许输入8位字符" }, { "name": "curses.mouseinterval", "type": "curses", "path": "python/curses.html#curses.mouseinterval", "desc": "设置按下和释放事件之间可以经过的最大时间（以毫秒为单位），以便将它们识别为点击，并返回上一个间隔值" }, { "name": "curses.mousemask", "type": "curses", "path": "python/curses.html#curses.mousemask", "desc": "设置要报告的鼠标事件，并返回一个元组（availmask， oldmask）" }, { "name": "curses.napms", "type": "curses", "path": "python/curses.html#curses.napms", "desc": "Sleep for ms milliseconds" }, { "name": "curses.newpad", "type": "curses", "path": "python/curses.html#curses.newpad", "desc": "创建并返回指向具有给定行数和列数的新Pad数据结构的指针" }, { "name": "curses.newwin", "type": "curses", "path": "python/curses.html#curses.newwin", "desc": "返回一个新的窗口，其左上角位于（begin_y， begin_x），其高度/宽度为nlines < / T3> /  NCOLS  T4>" }, { "name": "curses.nl", "type": "curses", "path": "python/curses.html#curses.nl", "desc": "进入换行模式" }, { "name": "curses.nocbreak", "type": "curses", "path": "python/curses.html#curses.nocbreak", "desc": "离开cbreak模式" }, { "name": "curses.noecho", "type": "curses", "path": "python/curses.html#curses.noecho", "desc": "留下回声模式" }, { "name": "curses.nonl", "type": "curses", "path": "python/curses.html#curses.nonl", "desc": "离开换行模式" }, { "name": "curses.noqiflush", "type": "curses", "path": "python/curses.html#curses.noqiflush", "desc": "当使用noqiflush()例程时，与INTR，QUIT和SUSP字符关联的输入和输出队列的正常刷新将不会完成" }, { "name": "curses.noraw", "type": "curses", "path": "python/curses.html#curses.noraw", "desc": "保持原始模式" }, { "name": "curses.pair_content", "type": "curses", "path": "python/curses.html#curses.pair_content", "desc": "返回包含请求颜色对的颜色的元组（fg， bg）" }, { "name": "curses.pair_number", "type": "curses", "path": "python/curses.html#curses.pair_number", "desc": "返回由属性值attr设置的颜色对的编号" }, { "name": "curses.putp", "type": "curses", "path": "python/curses.html#curses.putp", "desc": "Equivalent to tputs(str, 1, putchar); emit the value of a specified terminfo capability for the current terminal" }, { "name": "curses.qiflush", "type": "curses", "path": "python/curses.html#curses.qiflush", "desc": "如果flag为False，则效果与调用noqiflush()相同" }, { "name": "curses.raw", "type": "curses", "path": "python/curses.html#curses.raw", "desc": "进入原始模式" }, { "name": "curses.reset_prog_mode", "type": "curses", "path": "python/curses.html#curses.reset_prog_mode", "desc": "如之前由def_prog_mode()保存，将终端恢复到“编程”模式" }, { "name": "curses.reset_shell_mode", "type": "curses", "path": "python/curses.html#curses.reset_shell_mode", "desc": "如以前由def_shell_mode()保存的，将终端恢复到“shell”模式" }, { "name": "curses.resetty", "type": "curses", "path": "python/curses.html#curses.resetty", "desc": "将终端模式的状态恢复到最后一次调用savetty()时的状态" }, { "name": "curses.resize_term", "type": "curses", "path": "python/curses.html#curses.resize_term", "desc": "Backend function used by resizeterm(), performing most of the work; when resizing the windows, resize_term() blank-fills the areas that are extended" }, { "name": "curses.resizeterm", "type": "curses", "path": "python/curses.html#curses.resizeterm", "desc": "将标准窗口和当前窗口调整为指定尺寸，并调整由记录窗口尺寸的curses库（特别是SIGWINCH处理程序）使用的其他簿记数据" }, { "name": "curses.savetty", "type": "curses", "path": "python/curses.html#curses.savetty", "desc": "将终端模式的当前状态保存在缓冲区中，可由resetty()使用" }, { "name": "curses.setsyx", "type": "curses", "path": "python/curses.html#curses.setsyx", "desc": "将虚拟屏幕光标设置为y，x" }, { "name": "curses.setupterm", "type": "curses", "path": "python/curses.html#curses.setupterm", "desc": "初始化终端" }, { "name": "curses.start_color", "type": "curses", "path": "python/curses.html#curses.start_color", "desc": "如果程序员想要使用颜色，并且在任何其他颜色操作例程被调用之前必须被调用" }, { "name": "curses.termattrs", "type": "curses", "path": "python/curses.html#curses.termattrs", "desc": "返回终端支持的所有视频属性的逻辑OR" }, { "name": "curses.termname", "type": "curses", "path": "python/curses.html#curses.termname", "desc": "返回环境变量 TERM的值，截断为14个字符" }, { "name": "curses.tigetflag", "type": "curses", "path": "python/curses.html#curses.tigetflag", "desc": "返回与terminfo能力名称capname对应的布尔能力的值" }, { "name": "curses.tigetnum", "type": "curses", "path": "python/curses.html#curses.tigetnum", "desc": "返回与terminfo能力名称capname对应的数字能力的值" }, { "name": "curses.tigetstr", "type": "curses", "path": "python/curses.html#curses.tigetstr", "desc": "返回与terminfo能力名称capname对应的字符串能力的值" }, { "name": "curses.tparm", "type": "curses", "path": "python/curses.html#curses.tparm", "desc": "使用提供的参数实例化字符串str，其中str应该是从terminfo数据库获得的参数化字符串" }, { "name": "curses.typeahead", "type": "curses", "path": "python/curses.html#curses.typeahead", "desc": "指定文件描述符fd用于键入检查" }, { "name": "curses.unctrl", "type": "curses", "path": "python/curses.html#curses.unctrl", "desc": "返回一个字符串，它是字符ch的可打印表示" }, { "name": "curses.ungetch", "type": "curses", "path": "python/curses.html#curses.ungetch", "desc": "按ch，下一个getch()将返回它" }, { "name": "curses.update_lines_cols", "type": "curses", "path": "python/curses.html#curses.update_lines_cols", "desc": "更新 LINES和 COLS" }, { "name": "curses.unget_wch", "type": "curses", "path": "python/curses.html#curses.unget_wch", "desc": "按ch，下一个get_wch()将返回它" }, { "name": "curses.ungetmouse", "type": "curses", "path": "python/curses.html#curses.ungetmouse", "desc": "将KEY_MOUSE事件推入输入队列，将给定的状态数据与它关联" }, { "name": "curses.use_env", "type": "curses", "path": "python/curses.html#curses.use_env", "desc": "如果使用，应该在调用initscr()或newterm之前调用此函数" }, { "name": "curses.use_default_colors", "type": "curses", "path": "python/curses.html#curses.use_default_colors", "desc": "允许在支持此功能的终端上使用颜色的默认值" }, { "name": "curses.wrapper", "type": "curses", "path": "python/curses.html#curses.wrapper", "desc": "初始化curses并调用另一个可调用的对象，func，它应该是您的curses使用应用程序的其余部分" }, { "name": "curses.textpad.rectangle", "type": "curses", "path": "python/curses.html#curses.textpad.rectangle", "desc": "绘制一个矩形" }, { "name": "curses.ERR", "type": "curses", "path": "python/curses.html#curses.ERR", "desc": "某些返回整数的curses例程（如getch()）会在失败时返回ERR" }, { "name": "curses.OK", "type": "curses", "path": "python/curses.html#curses.OK", "desc": "某些返回整数的curses例程（如napms()）会在成功时返回OK" }, { "name": "curses.version", "type": "curses", "path": "python/curses.html#curses.version", "desc": "代表模块当前版本的字符串" }, { "name": "curses.panel.bottom_panel", "type": "curses.panel", "path": "python/curses.panel.html#curses.panel.bottom_panel", "desc": "返回面板集中的底部面板" }, { "name": "curses.panel.new_panel", "type": "curses.panel", "path": "python/curses.panel.html#curses.panel.new_panel", "desc": "返回面板对象，将其与给定窗口win关联" }, { "name": "curses.panel.top_panel", "type": "curses.panel", "path": "python/curses.panel.html#curses.panel.top_panel", "desc": "返回面板集中的顶部面板" }, { "name": "curses.panel.update_panels", "type": "curses.panel", "path": "python/curses.panel.html#curses.panel.update_panels", "desc": "在面板集中更改后更新虚拟屏幕" }, { "name": "datetime.MINYEAR", "type": "datetime", "path": "python/datetime.html#datetime.MINYEAR", "desc": "date和datetime对象中允许的最小年份" }, { "name": "datetime.MAXYEAR", "type": "datetime", "path": "python/datetime.html#datetime.MAXYEAR", "desc": "date和datetime对象中允许的最大年份数" }, { "name": "dbm.whichdb", "type": "dbm", "path": "python/dbm.html#dbm.whichdb", "desc": "此函数尝试猜测几个简单数据库模块中的哪一个可用 -  dbm" }, { "name": "dbm.open", "type": "dbm", "path": "python/dbm.html#dbm.open", "desc": "打开数据库文件文件并返回相应的对象" }, { "name": "dbm.gnu.open", "type": "dbm", "path": "python/dbm.html#dbm.gnu.open", "desc": "打开gdbm数据库并返回一个gdbm对象" }, { "name": "dbm.ndbm.open", "type": "dbm", "path": "python/dbm.html#dbm.ndbm.open", "desc": "打开dbm数据库并返回ndbm对象" }, { "name": "dbm.dumb.open", "type": "dbm", "path": "python/dbm.html#dbm.dumb.open", "desc": "打开dumbdbm数据库并返回dumbdbm对象" }, { "name": "dbm.ndbm.library", "type": "dbm", "path": "python/dbm.html#dbm.ndbm.library", "desc": "使用的ndbm实施库的名称" }, { "name": "decimal.getcontext", "type": "decimal", "path": "python/decimal.html#decimal.getcontext", "desc": "返回活动线程的当前上下文" }, { "name": "decimal.setcontext", "type": "decimal", "path": "python/decimal.html#decimal.setcontext", "desc": "将活动线程的当前上下文设置为c" }, { "name": "decimal.localcontext", "type": "decimal", "path": "python/decimal.html#decimal.localcontext", "desc": "返回一个上下文管理器，它将活动线程的当前上下文设置为ctx的副本，并在退出with-statement时恢复前一个上下文" }, { "name": "decimal.HAVE_THREADS", "type": "decimal", "path": "python/decimal.html#decimal.HAVE_THREADS", "desc": "默认值是True" }, { "name": "decimal.ROUND_CEILING", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_CEILING", "desc": "向Infinity展开" }, { "name": "decimal.ROUND_DOWN", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_DOWN", "desc": "向零回合" }, { "name": "decimal.ROUND_FLOOR", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_FLOOR", "desc": "向-Infinity回合" }, { "name": "decimal.ROUND_HALF_DOWN", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_HALF_DOWN", "desc": "将关系向最接近零的方向调整" }, { "name": "decimal.ROUND_HALF_EVEN", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_HALF_EVEN", "desc": "以最接近的偶数整数将关系舍入到最近" }, { "name": "decimal.ROUND_HALF_UP", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_HALF_UP", "desc": "离领带最近的距离为零" }, { "name": "decimal.ROUND_UP", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_UP", "desc": "从零开始回合" }, { "name": "decimal.ROUND_05UP", "type": "decimal", "path": "python/decimal.html#decimal.ROUND_05UP", "desc": "如果舍入到零后的最后一位数字为0或5，则从零开始舍去；否则向零回合" }, { "name": "difflib.context_diff", "type": "difflib", "path": "python/difflib.html#difflib.context_diff", "desc": "比较a和b（字符串列表）；在上下文差异格式中返回Δ（生成Δ行的generator）" }, { "name": "difflib.get_close_matches", "type": "difflib", "path": "python/difflib.html#difflib.get_close_matches", "desc": "返回一个最佳的&quot;足够好&quot;匹配列表" }, { "name": "difflib.ndiff", "type": "difflib", "path": "python/difflib.html#difflib.ndiff", "desc": "比较（字符串列表）a和b；返回 Differ 风格的差异（一个生成差异行的 generator）" }, { "name": "difflib.restore", "type": "difflib", "path": "python/difflib.html#difflib.restore", "desc": "返回两个序列生成一个三角洲之一" }, { "name": "difflib.unified_diff", "type": "difflib", "path": "python/difflib.html#difflib.unified_diff", "desc": "比较a和b（字符串列表）；以统一差分格式返回增量（generator生成增量线）" }, { "name": "difflib.diff_bytes", "type": "difflib", "path": "python/difflib.html#difflib.diff_bytes", "desc": "使用dfunc比较a和b（字节对象列表）；以dfunc返回的格式生成一个delta行（也是字节）序列" }, { "name": "difflib.IS_LINE_JUNK", "type": "difflib", "path": "python/difflib.html#difflib.IS_LINE_JUNK", "desc": "返回 true 可忽略行" }, { "name": "difflib.IS_CHARACTER_JUNK", "type": "difflib", "path": "python/difflib.html#difflib.IS_CHARACTER_JUNK", "desc": "返回 true 可忽略的字符" }, { "name": "dis.code_info", "type": "dis", "path": "python/dis.html#dis.code_info", "desc": "返回带有提供的函数，生成器，方法，源代码字符串或代码对象的详细代码对象信息的格式化多行字符串" }, { "name": "dis.show_code", "type": "dis", "path": "python/dis.html#dis.show_code", "desc": "将文件（或sys" }, { "name": "dis.dis", "type": "dis", "path": "python/dis.html#dis.dis", "desc": "拆分x对象" }, { "name": "dis.distb", "type": "dis", "path": "python/dis.html#dis.distb", "desc": "如果没有通过，则使用最后一个traceback来反汇编回栈顶层函数" }, { "name": "dis.disassemble", "type": "dis", "path": "python/dis.html#dis.disassemble", "desc": "拆分代码对象，如果提供lasti，则指示最后一条指令" }, { "name": "dis.get_instructions", "type": "dis", "path": "python/dis.html#dis.get_instructions", "desc": "对提供的函数，方法，源代码字符串或代码对象中的指令返回一个迭代器" }, { "name": "dis.findlinestarts", "type": "dis", "path": "python/dis.html#dis.findlinestarts", "desc": "这个生成器函数使用代码对象代码的co_firstlineno和co_lnotab属性来找到源代码中行开头的偏移" }, { "name": "dis.findlabels", "type": "dis", "path": "python/dis.html#dis.findlabels", "desc": "检测作为跳转目标的代码对象代码中的所有偏移量，并返回这些偏移量的列表" }, { "name": "dis.stack_effect", "type": "dis", "path": "python/dis.html#dis.stack_effect", "desc": "计算opcode与参数oparg的堆栈效果" }, { "name": "dis.Bytecode.codeobj", "type": "dis", "path": "python/dis.html#dis.Bytecode.codeobj", "desc": "编译的代码对象" }, { "name": "dis.Bytecode.first_line", "type": "dis", "path": "python/dis.html#dis.Bytecode.first_line", "desc": "代码对象的第一个源代码行（如果可用）" }, { "name": "dis.Instruction.opcode", "type": "dis", "path": "python/dis.html#dis.Instruction.opcode", "desc": "操作的数字代码，对应于下面列出的操作码值和Opcode collections中的字节码值" }, { "name": "dis.Instruction.opname", "type": "dis", "path": "python/dis.html#dis.Instruction.opname", "desc": "操作的人类可读名称" }, { "name": "dis.Instruction.arg", "type": "dis", "path": "python/dis.html#dis.Instruction.arg", "desc": "操作的数字参数（如果有），否则为无" }, { "name": "dis.Instruction.argval", "type": "dis", "path": "python/dis.html#dis.Instruction.argval", "desc": "解析的arg值（如果已知），否则与arg相同" }, { "name": "dis.Instruction.argrepr", "type": "dis", "path": "python/dis.html#dis.Instruction.argrepr", "desc": "操作参数的可读描述" }, { "name": "dis.Instruction.offset", "type": "dis", "path": "python/dis.html#dis.Instruction.offset", "desc": "在字节码序列内的操作的开始索引" }, { "name": "dis.Instruction.starts_line", "type": "dis", "path": "python/dis.html#dis.Instruction.starts_line", "desc": "由此操作码开始的行（如果有），否则为无" }, { "name": "dis.Instruction.is_jump_target", "type": "dis", "path": "python/dis.html#dis.Instruction.is_jump_target", "desc": "True如果其他代码跳到此处，否则False" }, { "name": "dis.opname", "type": "dis", "path": "python/dis.html#dis.opname", "desc": "操作名称序列，使用字节码可索引" }, { "name": "dis.opmap", "type": "dis", "path": "python/dis.html#dis.opmap", "desc": "将操作名称映射到字节码的字典" }, { "name": "dis.cmp_op", "type": "dis", "path": "python/dis.html#dis.cmp_op", "desc": "所有比较操作名称的顺序" }, { "name": "dis.hasconst", "type": "dis", "path": "python/dis.html#dis.hasconst", "desc": "具有常量参数的字节码序列" }, { "name": "dis.hasfree", "type": "dis", "path": "python/dis.html#dis.hasfree", "desc": "访问自由变量的字节码序列（请注意，在本上下文中的“自由”是指内部作用域引用的当前作用域中的名称或从此作用域引用的外部作用域中的名称" }, { "name": "dis.hasname", "type": "dis", "path": "python/dis.html#dis.hasname", "desc": "按名称访问属性的字节码序列" }, { "name": "dis.hasjrel", "type": "dis", "path": "python/dis.html#dis.hasjrel", "desc": "具有相对跳转目标的字节码序列" }, { "name": "dis.hasjabs", "type": "dis", "path": "python/dis.html#dis.hasjabs", "desc": "具有绝对跳转目标的字节码序列" }, { "name": "dis.haslocal", "type": "dis", "path": "python/dis.html#dis.haslocal", "desc": "访问局部变量的字节码序列" }, { "name": "dis.hascompare", "type": "dis", "path": "python/dis.html#dis.hascompare", "desc": "布尔运算的字节码序列" }, { "name": "doctest.register_optionflag", "type": "doctest", "path": "python/doctest.html#doctest.register_optionflag", "desc": "用给定名称创建一个新选项标志，并返回新标志的整数值" }, { "name": "doctest.testfile", "type": "doctest", "path": "python/doctest.html#doctest.testfile", "desc": "除文件名以外的所有参数都是可选的，并应以关键字形式指定" }, { "name": "doctest.testmod", "type": "doctest", "path": "python/doctest.html#doctest.testmod", "desc": "所有参数都是可选的，除m以外的所有参数均应以关键字形式指定" }, { "name": "doctest.run_docstring_examples", "type": "doctest", "path": "python/doctest.html#doctest.run_docstring_examples", "desc": "与对象f关联的测试示例；例如，f可以是字符串，模块，函数或类对象" }, { "name": "doctest.DocFileSuite", "type": "doctest", "path": "python/doctest.html#doctest.DocFileSuite", "desc": "将doctest测试从一个或多个文本文件转换为unittest" }, { "name": "doctest.DocTestSuite", "type": "doctest", "path": "python/doctest.html#doctest.DocTestSuite", "desc": "将模块的doctest测试转换为unittest" }, { "name": "doctest.set_unittest_reportflags", "type": "doctest", "path": "python/doctest.html#doctest.set_unittest_reportflags", "desc": "设置要使用的doctest报告标志" }, { "name": "doctest.script_from_examples", "type": "doctest", "path": "python/doctest.html#doctest.script_from_examples", "desc": "将带有示例的文本转换为脚本" }, { "name": "doctest.testsource", "type": "doctest", "path": "python/doctest.html#doctest.testsource", "desc": "将对象的doctest转换为脚本" }, { "name": "doctest.debug", "type": "doctest", "path": "python/doctest.html#doctest.debug", "desc": "调试对象的doctests" }, { "name": "doctest.debug_src", "type": "doctest", "path": "python/doctest.html#doctest.debug_src", "desc": "用字符串调试doctests" }, { "name": "doctest.DONT_ACCEPT_TRUE_FOR_1", "type": "doctest", "path": "python/doctest.html#doctest.DONT_ACCEPT_TRUE_FOR_1", "desc": "默认情况下，如果期望的输出块仅包含1，则包含1或True的实际输出块被认为是匹配的，对于0与False类似" }, { "name": "doctest.DONT_ACCEPT_BLANKLINE", "type": "doctest", "path": "python/doctest.html#doctest.DONT_ACCEPT_BLANKLINE", "desc": "默认情况下，如果预期的输出块包含仅包含字符串<BLANKLINE>的行，那么该行将匹配实际输出中的空白行" }, { "name": "doctest.NORMALIZE_WHITESPACE", "type": "doctest", "path": "python/doctest.html#doctest.NORMALIZE_WHITESPACE", "desc": "指定时，所有空白（空格和换行符）都被视为相等" }, { "name": "doctest.ELLIPSIS", "type": "doctest", "path": "python/doctest.html#doctest.ELLIPSIS", "desc": "指定时，预期输出中的省略号标记（" }, { "name": "doctest.IGNORE_EXCEPTION_DETAIL", "type": "doctest", "path": "python/doctest.html#doctest.IGNORE_EXCEPTION_DETAIL", "desc": "如果指定这个选项，那么当引发的异常的类型与期望的异常类型相同就可以通过的，不会检测异常的详细信息" }, { "name": "doctest.SKIP", "type": "doctest", "path": "python/doctest.html#doctest.SKIP", "desc": "指定时，请不要运行该示例" }, { "name": "doctest.COMPARISON_FLAGS", "type": "doctest", "path": "python/doctest.html#doctest.COMPARISON_FLAGS", "desc": "将上面的所有比较标志掩盖起来" }, { "name": "doctest.REPORT_UDIFF", "type": "doctest", "path": "python/doctest.html#doctest.REPORT_UDIFF", "desc": "指定时，涉及多行预期和实际输出的故障将使用统一差异显示" }, { "name": "doctest.REPORT_CDIFF", "type": "doctest", "path": "python/doctest.html#doctest.REPORT_CDIFF", "desc": "指定时，涉及多行预期输出和实际输出的故障将使用上下文差异显示" }, { "name": "doctest.REPORT_NDIFF", "type": "doctest", "path": "python/doctest.html#doctest.REPORT_NDIFF", "desc": "When specified, differences are computed by difflib" }, { "name": "doctest.REPORT_ONLY_FIRST_FAILURE", "type": "doctest", "path": "python/doctest.html#doctest.REPORT_ONLY_FIRST_FAILURE", "desc": "指定时，显示每个doctest中的第一个失败示例，但禁止所有其他示例的输出" }, { "name": "doctest.FAIL_FAST", "type": "doctest", "path": "python/doctest.html#doctest.FAIL_FAST", "desc": "指定时，在第一个失败示例之后退出，不要尝试运行其余示例" }, { "name": "doctest.REPORTING_FLAGS", "type": "doctest", "path": "python/doctest.html#doctest.REPORTING_FLAGS", "desc": "将上面的所有报告标记掩盖起来" }, { "name": "ensurepip.version", "type": "ensurepip", "path": "python/ensurepip.html#ensurepip.version", "desc": "返回一个字符串，指定在引导环境时将安装的pip的捆绑版本" }, { "name": "ensurepip.bootstrap", "type": "ensurepip", "path": "python/ensurepip.html#ensurepip.bootstrap", "desc": "引导pip进入当前或指定的环境" }, { "name": "enum.unique", "type": "enum", "path": "python/enum.html#enum.unique", "desc": "枚举类装饰器，确保只有一个名称绑定到任何一个值" }, { "name": "errno.EPERM", "type": "errno", "path": "python/errno.html#errno.EPERM", "desc": "操作不允许" }, { "name": "errno.ENOENT", "type": "errno", "path": "python/errno.html#errno.ENOENT", "desc": "无此文件或目录" }, { "name": "errno.ESRCH", "type": "errno", "path": "python/errno.html#errno.ESRCH", "desc": "没有这样的过程" }, { "name": "errno.EINTR", "type": "errno", "path": "python/errno.html#errno.EINTR", "desc": "中断系统调用" }, { "name": "errno.EIO", "type": "errno", "path": "python/errno.html#errno.EIO", "desc": "I / O错误" }, { "name": "errno.ENXIO", "type": "errno", "path": "python/errno.html#errno.ENXIO", "desc": "没有这样的设备或地址" }, { "name": "errno.E2BIG", "type": "errno", "path": "python/errno.html#errno.E2BIG", "desc": "精选列表过长" }, { "name": "errno.ENOEXEC", "type": "errno", "path": "python/errno.html#errno.ENOEXEC", "desc": "Exec格式错误" }, { "name": "errno.EBADF", "type": "errno", "path": "python/errno.html#errno.EBADF", "desc": "错误的文件编号" }, { "name": "errno.ECHILD", "type": "errno", "path": "python/errno.html#errno.ECHILD", "desc": "没有子进程" }, { "name": "errno.EAGAIN", "type": "errno", "path": "python/errno.html#errno.EAGAIN", "desc": "再试一次" }, { "name": "errno.ENOMEM", "type": "errno", "path": "python/errno.html#errno.ENOMEM", "desc": "内存不足" }, { "name": "errno.EACCES", "type": "errno", "path": "python/errno.html#errno.EACCES", "desc": "没有权限" }, { "name": "errno.EFAULT", "type": "errno", "path": "python/errno.html#errno.EFAULT", "desc": "地址错误" }, { "name": "errno.ENOTBLK", "type": "errno", "path": "python/errno.html#errno.ENOTBLK", "desc": "需要块设备" }, { "name": "errno.EBUSY", "type": "errno", "path": "python/errno.html#errno.EBUSY", "desc": "设备或资源繁忙" }, { "name": "errno.EEXIST", "type": "errno", "path": "python/errno.html#errno.EEXIST", "desc": "文件已存在" }, { "name": "errno.EXDEV", "type": "errno", "path": "python/errno.html#errno.EXDEV", "desc": "跨设备链接" }, { "name": "errno.ENODEV", "type": "errno", "path": "python/errno.html#errno.ENODEV", "desc": "没有这样的设备" }, { "name": "errno.ENOTDIR", "type": "errno", "path": "python/errno.html#errno.ENOTDIR", "desc": "不是目录" }, { "name": "errno.EISDIR", "type": "errno", "path": "python/errno.html#errno.EISDIR", "desc": "是一个目录" }, { "name": "errno.EINVAL", "type": "errno", "path": "python/errno.html#errno.EINVAL", "desc": "无效的论点" }, { "name": "errno.ENFILE", "type": "errno", "path": "python/errno.html#errno.ENFILE", "desc": "文件表溢出" }, { "name": "errno.EMFILE", "type": "errno", "path": "python/errno.html#errno.EMFILE", "desc": "打开的文件太多" }, { "name": "errno.ENOTTY", "type": "errno", "path": "python/errno.html#errno.ENOTTY", "desc": "不是打字机" }, { "name": "errno.ETXTBSY", "type": "errno", "path": "python/errno.html#errno.ETXTBSY", "desc": "文本文件忙" }, { "name": "errno.EFBIG", "type": "errno", "path": "python/errno.html#errno.EFBIG", "desc": "文件过大" }, { "name": "errno.ENOSPC", "type": "errno", "path": "python/errno.html#errno.ENOSPC", "desc": "设备上没有剩余空间" }, { "name": "errno.ESPIPE", "type": "errno", "path": "python/errno.html#errno.ESPIPE", "desc": "非法寻求" }, { "name": "errno.EROFS", "type": "errno", "path": "python/errno.html#errno.EROFS", "desc": "只读文件系统" }, { "name": "errno.EMLINK", "type": "errno", "path": "python/errno.html#errno.EMLINK", "desc": "链接过多" }, { "name": "errno.EPIPE", "type": "errno", "path": "python/errno.html#errno.EPIPE", "desc": "破碎的管道" }, { "name": "errno.EDOM", "type": "errno", "path": "python/errno.html#errno.EDOM", "desc": "数学参数超出了func的域" }, { "name": "errno.ERANGE", "type": "errno", "path": "python/errno.html#errno.ERANGE", "desc": "数学结果不可表示" }, { "name": "errno.EDEADLK", "type": "errno", "path": "python/errno.html#errno.EDEADLK", "desc": "将发生资源死锁" }, { "name": "errno.ENAMETOOLONG", "type": "errno", "path": "python/errno.html#errno.ENAMETOOLONG", "desc": "文件名太长" }, { "name": "errno.ENOLCK", "type": "errno", "path": "python/errno.html#errno.ENOLCK", "desc": "没有可用的记录锁" }, { "name": "errno.ENOSYS", "type": "errno", "path": "python/errno.html#errno.ENOSYS", "desc": "功能未实现" }, { "name": "errno.ENOTEMPTY", "type": "errno", "path": "python/errno.html#errno.ENOTEMPTY", "desc": "目录不为空" }, { "name": "errno.ELOOP", "type": "errno", "path": "python/errno.html#errno.ELOOP", "desc": "遇到过多符号链接" }, { "name": "errno.EWOULDBLOCK", "type": "errno", "path": "python/errno.html#errno.EWOULDBLOCK", "desc": "操作会阻塞" }, { "name": "errno.ENOMSG", "type": "errno", "path": "python/errno.html#errno.ENOMSG", "desc": "没有所需类型的消息" }, { "name": "errno.EIDRM", "type": "errno", "path": "python/errno.html#errno.EIDRM", "desc": "标识符已删除" }, { "name": "errno.ECHRNG", "type": "errno", "path": "python/errno.html#errno.ECHRNG", "desc": "通道号超出范围" }, { "name": "errno.EL2NSYNC", "type": "errno", "path": "python/errno.html#errno.EL2NSYNC", "desc": "级别2不同步" }, { "name": "errno.EL3HLT", "type": "errno", "path": "python/errno.html#errno.EL3HLT", "desc": "3级暂停" }, { "name": "errno.EL3RST", "type": "errno", "path": "python/errno.html#errno.EL3RST", "desc": "3级复位" }, { "name": "errno.ELNRNG", "type": "errno", "path": "python/errno.html#errno.ELNRNG", "desc": "链接编号超出范围" }, { "name": "errno.EUNATCH", "type": "errno", "path": "python/errno.html#errno.EUNATCH", "desc": "未附加协议驱动程序" }, { "name": "errno.ENOCSI", "type": "errno", "path": "python/errno.html#errno.ENOCSI", "desc": "没有CSI结构可用" }, { "name": "errno.EL2HLT", "type": "errno", "path": "python/errno.html#errno.EL2HLT", "desc": "2级暂停" }, { "name": "errno.EBADE", "type": "errno", "path": "python/errno.html#errno.EBADE", "desc": "交换无效" }, { "name": "errno.EBADR", "type": "errno", "path": "python/errno.html#errno.EBADR", "desc": "请求描述器无效" }, { "name": "errno.EXFULL", "type": "errno", "path": "python/errno.html#errno.EXFULL", "desc": "充分交换" }, { "name": "errno.ENOANO", "type": "errno", "path": "python/errno.html#errno.ENOANO", "desc": "无阳极" }, { "name": "errno.EBADRQC", "type": "errno", "path": "python/errno.html#errno.EBADRQC", "desc": "请求代码无效" }, { "name": "errno.EBADSLT", "type": "errno", "path": "python/errno.html#errno.EBADSLT", "desc": "插槽无效" }, { "name": "errno.EDEADLOCK", "type": "errno", "path": "python/errno.html#errno.EDEADLOCK", "desc": "文件锁死锁错误" }, { "name": "errno.EBFONT", "type": "errno", "path": "python/errno.html#errno.EBFONT", "desc": "字体文件格式不正确" }, { "name": "errno.ENOSTR", "type": "errno", "path": "python/errno.html#errno.ENOSTR", "desc": "设备不是流" }, { "name": "errno.ENODATA", "type": "errno", "path": "python/errno.html#errno.ENODATA", "desc": "无可用数据" }, { "name": "errno.ETIME", "type": "errno", "path": "python/errno.html#errno.ETIME", "desc": "计时器已过期" }, { "name": "errno.ENOSR", "type": "errno", "path": "python/errno.html#errno.ENOSR", "desc": "流出资源" }, { "name": "errno.ENONET", "type": "errno", "path": "python/errno.html#errno.ENONET", "desc": "机器不在网络上" }, { "name": "errno.ENOPKG", "type": "errno", "path": "python/errno.html#errno.ENOPKG", "desc": "软件包未安装" }, { "name": "errno.EREMOTE", "type": "errno", "path": "python/errno.html#errno.EREMOTE", "desc": "对象是远程的" }, { "name": "errno.ENOLINK", "type": "errno", "path": "python/errno.html#errno.ENOLINK", "desc": "链接已断开" }, { "name": "errno.EADV", "type": "errno", "path": "python/errno.html#errno.EADV", "desc": "广告错误" }, { "name": "errno.ESRMNT", "type": "errno", "path": "python/errno.html#errno.ESRMNT", "desc": "Srmount错误" }, { "name": "errno.ECOMM", "type": "errno", "path": "python/errno.html#errno.ECOMM", "desc": "发送时发生通信错误" }, { "name": "errno.EPROTO", "type": "errno", "path": "python/errno.html#errno.EPROTO", "desc": "协议错误" }, { "name": "errno.EMULTIHOP", "type": "errno", "path": "python/errno.html#errno.EMULTIHOP", "desc": "多点尝试" }, { "name": "errno.EDOTDOT", "type": "errno", "path": "python/errno.html#errno.EDOTDOT", "desc": "RFS具体错误" }, { "name": "errno.EBADMSG", "type": "errno", "path": "python/errno.html#errno.EBADMSG", "desc": "不是数据消息" }, { "name": "errno.EOVERFLOW", "type": "errno", "path": "python/errno.html#errno.EOVERFLOW", "desc": "对于定义的数据类型，值太大" }, { "name": "errno.ENOTUNIQ", "type": "errno", "path": "python/errno.html#errno.ENOTUNIQ", "desc": "网络上的名称不唯一" }, { "name": "errno.EBADFD", "type": "errno", "path": "python/errno.html#errno.EBADFD", "desc": "文件描述器处于坏状态" }, { "name": "errno.EREMCHG", "type": "errno", "path": "python/errno.html#errno.EREMCHG", "desc": "远程地址已更改" }, { "name": "errno.ELIBACC", "type": "errno", "path": "python/errno.html#errno.ELIBACC", "desc": "无法访问所需的共享库" }, { "name": "errno.ELIBBAD", "type": "errno", "path": "python/errno.html#errno.ELIBBAD", "desc": "访问损坏的共享库" }, { "name": "errno.ELIBSCN", "type": "errno", "path": "python/errno.html#errno.ELIBSCN", "desc": "" }, { "name": "errno.ELIBMAX", "type": "errno", "path": "python/errno.html#errno.ELIBMAX", "desc": "正在尝试链接过多的共享库" }, { "name": "errno.ELIBEXEC", "type": "errno", "path": "python/errno.html#errno.ELIBEXEC", "desc": "无法直接执行共享库" }, { "name": "errno.EILSEQ", "type": "errno", "path": "python/errno.html#errno.EILSEQ", "desc": "非法字节序列" }, { "name": "errno.ERESTART", "type": "errno", "path": "python/errno.html#errno.ERESTART", "desc": "中断的系统调用应重新启动" }, { "name": "errno.ESTRPIPE", "type": "errno", "path": "python/errno.html#errno.ESTRPIPE", "desc": "流管道错误" }, { "name": "errno.EUSERS", "type": "errno", "path": "python/errno.html#errno.EUSERS", "desc": "用户过多" }, { "name": "errno.ENOTSOCK", "type": "errno", "path": "python/errno.html#errno.ENOTSOCK", "desc": "非套接字操作" }, { "name": "errno.EDESTADDRREQ", "type": "errno", "path": "python/errno.html#errno.EDESTADDRREQ", "desc": "需要目标地址" }, { "name": "errno.EMSGSIZE", "type": "errno", "path": "python/errno.html#errno.EMSGSIZE", "desc": "消息太长" }, { "name": "errno.EPROTOTYPE", "type": "errno", "path": "python/errno.html#errno.EPROTOTYPE", "desc": "协议错误类型的套接字" }, { "name": "errno.ENOPROTOOPT", "type": "errno", "path": "python/errno.html#errno.ENOPROTOOPT", "desc": "协议不可用" }, { "name": "errno.EPROTONOSUPPORT", "type": "errno", "path": "python/errno.html#errno.EPROTONOSUPPORT", "desc": "不支持协议" }, { "name": "errno.ESOCKTNOSUPPORT", "type": "errno", "path": "python/errno.html#errno.ESOCKTNOSUPPORT", "desc": "不支持套接字类型" }, { "name": "errno.EOPNOTSUPP", "type": "errno", "path": "python/errno.html#errno.EOPNOTSUPP", "desc": "传输端点上不支持操作" }, { "name": "errno.EPFNOSUPPORT", "type": "errno", "path": "python/errno.html#errno.EPFNOSUPPORT", "desc": "不支持协议系列" }, { "name": "errno.EAFNOSUPPORT", "type": "errno", "path": "python/errno.html#errno.EAFNOSUPPORT", "desc": "协议不支持的地址系列" }, { "name": "errno.EADDRINUSE", "type": "errno", "path": "python/errno.html#errno.EADDRINUSE", "desc": "地址已在使用中" }, { "name": "errno.EADDRNOTAVAIL", "type": "errno", "path": "python/errno.html#errno.EADDRNOTAVAIL", "desc": "无法分配请求的地址" }, { "name": "errno.ENETDOWN", "type": "errno", "path": "python/errno.html#errno.ENETDOWN", "desc": "网络已关闭" }, { "name": "errno.ENETUNREACH", "type": "errno", "path": "python/errno.html#errno.ENETUNREACH", "desc": "网络不可达" }, { "name": "errno.ENETRESET", "type": "errno", "path": "python/errno.html#errno.ENETRESET", "desc": "网络由于重置而断开连接" }, { "name": "errno.ECONNABORTED", "type": "errno", "path": "python/errno.html#errno.ECONNABORTED", "desc": "软件导致连接中止" }, { "name": "errno.ECONNRESET", "type": "errno", "path": "python/errno.html#errno.ECONNRESET", "desc": "连接由对等体复位" }, { "name": "errno.ENOBUFS", "type": "errno", "path": "python/errno.html#errno.ENOBUFS", "desc": "没有可用的缓冲区空间" }, { "name": "errno.EISCONN", "type": "errno", "path": "python/errno.html#errno.EISCONN", "desc": "传输端点已连接" }, { "name": "errno.ENOTCONN", "type": "errno", "path": "python/errno.html#errno.ENOTCONN", "desc": "传输端点未连接" }, { "name": "errno.ESHUTDOWN", "type": "errno", "path": "python/errno.html#errno.ESHUTDOWN", "desc": "传输终端关闭后无法发送" }, { "name": "errno.ETOOMANYREFS", "type": "errno", "path": "python/errno.html#errno.ETOOMANYREFS", "desc": "参数太多：无法拼接" }, { "name": "errno.ETIMEDOUT", "type": "errno", "path": "python/errno.html#errno.ETIMEDOUT", "desc": "连接超时" }, { "name": "errno.ECONNREFUSED", "type": "errno", "path": "python/errno.html#errno.ECONNREFUSED", "desc": "连接被拒绝" }, { "name": "errno.EHOSTDOWN", "type": "errno", "path": "python/errno.html#errno.EHOSTDOWN", "desc": "主机已关闭" }, { "name": "errno.EHOSTUNREACH", "type": "errno", "path": "python/errno.html#errno.EHOSTUNREACH", "desc": "没有到主机的路由" }, { "name": "errno.EALREADY", "type": "errno", "path": "python/errno.html#errno.EALREADY", "desc": "操作已在进行中" }, { "name": "errno.EINPROGRESS", "type": "errno", "path": "python/errno.html#errno.EINPROGRESS", "desc": "操作现在进行中" }, { "name": "errno.ESTALE", "type": "errno", "path": "python/errno.html#errno.ESTALE", "desc": "陈旧的NFS文件句柄" }, { "name": "errno.EUCLEAN", "type": "errno", "path": "python/errno.html#errno.EUCLEAN", "desc": "结构需要清洁" }, { "name": "errno.ENOTNAM", "type": "errno", "path": "python/errno.html#errno.ENOTNAM", "desc": "不是XENIX命名类型文件" }, { "name": "errno.ENAVAIL", "type": "errno", "path": "python/errno.html#errno.ENAVAIL", "desc": "没有XENIX信号量可用" }, { "name": "errno.EISNAM", "type": "errno", "path": "python/errno.html#errno.EISNAM", "desc": "是一个命名类型文件" }, { "name": "errno.EREMOTEIO", "type": "errno", "path": "python/errno.html#errno.EREMOTEIO", "desc": "远程I / O错误" }, { "name": "errno.EDQUOT", "type": "errno", "path": "python/errno.html#errno.EDQUOT", "desc": "超出配额" }, { "name": "faulthandler.dump_traceback", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.dump_traceback", "desc": "将所有线程的追踪转储到文件中" }, { "name": "faulthandler.enable", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.enable", "desc": "启用故障处理程序：安装SIGSEGV，SIGFPE，SIGABRT，SIGBUS和SIGILL如果all_threads为True，则为每个正在运行的线程产生追溯" }, { "name": "faulthandler.disable", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.disable", "desc": "禁用故障处理程序：卸载由enable()安装的信号处理程序" }, { "name": "faulthandler.is_enabled", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.is_enabled", "desc": "检查故障处理程序是否已启用" }, { "name": "faulthandler.dump_traceback_later", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.dump_traceback_later", "desc": "如果重复是True，则在超时超时秒或每个超时 " }, { "name": "faulthandler.cancel_dump_traceback_later", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.cancel_dump_traceback_later", "desc": "取消最后一次调用dump_traceback_later()" }, { "name": "faulthandler.register", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.register", "desc": "注册用户信号：为signum信号安装处理程序以转储所有线程或当前线程的跟踪（如果all_threads为False ，到文件" }, { "name": "faulthandler.unregister", "type": "faulthandler", "path": "python/faulthandler.html#faulthandler.unregister", "desc": "取消注册用户信号：卸载由register()安装的signum信号处理程序" }, { "name": "fcntl.fcntl", "type": "fcntl", "path": "python/fcntl.html#fcntl.fcntl", "desc": "在文件描述器fd上执行操作cmd（也接受提供fileno()方法的文件对象）" }, { "name": "fcntl.ioctl", "type": "fcntl", "path": "python/fcntl.html#fcntl.ioctl", "desc": "此函数与fcntl()函数相同，只是参数处理更复杂" }, { "name": "fcntl.flock", "type": "fcntl", "path": "python/fcntl.html#fcntl.flock", "desc": "在文件描述器fd上执行锁操作操作（也接受提供fileno()方法的文件对象）" }, { "name": "fcntl.lockf", "type": "fcntl", "path": "python/fcntl.html#fcntl.lockf", "desc": "这本质上是fcntl()锁定调用的包装" }, { "name": "filecmp.cmp", "type": "filecmp", "path": "python/filecmp.html#filecmp.cmp", "desc": "比较名为f1和f2的文件，如果它们相等则返回True，否则返回False" }, { "name": "filecmp.cmpfiles", "type": "filecmp", "path": "python/filecmp.html#filecmp.cmpfiles", "desc": "比较dir1和dir2两个目录中文件，文件的名字由common给出" }, { "name": "filecmp.clear_cache", "type": "filecmp", "path": "python/filecmp.html#filecmp.clear_cache", "desc": "清除filecmp缓存" }, { "name": "fileinput.input", "type": "fileinput", "path": "python/fileinput.html#fileinput.input", "desc": "创建FileInput类的实例" }, { "name": "fileinput.filename", "type": "fileinput", "path": "python/fileinput.html#fileinput.filename", "desc": "返回当前正在读取的文件的名称" }, { "name": "fileinput.fileno", "type": "fileinput", "path": "python/fileinput.html#fileinput.fileno", "desc": "为当前文件返回整数“file描述器”" }, { "name": "fileinput.lineno", "type": "fileinput", "path": "python/fileinput.html#fileinput.lineno", "desc": "返回刚刚读取的行的累积行号" }, { "name": "fileinput.filelineno", "type": "fileinput", "path": "python/fileinput.html#fileinput.filelineno", "desc": "返回当前文件中的行号" }, { "name": "fileinput.isfirstline", "type": "fileinput", "path": "python/fileinput.html#fileinput.isfirstline", "desc": "如果刚刚读取的行是其文件的第一行，则返回true，否则返回false" }, { "name": "fileinput.isstdin", "type": "fileinput", "path": "python/fileinput.html#fileinput.isstdin", "desc": "如果最后一行从sys" }, { "name": "fileinput.nextfile", "type": "fileinput", "path": "python/fileinput.html#fileinput.nextfile", "desc": "关闭当前文件，以便下一次迭代将从下一个文件读取第一行（如果有的话）；未从文件读取的行不会计入累积行计数" }, { "name": "fileinput.close", "type": "fileinput", "path": "python/fileinput.html#fileinput.close", "desc": "关闭序列" }, { "name": "fileinput.hook_compressed", "type": "fileinput", "path": "python/fileinput.html#fileinput.hook_compressed", "desc": "Transparently opens files compressed with gzip and bzip2 (recognized by the extensions '" }, { "name": "fileinput.hook_encoded", "type": "fileinput", "path": "python/fileinput.html#fileinput.hook_encoded", "desc": "返回使用open()打开每个文件的钩子，使用给定的编码读取文件" }, { "name": "fnmatch.fnmatch", "type": "fnmatch", "path": "python/fnmatch.html#fnmatch.fnmatch", "desc": "测试filename字符串是否匹配模式字符串，返回True或False" }, { "name": "fnmatch.fnmatchcase", "type": "fnmatch", "path": "python/fnmatch.html#fnmatch.fnmatchcase", "desc": "测试filename是否匹配模式，返回True或False；比较是区分大小写的" }, { "name": "fnmatch.filter", "type": "fnmatch", "path": "python/fnmatch.html#fnmatch.filter", "desc": "返回与模式匹配的名称列表的子集" }, { "name": "fnmatch.translate", "type": "fnmatch", "path": "python/fnmatch.html#fnmatch.translate", "desc": "返回转换为正则表达式的shell样式模式" }, { "name": "formatter.AS_IS", "type": "formatter", "path": "python/formatter.html#formatter.AS_IS", "desc": "可以在字体规范中使用的值传递给下面描述的push_font()方法，或作为任何其他push_property()方法的新值" }, { "name": "fpectl.turnon_sigfpe", "type": "fpectl", "path": "python/fpectl.html#fpectl.turnon_sigfpe", "desc": "打开SIGFPE的生成，并设置适当的信号处理程序" }, { "name": "fpectl.turnoff_sigfpe", "type": "fpectl", "path": "python/fpectl.html#fpectl.turnoff_sigfpe", "desc": "重置缺省处理浮点异常" }, { "name": "fractions.gcd", "type": "fractions", "path": "python/fractions.html#fractions.gcd", "desc": "返回整数a和b的最大公约数" }, { "name": "ftplib.all_errors", "type": "ftplib", "path": "python/ftplib.html#ftplib.all_errors", "desc": "FTP实例的方法可能由于FTP连接问题而引发的所有异常（作为元组）的集合（而不是调用者发出的编程错误）" }, { "name": "abs", "type": "functions", "path": "python/functions.html#abs", "desc": "返回一个数值的绝对值，参数可以是一个整数或浮点数" }, { "name": "all", "type": "functions", "path": "python/functions.html#all", "desc": "如果iterable中所有的元素都为True，或iterable为空（empty），返回True" }, { "name": "any", "type": "functions", "path": "python/functions.html#any", "desc": "如果iterable里任何一个元素为True，返回 True" }, { "name": "ascii", "type": "functions", "path": "python/functions.html#ascii", "desc": "类似repr()，返回一个字符串，包含可打印的对象，但通过 repr() 返回的字符串中非 ASCII 字符，使用 \\x，\\u 或者\\U 进行转义" }, { "name": "bin", "type": "functions", "path": "python/functions.html#bin", "desc": "将整数转换为二进制字符串" }, { "name": "callable", "type": "functions", "path": "python/functions.html#callable", "desc": "如果该 object是可调用的，返回 True ,否则返回 False " }, { "name": "classmethod", "type": "functions", "path": "python/functions.html#classmethod", "desc": "将 function 封装成类方法" }, { "name": "compile", "type": "functions", "path": "python/functions.html#compile", "desc": "将source编译成代码或AST对象" }, { "name": "delattr", "type": "functions", "path": "python/functions.html#delattr", "desc": "这是setattr()的相对值" }, { "name": "dir", "type": "functions", "path": "python/functions.html#dir", "desc": "不带参数时, 返回当前局部作用域中名称的列表" }, { "name": "divmod", "type": "functions", "path": "python/functions.html#divmod", "desc": "以两个（非复数）数字作为参数，并在使用整数除法时返回由它们的商和余数组成的一对数字" }, { "name": "enumerate", "type": "functions", "path": "python/functions.html#enumerate", "desc": "返回一个枚举对象" }, { "name": "eval", "type": "functions", "path": "python/functions.html#eval", "desc": "参数是一个字符串和可选的全局变量和局部变量" }, { "name": "exec", "type": "functions", "path": "python/functions.html#exec", "desc": "这个函数支持动态执行Python代码" }, { "name": "filter", "type": "functions", "path": "python/functions.html#filter", "desc": "用iterable中传入function后返回True的元素构造一个迭代器" }, { "name": "format", "type": "functions", "path": "python/functions.html#format", "desc": "将值转换为“格式化”表示，由format_spec控制" }, { "name": "getattr", "type": "functions", "path": "python/functions.html#getattr", "desc": "返回对象的命名属性的值" }, { "name": "globals", "type": "functions", "path": "python/functions.html#globals", "desc": "返回表示当前全局符号表的字典" }, { "name": "hasattr", "type": "functions", "path": "python/functions.html#hasattr", "desc": "参数是一个对象和一个字符串" }, { "name": "hash", "type": "functions", "path": "python/functions.html#hash", "desc": "注意" }, { "name": "help", "type": "functions", "path": "python/functions.html#help", "desc": "调用内置的帮助系统" }, { "name": "hex", "type": "functions", "path": "python/functions.html#hex", "desc": "将整数转换为以“0x”为前缀的小写十六进制字符串，例如：" }, { "name": "id", "type": "functions", "path": "python/functions.html#id", "desc": "返回一个对象的“身份”" }, { "name": "input", "type": "functions", "path": "python/functions.html#input", "desc": "如果存在提示符参数，则将其写入标准输出而不带结尾换行符" }, { "name": "isinstance", "type": "functions", "path": "python/functions.html#isinstance", "desc": "如果object是clsaainfo的一个实例（或者是classinfo的直接、间接或虚拟子类的实例），那么则返回true" }, { "name": "issubclass", "type": "functions", "path": "python/functions.html#issubclass", "desc": "如果 class 是classinfo的子类(直接、 间接或 虚拟) 则返回 true " }, { "name": "iter", "type": "functions", "path": "python/functions.html#iter", "desc": "返回一个迭代器对象" }, { "name": "len", "type": "functions", "path": "python/functions.html#len", "desc": "返回对象的长度（项目数量）" }, { "name": "locals", "type": "functions", "path": "python/functions.html#locals", "desc": "更新和返回表示当前局部符号表的字典" }, { "name": "map", "type": "functions", "path": "python/functions.html#map", "desc": "返回一个迭代器，对iterable的每个项应用function，并yield结果" }, { "name": "max", "type": "functions", "path": "python/functions.html#max", "desc": "返回iterable中的最大项或两个或更多个参数中最大的项" }, { "name": "min", "type": "functions", "path": "python/functions.html#min", "desc": "返回可迭代中的最小项或两个或更多个参数中的最小项" }, { "name": "next", "type": "functions", "path": "python/functions.html#next", "desc": "通过调用__next__()方法从迭代器中检索下一个项目" }, { "name": "oct", "type": "functions", "path": "python/functions.html#oct", "desc": "将整数转换为八进制字符串" }, { "name": "open", "type": "functions", "path": "python/functions.html#open", "desc": "打开 file 并返回一个相应的 文件对象" }, { "name": "pow", "type": "functions", "path": "python/functions.html#pow", "desc": "返回x的y次方; 如果提供z参数， 返回x 的y次方再除以z的余数 (计算效率比pow(x, y) % z更高)" }, { "name": "print", "type": "functions", "path": "python/functions.html#print", "desc": "将object打印到文本流file，由sep分隔，尾部接end" }, { "name": "repr", "type": "functions", "path": "python/functions.html#repr", "desc": "返回一个包含对象可打印表示的字符串" }, { "name": "reversed", "type": "functions", "path": "python/functions.html#reversed", "desc": "返回一个反向iterator" }, { "name": "round", "type": "functions", "path": "python/functions.html#round", "desc": "返回number舍入到小数点后ndigits位的浮点值" }, { "name": "setattr", "type": "functions", "path": "python/functions.html#setattr", "desc": "它与getattr()相对应" }, { "name": "sorted", "type": "functions", "path": "python/functions.html#sorted", "desc": "依据iterable中的元素返回一个新的排好序的列表" }, { "name": "staticmethod", "type": "functions", "path": "python/functions.html#staticmethod", "desc": "为函数返回一个静态方法" }, { "name": "sum", "type": "functions", "path": "python/functions.html#sum", "desc": "从左到右总计start和可迭代的项目并返回总数" }, { "name": "super", "type": "functions", "path": "python/functions.html#super", "desc": "返回一个代理对象，它委托方法给父类或者type的同级类" }, { "name": "vars", "type": "functions", "path": "python/functions.html#vars", "desc": "返回一个模块、字典、类、实例或者其它任何一个具有__dict__属性的对象的__dict__属性" }, { "name": "zip", "type": "functions", "path": "python/functions.html#zip", "desc": "创建一个迭代器，聚合来自每个迭代器的元素" }, { "name": "__import__", "type": "functions", "path": "python/functions.html#__import__", "desc": "注意" }, { "name": "functools.cmp_to_key", "type": "functools", "path": "python/functools.html#functools.cmp_to_key", "desc": "将旧风格的比较函数转换为key函数" }, { "name": "functools.lru_cache", "type": "functools", "path": "python/functools.html#functools.lru_cache", "desc": "装饰器用一个memoizing可调用函数来包装一个函数，它可以保存最近的maxsize个调用" }, { "name": "functools.total_ordering", "type": "functools", "path": "python/functools.html#functools.total_ordering", "desc": "给定一个定义了一个或多个富比较排序方法的类，该方法提供了一个类装饰器" }, { "name": "functools.partial", "type": "functools", "path": "python/functools.html#functools.partial", "desc": "返回一个新的partial对象，该对象在调用时的行为将类似采用位置参数args和关键字参数keywords对func的调用" }, { "name": "functools.reduce", "type": "functools", "path": "python/functools.html#functools.reduce", "desc": "将带有两个参数的 function 从左到右累积应用到 sequence 的元素中，以将该序列规约为单个值" }, { "name": "functools.singledispatch", "type": "functools", "path": "python/functools.html#functools.singledispatch", "desc": "将函数转换为single-dispatch generic function" }, { "name": "functools.update_wrapper", "type": "functools", "path": "python/functools.html#functools.update_wrapper", "desc": "更新一个 wrapper 函数让其更像一个 wrapped 函数" }, { "name": "functools.wraps", "type": "functools", "path": "python/functools.html#functools.wraps", "desc": "这是一个方便的函数，用于在定义包装器函数时调用update_wrapper()作为函数装饰器" }, { "name": "gc.enable", "type": "gc", "path": "python/gc.html#gc.enable", "desc": "启用自动垃圾容器" }, { "name": "gc.disable", "type": "gc", "path": "python/gc.html#gc.disable", "desc": "禁用自动垃圾容器" }, { "name": "gc.isenabled", "type": "gc", "path": "python/gc.html#gc.isenabled", "desc": "如果启用了自动容器，则返回true" }, { "name": "gc.collect", "type": "gc", "path": "python/gc.html#gc.collect", "desc": "没有参数，运行一个完整的容器" }, { "name": "gc.set_debug", "type": "gc", "path": "python/gc.html#gc.set_debug", "desc": "设置垃圾容器调试标志" }, { "name": "gc.get_debug", "type": "gc", "path": "python/gc.html#gc.get_debug", "desc": "返回当前设置的调试标志" }, { "name": "gc.get_objects", "type": "gc", "path": "python/gc.html#gc.get_objects", "desc": "返回收集器跟踪的所有对象的列表，不包括返回的列表" }, { "name": "gc.get_stats", "type": "gc", "path": "python/gc.html#gc.get_stats", "desc": "从解释器启动后，返回包含容器统计信息的三个每代字典的列表" }, { "name": "gc.set_threshold", "type": "gc", "path": "python/gc.html#gc.set_threshold", "desc": "设置垃圾容器阈值（容器频率）" }, { "name": "gc.get_count", "type": "gc", "path": "python/gc.html#gc.get_count", "desc": "将当前容器计数返回为（count0， count1， count2）的元组" }, { "name": "gc.get_threshold", "type": "gc", "path": "python/gc.html#gc.get_threshold", "desc": "将当前容器阈值作为（threshold0， threshold1， threshold2）的元组返回" }, { "name": "gc.get_referrers", "type": "gc", "path": "python/gc.html#gc.get_referrers", "desc": "返回直接引用任何obj的对象列表" }, { "name": "gc.get_referents", "type": "gc", "path": "python/gc.html#gc.get_referents", "desc": "返回由任何参数直接引用的对象列表" }, { "name": "gc.is_tracked", "type": "gc", "path": "python/gc.html#gc.is_tracked", "desc": "如果对象当前由垃圾收集器跟踪，则返回True，否则返回False" }, { "name": "gc.garbage", "type": "gc", "path": "python/gc.html#gc.garbage", "desc": "收集器发现无法访问但无法释放的对象列表（无法收集的对象）" }, { "name": "gc.callbacks", "type": "gc", "path": "python/gc.html#gc.callbacks", "desc": "将由容器之前和之后的垃圾收集器调用的回调列表" }, { "name": "gc.DEBUG_STATS", "type": "gc", "path": "python/gc.html#gc.DEBUG_STATS", "desc": "容器期间打印统计信息" }, { "name": "gc.DEBUG_COLLECTABLE", "type": "gc", "path": "python/gc.html#gc.DEBUG_COLLECTABLE", "desc": "打印有关可找到的可收集对象的信息" }, { "name": "gc.DEBUG_UNCOLLECTABLE", "type": "gc", "path": "python/gc.html#gc.DEBUG_UNCOLLECTABLE", "desc": "打印找到的不可收集对象的信息（收集器不能访问但不能释放的对象）" }, { "name": "gc.DEBUG_SAVEALL", "type": "gc", "path": "python/gc.html#gc.DEBUG_SAVEALL", "desc": "设置时，找到的所有无法访问的对象将被附加到垃圾，而不是被释放" }, { "name": "gc.DEBUG_LEAK", "type": "gc", "path": "python/gc.html#gc.DEBUG_LEAK", "desc": "收集器打印有关泄漏程序的信息（等于DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE |  DEBUG_SAVEALL）" }, { "name": "getopt.getopt", "type": "getopt", "path": "python/getopt.html#getopt.getopt", "desc": "解析命令行选项和参数列表" }, { "name": "getopt.gnu_getopt", "type": "getopt", "path": "python/getopt.html#getopt.gnu_getopt", "desc": "此函数的工作原理类似于getopt()，除了默认情况下使用GNU样式扫描模式" }, { "name": "getpass.getpass", "type": "getpass", "path": "python/getpass.html#getpass.getpass", "desc": "提示用户输入密码，而不回显" }, { "name": "getpass.getuser", "type": "getpass", "path": "python/getpass.html#getpass.getuser", "desc": "返回用户的“登录名”" }, { "name": "gettext.bindtextdomain", "type": "gettext", "path": "python/gettext.html#gettext.bindtextdomain", "desc": "将域绑定到语言环境目录localedir" }, { "name": "gettext.bind_textdomain_codeset", "type": "gettext", "path": "python/gettext.html#gettext.bind_textdomain_codeset", "desc": "将域绑定到代码集，更改由gettext()函数系列返回的字符串的编码" }, { "name": "gettext.textdomain", "type": "gettext", "path": "python/gettext.html#gettext.textdomain", "desc": "更改或查询当前全局域" }, { "name": "gettext.gettext", "type": "gettext", "path": "python/gettext.html#gettext.gettext", "desc": "根据当前的全局域，语言和区域设置目录返回消息的本地化转换" }, { "name": "gettext.lgettext", "type": "gettext", "path": "python/gettext.html#gettext.lgettext", "desc": "等同于gettext()，但是如果未使用bind_textdomain_codeset()显式设置其他编码，则会在首选系统编码中返回翻译" }, { "name": "gettext.dgettext", "type": "gettext", "path": "python/gettext.html#gettext.dgettext", "desc": "像gettext()，但查看指定的域中的消息" }, { "name": "gettext.ldgettext", "type": "gettext", "path": "python/gettext.html#gettext.ldgettext", "desc": "等同于dgettext()，但如果未使用bind_textdomain_codeset()显式设置其他编码，则会在首选系统编码中返回翻译" }, { "name": "gettext.ngettext", "type": "gettext", "path": "python/gettext.html#gettext.ngettext", "desc": "像gettext()，但是考虑复数形式" }, { "name": "gettext.lngettext", "type": "gettext", "path": "python/gettext.html#gettext.lngettext", "desc": "等同于ngettext()，但是如果未使用bind_textdomain_codeset()显式设置其他编码，则会在首选系统编码中返回翻译" }, { "name": "gettext.dngettext", "type": "gettext", "path": "python/gettext.html#gettext.dngettext", "desc": "像ngettext()，但查看指定的域中的消息" }, { "name": "gettext.ldngettext", "type": "gettext", "path": "python/gettext.html#gettext.ldngettext", "desc": "等同于dngettext()，但如果未使用bind_textdomain_codeset()显式设置其他编码，则会在首选系统编码中返回翻译" }, { "name": "gettext.find", "type": "gettext", "path": "python/gettext.html#gettext.find", "desc": "此函数实现标准的" }, { "name": "gettext.translation", "type": "gettext", "path": "python/gettext.html#gettext.translation", "desc": "返回基于域，localedir和语言的Translations实例，这些实例首先传递给find()获取关联的" }, { "name": "gettext.install", "type": "gettext", "path": "python/gettext.html#gettext.install", "desc": "This installs the function _() in Python’s builtins namespace, based on domain, localedir, and codeset which are passed to the function translation()" }, { "name": "glob.glob", "type": "glob", "path": "python/glob.html#glob.glob", "desc": "返回一个与pathname匹配的路径组成的list，该list可能为空" }, { "name": "glob.iglob", "type": "glob", "path": "python/glob.html#glob.iglob", "desc": "返回一个 iterator 迭代器，它产生与 glob() 相同的结果，但同时不会存储它们" }, { "name": "glob.escape", "type": "glob", "path": "python/glob.html#glob.escape", "desc": "转义所有的特殊字符（'？'，'*'和'[']）" }, { "name": "grp.getgrgid", "type": "grp", "path": "python/grp.html#grp.getgrgid", "desc": "返回给定数字组ID的组数据库条目" }, { "name": "grp.getgrnam", "type": "grp", "path": "python/grp.html#grp.getgrnam", "desc": "返回给定组名的组数据库条目" }, { "name": "grp.getgrall", "type": "grp", "path": "python/grp.html#grp.getgrall", "desc": "以任意顺序返回所有可用组条目的列表" }, { "name": "gzip.open", "type": "gzip", "path": "python/gzip.html#gzip.open", "desc": "在二进制或文本模式下打开gzip压缩文件，返回file object" }, { "name": "gzip.compress", "type": "gzip", "path": "python/gzip.html#gzip.compress", "desc": "压缩 data ，返回包含压缩数据的bytes 对象" }, { "name": "gzip.decompress", "type": "gzip", "path": "python/gzip.html#gzip.decompress", "desc": "解压缩 data ，返回包含未压缩数据的bytes 对象" }, { "name": "hashlib.new", "type": "hashlib", "path": "python/hashlib.html#hashlib.new", "desc": "是一个通用构造函数，它接受所需算法的字符串名称作为其第一个参数" }, { "name": "hashlib.pbkdf2_hmac", "type": "hashlib", "path": "python/hashlib.html#hashlib.pbkdf2_hmac", "desc": "该函数提供 PKCS #5 基于密码的密钥派生函数 2" }, { "name": "hashlib.algorithms_guaranteed", "type": "hashlib", "path": "python/hashlib.html#hashlib.algorithms_guaranteed", "desc": "包含保证在所有平台上此模块支持的哈希算法的名称的集合" }, { "name": "hashlib.algorithms_available", "type": "hashlib", "path": "python/hashlib.html#hashlib.algorithms_available", "desc": "一组包含在运行的Python解释器中可用的哈希算法的名称" }, { "name": "hashlib.hash.digest_size", "type": "hashlib", "path": "python/hashlib.html#hashlib.hash.digest_size", "desc": "以字节为单位的哈希结果的大小" }, { "name": "hashlib.hash.block_size", "type": "hashlib", "path": "python/hashlib.html#hashlib.hash.block_size", "desc": "以字节为单位的哈希算法的内部块的大小" }, { "name": "heapq.heappush", "type": "heapq", "path": "python/heapq.html#heapq.heappush", "desc": "将值item推到heap上，保持堆不变" }, { "name": "heapq.heappop", "type": "heapq", "path": "python/heapq.html#heapq.heappop", "desc": "从heap中弹出并返回最小的项，保持堆不变" }, { "name": "heapq.heappushpop", "type": "heapq", "path": "python/heapq.html#heapq.heappushpop", "desc": "在堆上按项，然后弹出并返回堆中的最小项" }, { "name": "heapq.heapify", "type": "heapq", "path": "python/heapq.html#heapq.heapify", "desc": "在线性时间内，将列表x放入堆中" }, { "name": "heapq.heapreplace", "type": "heapq", "path": "python/heapq.html#heapq.heapreplace", "desc": "从堆中弹出并返回最小的项，并推送新的项" }, { "name": "heapq.merge", "type": "heapq", "path": "python/heapq.html#heapq.merge", "desc": "将多个排序的输入合并到单个排序的输出（例如，合并来自多个日志文件的带时间戳的条目）" }, { "name": "heapq.nlargest", "type": "heapq", "path": "python/heapq.html#heapq.nlargest", "desc": "返回可迭代定义的数据集中n最大元素的列表" }, { "name": "heapq.nsmallest", "type": "heapq", "path": "python/heapq.html#heapq.nsmallest", "desc": "返回可迭代定义的数据集中n最小元素的列表" }, { "name": "hmac.new", "type": "hmac", "path": "python/hmac.html#hmac.new", "desc": "返回一个新的hmac对象" }, { "name": "hmac.compare_digest", "type": "hmac", "path": "python/hmac.html#hmac.compare_digest", "desc": "返回a == b" }, { "name": "html.entities.entitydefs", "type": "html.entities", "path": "python/html.entities.html#html.entities.entitydefs", "desc": "将XHTML 1" }, { "name": "html.entities.name2codepoint", "type": "html.entities", "path": "python/html.entities.html#html.entities.name2codepoint", "desc": "将HTML实体名称映射到Unicode代码点的字典" }, { "name": "html.entities.codepoint2name", "type": "html.entities", "path": "python/html.entities.html#html.entities.codepoint2name", "desc": "将Unicode代码点映射到HTML实体名称的字典" }, { "name": "html.escape", "type": "html", "path": "python/html.html#html.escape", "desc": "转换字符串s中的&、<和>字符为HTML安全的序列" }, { "name": "html.unescape", "type": "html", "path": "python/html.html#html.unescape", "desc": "转换字符串s中所有命名和数字字符引用（例如&gt;、&#62;、&x3e;）为对应的Unicode字符" }, { "name": "http.client.HTTP_PORT", "type": "http.client", "path": "python/http.client.html#http.client.HTTP_PORT", "desc": "HTTP协议的默认端口值（总为 80）" }, { "name": "http.client.HTTPS_PORT", "type": "http.client", "path": "python/http.client.html#http.client.HTTPS_PORT", "desc": "HTTPS协议的默认端口值（总为 443）" }, { "name": "http.client.responses", "type": "http.client", "path": "python/http.client.html#http.client.responses", "desc": "该字典类匹配HTTP1" }, { "name": "imaplib.Internaldate2tuple", "type": "imaplib", "path": "python/imaplib.html#imaplib.Internaldate2tuple", "desc": "解析IMAP4 INTERNALDATE字符串并返回相应的本地时间" }, { "name": "imaplib.Int2AP", "type": "imaplib", "path": "python/imaplib.html#imaplib.Int2AP", "desc": "使用集合[A " }, { "name": "imaplib.ParseFlags", "type": "imaplib", "path": "python/imaplib.html#imaplib.ParseFlags", "desc": "将IMAP4 FLAGS响应转换为单个标志的元组" }, { "name": "imaplib.Time2Internaldate", "type": "imaplib", "path": "python/imaplib.html#imaplib.Time2Internaldate", "desc": "将date_time转换为IMAP4 INTERNALDATE表示形式" }, { "name": "imghdr.what", "type": "imghdr", "path": "python/imghdr.html#imghdr.what", "desc": "测试由filename命名的文件中包含的图像数据，并返回描述图像类型的字符串" }, { "name": "imghdr.tests", "type": "imghdr", "path": "python/imghdr.html#imghdr.tests", "desc": "执行单独测试的函数列表" }, { "name": "imp.get_magic", "type": "imp", "path": "python/imp.html#imp.get_magic", "desc": "返回用于识别字节编译代码文件（" }, { "name": "imp.get_suffixes", "type": "imp", "path": "python/imp.html#imp.get_suffixes", "desc": "返回一个3元素元组的列表，每个元组描述特定类型的模块" }, { "name": "imp.find_module", "type": "imp", "path": "python/imp.html#imp.find_module", "desc": "尝试找到名称" }, { "name": "imp.load_module", "type": "imp", "path": "python/imp.html#imp.load_module", "desc": "加载以前由find_module()发现的模块（或通过其他方式进行的搜索，产生兼容的结果）" }, { "name": "imp.new_module", "type": "imp", "path": "python/imp.html#imp.new_module", "desc": "返回一个名为name的新模块对象" }, { "name": "imp.reload", "type": "imp", "path": "python/imp.html#imp.reload", "desc": "重新载入先前导入的模块" }, { "name": "imp.cache_from_source", "type": "imp", "path": "python/imp.html#imp.cache_from_source", "desc": "将 PEP 3147路径返回到与源路径相关联的字节编译文件" }, { "name": "imp.source_from_cache", "type": "imp", "path": "python/imp.html#imp.source_from_cache", "desc": "给定路径到 PEP 3147文件名，返回关联的源代码文件路径" }, { "name": "imp.get_tag", "type": "imp", "path": "python/imp.html#imp.get_tag", "desc": "返回与get_magic()返回的Python的幻数的版本匹配的 PEP 3147魔术标记字符串" }, { "name": "imp.lock_held", "type": "imp", "path": "python/imp.html#imp.lock_held", "desc": "如果全局导入锁定当前持有，则返回True，否则False" }, { "name": "imp.acquire_lock", "type": "imp", "path": "python/imp.html#imp.acquire_lock", "desc": "获取当前线程的解释器的全局导入锁" }, { "name": "imp.release_lock", "type": "imp", "path": "python/imp.html#imp.release_lock", "desc": "释放解释器的全局导入锁定" }, { "name": "imp.PY_SOURCE", "type": "imp", "path": "python/imp.html#imp.PY_SOURCE", "desc": "找到该模块作为源文件" }, { "name": "imp.PY_COMPILED", "type": "imp", "path": "python/imp.html#imp.PY_COMPILED", "desc": "该模块被找到为编译代码对象文件" }, { "name": "imp.C_EXTENSION", "type": "imp", "path": "python/imp.html#imp.C_EXTENSION", "desc": "该模块被找到为可动态加载的共享库" }, { "name": "imp.PKG_DIRECTORY", "type": "imp", "path": "python/imp.html#imp.PKG_DIRECTORY", "desc": "该模块被找到作为包目录" }, { "name": "imp.C_BUILTIN", "type": "imp", "path": "python/imp.html#imp.C_BUILTIN", "desc": "该模块被找到作为内建模块" }, { "name": "imp.PY_FROZEN", "type": "imp", "path": "python/imp.html#imp.PY_FROZEN", "desc": "该模块被发现为冻结模块" }, { "name": "importlib.__import__", "type": "importlib", "path": "python/importlib.html#importlib.__import__", "desc": "内置__import__()函数的实现" }, { "name": "importlib.import_module", "type": "importlib", "path": "python/importlib.html#importlib.import_module", "desc": "导入一个模块" }, { "name": "importlib.find_loader", "type": "importlib", "path": "python/importlib.html#importlib.find_loader", "desc": "查找模块的加载程序，可选地在指定的路径中" }, { "name": "importlib.invalidate_caches", "type": "importlib", "path": "python/importlib.html#importlib.invalidate_caches", "desc": "使存储在sys" }, { "name": "importlib.reload", "type": "importlib", "path": "python/importlib.html#importlib.reload", "desc": "重新载入先前导入的 module" }, { "name": "importlib.machinery.all_suffixes", "type": "importlib", "path": "python/importlib.html#importlib.machinery.all_suffixes", "desc": "返回表示由标准导入机制识别的模块的所有文件后缀的字符串组合列表" }, { "name": "importlib.util.cache_from_source", "type": "importlib", "path": "python/importlib.html#importlib.util.cache_from_source", "desc": "Return the PEP 3147/PEP 488 path to the byte-compiled file associated with the source path" }, { "name": "importlib.util.source_from_cache", "type": "importlib", "path": "python/importlib.html#importlib.util.source_from_cache", "desc": "将路径指定给 PEP 3147文件名，返回关联的源代码文件路径" }, { "name": "importlib.util.decode_source", "type": "importlib", "path": "python/importlib.html#importlib.util.decode_source", "desc": "解码表示源代码的给定字节，并将其作为带有通用换行符的字符串返回（如importlib" }, { "name": "importlib.util.resolve_name", "type": "importlib", "path": "python/importlib.html#importlib.util.resolve_name", "desc": "将相对模块名称解析为绝对模块名称" }, { "name": "importlib.util.find_spec", "type": "importlib", "path": "python/importlib.html#importlib.util.find_spec", "desc": "查找模块的spec，可选地相对于指定的包名称" }, { "name": "importlib.util.module_from_spec", "type": "importlib", "path": "python/importlib.html#importlib.util.module_from_spec", "desc": "根据spec和spec" }, { "name": "importlib.util.module_for_loader", "type": "importlib", "path": "python/importlib.html#importlib.util.module_for_loader", "desc": "用于importlib" }, { "name": "importlib.util.set_loader", "type": "importlib", "path": "python/importlib.html#importlib.util.set_loader", "desc": "用于importlib" }, { "name": "importlib.util.set_package", "type": "importlib", "path": "python/importlib.html#importlib.util.set_package", "desc": "用于importlib" }, { "name": "importlib.util.spec_from_loader", "type": "importlib", "path": "python/importlib.html#importlib.util.spec_from_loader", "desc": "基于加载程序创建ModuleSpec实例的工厂函数" }, { "name": "importlib.util.spec_from_file_location", "type": "importlib", "path": "python/importlib.html#importlib.util.spec_from_file_location", "desc": "基于文件路径创建ModuleSpec实例的工厂函数" }, { "name": "inspect.getmembers", "type": "inspect", "path": "python/inspect.html#inspect.getmembers", "desc": "返回按名称排序的（name, value)列表中的所有成员对象" }, { "name": "inspect.getmoduleinfo", "type": "inspect", "path": "python/inspect.html#inspect.getmoduleinfo", "desc": "返回一个命名元组 ModuleInfo（name， suffix， mode， module_type）描述Python如何解释由path标识的文件是模块，或者返回None，如果没被标识为模块" }, { "name": "inspect.getmodulename", "type": "inspect", "path": "python/inspect.html#inspect.getmodulename", "desc": "返回由文件path命名的模块的名称，不包括封装包的名称" }, { "name": "inspect.ismodule", "type": "inspect", "path": "python/inspect.html#inspect.ismodule", "desc": "如果对象是模块，则返回true" }, { "name": "inspect.isclass", "type": "inspect", "path": "python/inspect.html#inspect.isclass", "desc": "如果对象是一个类，无论是内置的还是用Python代码创建的，则返回true" }, { "name": "inspect.ismethod", "type": "inspect", "path": "python/inspect.html#inspect.ismethod", "desc": "如果对象是用Python编写的绑定方法，则返回true" }, { "name": "inspect.isfunction", "type": "inspect", "path": "python/inspect.html#inspect.isfunction", "desc": "如果对象是一个Python函数（包含由lambda表达式创建的函数），则返回true" }, { "name": "inspect.isgeneratorfunction", "type": "inspect", "path": "python/inspect.html#inspect.isgeneratorfunction", "desc": "如果对象是Python生成器函数，则返回true" }, { "name": "inspect.isgenerator", "type": "inspect", "path": "python/inspect.html#inspect.isgenerator", "desc": "如果对象是一个生成器，则返回true" }, { "name": "inspect.iscoroutinefunction", "type": "inspect", "path": "python/inspect.html#inspect.iscoroutinefunction", "desc": "如果对象是coroutine function（用async def语法定义的函数），则返回true" }, { "name": "inspect.iscoroutine", "type": "inspect", "path": "python/inspect.html#inspect.iscoroutine", "desc": "如果对象是由async def函数创建的coroutine，则返回true" }, { "name": "inspect.isawaitable", "type": "inspect", "path": "python/inspect.html#inspect.isawaitable", "desc": "如果对象可以在await表达式中使用，则返回true" }, { "name": "inspect.istraceback", "type": "inspect", "path": "python/inspect.html#inspect.istraceback", "desc": "如果对象是回溯，则返回true" }, { "name": "inspect.isframe", "type": "inspect", "path": "python/inspect.html#inspect.isframe", "desc": "如果对象是一个框架，则返回true" }, { "name": "inspect.iscode", "type": "inspect", "path": "python/inspect.html#inspect.iscode", "desc": "如果对象是代码，则返回true" }, { "name": "inspect.isbuiltin", "type": "inspect", "path": "python/inspect.html#inspect.isbuiltin", "desc": "如果对象是内置函数或绑定的内置方法，则返回true" }, { "name": "inspect.isroutine", "type": "inspect", "path": "python/inspect.html#inspect.isroutine", "desc": "如果对象是用户定义的或内置的函数或方法，则返回true" }, { "name": "inspect.isabstract", "type": "inspect", "path": "python/inspect.html#inspect.isabstract", "desc": "如果对象是抽象基类，则返回true" }, { "name": "inspect.ismethoddescriptor", "type": "inspect", "path": "python/inspect.html#inspect.ismethoddescriptor", "desc": "如果对象是方法描述符，则返回true，但如果ismethod()，isclass()，isfunction()或isbuiltin()是真的" }, { "name": "inspect.isdatadescriptor", "type": "inspect", "path": "python/inspect.html#inspect.isdatadescriptor", "desc": "如果对象是数据描述符，则返回true" }, { "name": "inspect.isgetsetdescriptor", "type": "inspect", "path": "python/inspect.html#inspect.isgetsetdescriptor", "desc": "如果对象是getset描述符，则返回true" }, { "name": "inspect.ismemberdescriptor", "type": "inspect", "path": "python/inspect.html#inspect.ismemberdescriptor", "desc": "如果对象是成员描述符，则返回true" }, { "name": "inspect.getdoc", "type": "inspect", "path": "python/inspect.html#inspect.getdoc", "desc": "获取一个对象的文档字符串，用cleandoc()清理" }, { "name": "inspect.getcomments", "type": "inspect", "path": "python/inspect.html#inspect.getcomments", "desc": "在单个字符串中返回紧接在对象源代码之前（对于类，函数或方法）或Python源文件顶部（如果对象是模块）的任何注释行" }, { "name": "inspect.getfile", "type": "inspect", "path": "python/inspect.html#inspect.getfile", "desc": "返回定义了对象的（文本或二进制）文件的名称" }, { "name": "inspect.getmodule", "type": "inspect", "path": "python/inspect.html#inspect.getmodule", "desc": "尝试猜测某个对象是在哪个模块中定义的" }, { "name": "inspect.getsourcefile", "type": "inspect", "path": "python/inspect.html#inspect.getsourcefile", "desc": "返回定义了对象的Python源文件的名称" }, { "name": "inspect.getsourcelines", "type": "inspect", "path": "python/inspect.html#inspect.getsourcelines", "desc": "返回一个对象的源代码行和起始行号的列表" }, { "name": "inspect.getsource", "type": "inspect", "path": "python/inspect.html#inspect.getsource", "desc": "返回一个对象的源代码文本" }, { "name": "inspect.cleandoc", "type": "inspect", "path": "python/inspect.html#inspect.cleandoc", "desc": "清除缩排以排列代码块的文档字符串中的缩进" }, { "name": "inspect.signature", "type": "inspect", "path": "python/inspect.html#inspect.signature", "desc": "为给定的callable返回一个Signature对象：" }, { "name": "inspect.getclasstree", "type": "inspect", "path": "python/inspect.html#inspect.getclasstree", "desc": "将给定的类列表排列成嵌套列表的层次结构" }, { "name": "inspect.getargspec", "type": "inspect", "path": "python/inspect.html#inspect.getargspec", "desc": "获取Python函数参数的名称和默认值" }, { "name": "inspect.getfullargspec", "type": "inspect", "path": "python/inspect.html#inspect.getfullargspec", "desc": "获取Python函数参数的名称和默认值" }, { "name": "inspect.getargvalues", "type": "inspect", "path": "python/inspect.html#inspect.getargvalues", "desc": "获取有关传递到特定框架的参数的信息" }, { "name": "inspect.formatargspec", "type": "inspect", "path": "python/inspect.html#inspect.formatargspec", "desc": "根据getargspec()或getfullargspec()返回的值格式化漂亮的参数规范" }, { "name": "inspect.formatargvalues", "type": "inspect", "path": "python/inspect.html#inspect.formatargvalues", "desc": "根据getargvalues()返回的四个值格式化漂亮的参数规范" }, { "name": "inspect.getmro", "type": "inspect", "path": "python/inspect.html#inspect.getmro", "desc": "以方法解析顺序返回cls基类的元组，包括cls" }, { "name": "inspect.getcallargs", "type": "inspect", "path": "python/inspect.html#inspect.getcallargs", "desc": "将args和kwds绑定到Python函数或方法func的参数名称，就好像它们是用它们调用的一样" }, { "name": "inspect.getclosurevars", "type": "inspect", "path": "python/inspect.html#inspect.getclosurevars", "desc": "获取Python函数或方法func中的外部名称引用到其当前值的映射" }, { "name": "inspect.unwrap", "type": "inspect", "path": "python/inspect.html#inspect.unwrap", "desc": "获取由func包装的对象" }, { "name": "inspect.getframeinfo", "type": "inspect", "path": "python/inspect.html#inspect.getframeinfo", "desc": "获取关于帧或追溯对象的信息" }, { "name": "inspect.getouterframes", "type": "inspect", "path": "python/inspect.html#inspect.getouterframes", "desc": "获取一个帧和所有外部帧的帧记录列表" }, { "name": "inspect.getinnerframes", "type": "inspect", "path": "python/inspect.html#inspect.getinnerframes", "desc": "获取追踪帧和所有内部帧的帧记录列表" }, { "name": "inspect.currentframe", "type": "inspect", "path": "python/inspect.html#inspect.currentframe", "desc": "返回当前调用者的堆栈框架的框架对象" }, { "name": "inspect.stack", "type": "inspect", "path": "python/inspect.html#inspect.stack", "desc": "返回调用者堆栈的帧记录列表" }, { "name": "inspect.trace", "type": "inspect", "path": "python/inspect.html#inspect.trace", "desc": "返回当前帧与当前正在处理异常的帧之间的堆栈的帧记录列表" }, { "name": "inspect.getattr_static", "type": "inspect", "path": "python/inspect.html#inspect.getattr_static", "desc": "通过描述符协议，__getattr__()或__getattribute__()检索属性而不触发动态查找" }, { "name": "inspect.getgeneratorstate", "type": "inspect", "path": "python/inspect.html#inspect.getgeneratorstate", "desc": "获取生成器迭代器的当前状态" }, { "name": "inspect.getcoroutinestate", "type": "inspect", "path": "python/inspect.html#inspect.getcoroutinestate", "desc": "获取协程对象的当前状态" }, { "name": "inspect.getgeneratorlocals", "type": "inspect", "path": "python/inspect.html#inspect.getgeneratorlocals", "desc": "获取generator中的实时局部变量映射到它们的当前值" }, { "name": "inspect.getcoroutinelocals", "type": "inspect", "path": "python/inspect.html#inspect.getcoroutinelocals", "desc": "这个函数类似于getgeneratorlocals()，但是对由async def函数创建的协程对象起作用" }, { "name": "io.open", "type": "io", "path": "python/io.html#io.open", "desc": "这是内置open()函数的别名" }, { "name": "io.DEFAULT_BUFFER_SIZE", "type": "io", "path": "python/io.html#io.DEFAULT_BUFFER_SIZE", "desc": "包含由模块的缓冲I / O类使用的默认缓冲区大小的int" }, { "name": "ipaddress.ip_address", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.ip_address", "desc": "根据作为参数传递的IP地址，返回IPv4Address或IPv6Address对象" }, { "name": "ipaddress.ip_network", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.ip_network", "desc": "根据作为参数传递的IP地址，返回IPv4Network或IPv6Network对象" }, { "name": "ipaddress.ip_interface", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.ip_interface", "desc": "根据作为参数传递的IP地址，返回IPv4Interface或IPv6Interface对象" }, { "name": "ipaddress.v4_int_to_packed", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.v4_int_to_packed", "desc": "将地址表示为网络（big-endian）顺序中的4个打包字节" }, { "name": "ipaddress.v6_int_to_packed", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.v6_int_to_packed", "desc": "将地址表示为网络（big-endian）顺序中的16个打包字节" }, { "name": "ipaddress.summarize_address_range", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.summarize_address_range", "desc": "返回给定第一个和最后一个IP地址的汇总网络范围的迭代器" }, { "name": "ipaddress.collapse_addresses", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.collapse_addresses", "desc": "返回折叠的IPv4Network或IPv6Network对象的迭代器" }, { "name": "ipaddress.get_mixed_type_key", "type": "ipaddress", "path": "python/ipaddress.html#ipaddress.get_mixed_type_key", "desc": "返回适用于在网络和地址之间排序的键" }, { "name": "itertools.accumulate", "type": "itertools", "path": "python/itertools.html#itertools.accumulate", "desc": "创建的迭代对象返回被计算的sums值或者其它二元函数的结果(通过指定func参数)" }, { "name": "itertools.chain", "type": "itertools", "path": "python/itertools.html#itertools.chain", "desc": "创建一个迭代器，从第一个迭代器返回元素，直到它耗尽，然后继续下一个迭代器，直到所有的迭代器都用尽" }, { "name": "itertools.combinations", "type": "itertools", "path": "python/itertools.html#itertools.combinations", "desc": "从输入可迭代返回r个元素的长度子序列" }, { "name": "itertools.combinations_with_replacement", "type": "itertools", "path": "python/itertools.html#itertools.combinations_with_replacement", "desc": "从输入可迭代返回元素的r长度子序列，允许单个元素重复一次以上" }, { "name": "itertools.compress", "type": "itertools", "path": "python/itertools.html#itertools.compress", "desc": "创建一个迭代器，用于过滤数据中的元素，只返回在选择器中具有对应元素的元素，其计算结果为True" }, { "name": "itertools.count", "type": "itertools", "path": "python/itertools.html#itertools.count", "desc": "使迭代器以数字开始开始返回均匀间隔的值" }, { "name": "itertools.cycle", "type": "itertools", "path": "python/itertools.html#itertools.cycle", "desc": "使迭代器从可迭代器返回元素并保存每个元素的副本" }, { "name": "itertools.dropwhile", "type": "itertools", "path": "python/itertools.html#itertools.dropwhile", "desc": "创建一个迭代器，只要谓词为真，就从迭代中删除元素；之后，返回每个元素" }, { "name": "itertools.filterfalse", "type": "itertools", "path": "python/itertools.html#itertools.filterfalse", "desc": "创建一个迭代器，过滤可迭代元素，只返回谓词为False的元素" }, { "name": "itertools.groupby", "type": "itertools", "path": "python/itertools.html#itertools.groupby", "desc": "创建一个迭代器，从可迭代返回连续的键和组" }, { "name": "itertools.islice", "type": "itertools", "path": "python/itertools.html#itertools.islice", "desc": "让一个迭代器从它返回选定的元素" }, { "name": "itertools.permutations", "type": "itertools", "path": "python/itertools.html#itertools.permutations", "desc": "返回可迭代中的元素的连续r长度排列" }, { "name": "itertools.product", "type": "itertools", "path": "python/itertools.html#itertools.product", "desc": "输入迭代的笛卡尔乘积" }, { "name": "itertools.repeat", "type": "itertools", "path": "python/itertools.html#itertools.repeat", "desc": "创建一个反复返回对象的迭代器" }, { "name": "itertools.starmap", "type": "itertools", "path": "python/itertools.html#itertools.starmap", "desc": "创建一个迭代器，使用从可迭代获得的参数计算函数" }, { "name": "itertools.takewhile", "type": "itertools", "path": "python/itertools.html#itertools.takewhile", "desc": "创建一个迭代器，只要谓词为真，它就返回可迭代的元素" }, { "name": "itertools.tee", "type": "itertools", "path": "python/itertools.html#itertools.tee", "desc": "从单个可迭代中返回n独立迭代器" }, { "name": "itertools.zip_longest", "type": "itertools", "path": "python/itertools.html#itertools.zip_longest", "desc": "创建一个迭代器，聚合来自每个迭代器的元素" }, { "name": "json.dump", "type": "json", "path": "python/json.html#json.dump", "desc": "将obj序列化为fp（a " }, { "name": "json.dumps", "type": "json", "path": "python/json.html#json.dumps", "desc": "使用此conversion table将obj序列化为JSON格式的str" }, { "name": "json.load", "type": "json", "path": "python/json.html#json.load", "desc": "使用 这个转换表 将 fp (一个包含 JSON 文档并支持 " }, { "name": "json.loads", "type": "json", "path": "python/json.html#json.loads", "desc": "使用此conversion table将包含JSON文档的s（a str实例）解压缩为Python对象" }, { "name": "keyword.iskeyword", "type": "keyword", "path": "python/keyword.html#keyword.iskeyword", "desc": "如果 s 是一个 Python 关键字则返回True" }, { "name": "keyword.kwlist", "type": "keyword", "path": "python/keyword.html#keyword.kwlist", "desc": "包含定义为解释器的所有关键字的序列" }, { "name": "linecache.getline", "type": "linecache", "path": "python/linecache.html#linecache.getline", "desc": "从名为filename的文件中获取行lineno" }, { "name": "linecache.clearcache", "type": "linecache", "path": "python/linecache.html#linecache.clearcache", "desc": "清除缓存" }, { "name": "linecache.checkcache", "type": "linecache", "path": "python/linecache.html#linecache.checkcache", "desc": "检查缓存的有效性" }, { "name": "linecache.lazycache", "type": "linecache", "path": "python/linecache.html#linecache.lazycache", "desc": "捕获有关非基于文件的模块的足够详细信息，以允许稍后通过getline()获取其行，即使module_globals在后面的调用中为None" }, { "name": "locale.setlocale", "type": "locale", "path": "python/locale.html#locale.setlocale", "desc": "如果给定locale且None，setlocale()修改类别的区域设置" }, { "name": "locale.localeconv", "type": "locale", "path": "python/locale.html#locale.localeconv", "desc": "将本地约定的数据库作为字典返回" }, { "name": "locale.nl_langinfo", "type": "locale", "path": "python/locale.html#locale.nl_langinfo", "desc": "将一些特定于语言环境的信息作为字符串返回" }, { "name": "locale.getdefaultlocale", "type": "locale", "path": "python/locale.html#locale.getdefaultlocale", "desc": "尝试确定默认语言环境设置，并以（语言 代码， 编码） " }, { "name": "locale.getlocale", "type": "locale", "path": "python/locale.html#locale.getlocale", "desc": "将指定语言代码类别的当前设置作为包含语言代码，编码的序列返回" }, { "name": "locale.getpreferredencoding", "type": "locale", "path": "python/locale.html#locale.getpreferredencoding", "desc": "根据用户偏好返回用于文本数据的编码" }, { "name": "locale.normalize", "type": "locale", "path": "python/locale.html#locale.normalize", "desc": "返回给定语言环境名称的标准化语言环境代码" }, { "name": "locale.resetlocale", "type": "locale", "path": "python/locale.html#locale.resetlocale", "desc": "将类别的区域设置设置为默认设置" }, { "name": "locale.strcoll", "type": "locale", "path": "python/locale.html#locale.strcoll", "desc": "根据当前LC_COLLATE设置比较两个字符串" }, { "name": "locale.strxfrm", "type": "locale", "path": "python/locale.html#locale.strxfrm", "desc": "将字符串转换为可在区域设置感知比较中使用的字符串" }, { "name": "locale.format", "type": "locale", "path": "python/locale.html#locale.format", "desc": "根据当前的LC_NUMERIC设置格式化数字val" }, { "name": "locale.format_string", "type": "locale", "path": "python/locale.html#locale.format_string", "desc": "按格式 ％ val处理格式说明符，但会考虑当前的区域设置" }, { "name": "locale.currency", "type": "locale", "path": "python/locale.html#locale.currency", "desc": "根据当前的LC_MONETARY设置格式化数字val" }, { "name": "locale.str", "type": "locale", "path": "python/locale.html#locale.str", "desc": "使用与内建函数str(float)相同的格式格式化浮点数，但会考虑小数点" }, { "name": "locale.delocalize", "type": "locale", "path": "python/locale.html#locale.delocalize", "desc": "在LC_NUMERIC设置后，将字符串转换为规范化的数字字符串" }, { "name": "locale.atof", "type": "locale", "path": "python/locale.html#locale.atof", "desc": "将字符串转换为浮点数，紧跟LC_NUMERIC设置" }, { "name": "locale.atoi", "type": "locale", "path": "python/locale.html#locale.atoi", "desc": "将字符串转换为整数，遵循LC_NUMERIC约定" }, { "name": "locale.CODESET", "type": "locale", "path": "python/locale.html#locale.CODESET", "desc": "获取一个字符串，其中包含所选语言环境中使用的字符编码的名称" }, { "name": "locale.D_T_FMT", "type": "locale", "path": "python/locale.html#locale.D_T_FMT", "desc": "获取可用作time" }, { "name": "locale.D_FMT", "type": "locale", "path": "python/locale.html#locale.D_FMT", "desc": "获取可用作time" }, { "name": "locale.T_FMT", "type": "locale", "path": "python/locale.html#locale.T_FMT", "desc": "获取可用作time" }, { "name": "locale.T_FMT_AMPM", "type": "locale", "path": "python/locale.html#locale.T_FMT_AMPM", "desc": "获取time" }, { "name": "locale.RADIXCHAR", "type": "locale", "path": "python/locale.html#locale.RADIXCHAR", "desc": "获取基数字符（小数点，十进制逗号等））" }, { "name": "locale.THOUSEP", "type": "locale", "path": "python/locale.html#locale.THOUSEP", "desc": "获取数千（三位数的组）的分隔符" }, { "name": "locale.YESEXPR", "type": "locale", "path": "python/locale.html#locale.YESEXPR", "desc": "获取可以与正则表达式函数一起使用的正则表达式，以识别对是/否问题的肯定响应" }, { "name": "locale.NOEXPR", "type": "locale", "path": "python/locale.html#locale.NOEXPR", "desc": "获取可以与regex（3）函数一起使用的正则表达式来识别对是/否问题的否定响应" }, { "name": "locale.CRNCYSTR", "type": "locale", "path": "python/locale.html#locale.CRNCYSTR", "desc": "获取货币符号，如果符号应出现在值前面，则以“ - ”开头，如果符号应出现在值后面，则为“+”，如果符号应替换基数字符，则为“" }, { "name": "locale.ERA", "type": "locale", "path": "python/locale.html#locale.ERA", "desc": "获取表示当前语言环境中使用的时代的字符串" }, { "name": "locale.ERA_D_T_FMT", "type": "locale", "path": "python/locale.html#locale.ERA_D_T_FMT", "desc": "获取time" }, { "name": "locale.ERA_D_FMT", "type": "locale", "path": "python/locale.html#locale.ERA_D_FMT", "desc": "获取time" }, { "name": "locale.ERA_T_FMT", "type": "locale", "path": "python/locale.html#locale.ERA_T_FMT", "desc": "获取time" }, { "name": "locale.ALT_DIGITS", "type": "locale", "path": "python/locale.html#locale.ALT_DIGITS", "desc": "获取用于表示值0到99的最多100个值的表示" }, { "name": "locale.LC_CTYPE", "type": "locale", "path": "python/locale.html#locale.LC_CTYPE", "desc": "字符类型函数的区域设置类别" }, { "name": "locale.LC_COLLATE", "type": "locale", "path": "python/locale.html#locale.LC_COLLATE", "desc": "用于排序字符串的区域设置类别" }, { "name": "locale.LC_TIME", "type": "locale", "path": "python/locale.html#locale.LC_TIME", "desc": "时间格式化的区域设置类别" }, { "name": "locale.LC_MONETARY", "type": "locale", "path": "python/locale.html#locale.LC_MONETARY", "desc": "货币值格式化的区域设置类别" }, { "name": "locale.LC_MESSAGES", "type": "locale", "path": "python/locale.html#locale.LC_MESSAGES", "desc": "消息显示的区域设置类别" }, { "name": "locale.LC_NUMERIC", "type": "locale", "path": "python/locale.html#locale.LC_NUMERIC", "desc": "格式化数字的区域设置类别" }, { "name": "locale.LC_ALL", "type": "locale", "path": "python/locale.html#locale.LC_ALL", "desc": "所有区域设置的组合" }, { "name": "locale.CHAR_MAX", "type": "locale", "path": "python/locale.html#locale.CHAR_MAX", "desc": "这是用于localeconv()返回的不同值的符号常量" }, { "name": "logging.config.dictConfig", "type": "logging.config", "path": "python/logging.config.html#logging.config.dictConfig", "desc": "Takes the logging configuration from a dictionary" }, { "name": "logging.config.fileConfig", "type": "logging.config", "path": "python/logging.config.html#logging.config.fileConfig", "desc": "从configparser -format文件读取日志记录配置" }, { "name": "logging.config.listen", "type": "logging.config", "path": "python/logging.config.html#logging.config.listen", "desc": "在指定的端口起一个socket服务器，以监听新的配置" }, { "name": "logging.config.stopListening", "type": "logging.config", "path": "python/logging.config.html#logging.config.stopListening", "desc": "停止listen()返回的服务器的监听" }, { "name": "logging.getLogger", "type": "logging", "path": "python/logging.html#logging.getLogger", "desc": "返回具有指定名称的记录器，如果名称为无，则返回一个记录器，它是层次结构的根记录器" }, { "name": "logging.getLoggerClass", "type": "logging", "path": "python/logging.html#logging.getLoggerClass", "desc": "Return either the standard Logger class, or the last class passed to setLoggerClass()" }, { "name": "logging.getLogRecordFactory", "type": "logging", "path": "python/logging.html#logging.getLogRecordFactory", "desc": "Return a callable which is used to create a LogRecord" }, { "name": "logging.debug", "type": "logging", "path": "python/logging.html#logging.debug", "desc": "Logs a message with level DEBUG on the root logger" }, { "name": "logging.info", "type": "logging", "path": "python/logging.html#logging.info", "desc": "Logs a message with level INFO on the root logger" }, { "name": "logging.warning", "type": "logging", "path": "python/logging.html#logging.warning", "desc": "Logs a message with level WARNING on the root logger" }, { "name": "logging.error", "type": "logging", "path": "python/logging.html#logging.error", "desc": "Logs a message with level ERROR on the root logger" }, { "name": "logging.critical", "type": "logging", "path": "python/logging.html#logging.critical", "desc": "Logs a message with level CRITICAL on the root logger" }, { "name": "logging.exception", "type": "logging", "path": "python/logging.html#logging.exception", "desc": "Logs a message with level ERROR on the root logger" }, { "name": "logging.log", "type": "logging", "path": "python/logging.html#logging.log", "desc": "Logs a message with level level on the root logger" }, { "name": "logging.disable", "type": "logging", "path": "python/logging.html#logging.disable", "desc": "Provides an overriding level lvl for all loggers which takes precedence over the logger’s own level" }, { "name": "logging.addLevelName", "type": "logging", "path": "python/logging.html#logging.addLevelName", "desc": "Associates level lvl with text levelName in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a Formatter formats a message" }, { "name": "logging.getLevelName", "type": "logging", "path": "python/logging.html#logging.getLevelName", "desc": "Returns the textual representation of logging level lvl" }, { "name": "logging.makeLogRecord", "type": "logging", "path": "python/logging.html#logging.makeLogRecord", "desc": "Creates and returns a new LogRecord instance whose attributes are defined by attrdict" }, { "name": "logging.basicConfig", "type": "logging", "path": "python/logging.html#logging.basicConfig", "desc": "Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger" }, { "name": "logging.shutdown", "type": "logging", "path": "python/logging.html#logging.shutdown", "desc": "Informs the logging system to perform an orderly shutdown by flushing and closing all handlers" }, { "name": "logging.setLoggerClass", "type": "logging", "path": "python/logging.html#logging.setLoggerClass", "desc": "Tells the logging system to use the class klass when instantiating a logger" }, { "name": "logging.setLogRecordFactory", "type": "logging", "path": "python/logging.html#logging.setLogRecordFactory", "desc": "Set a callable which is used to create a LogRecord" }, { "name": "logging.captureWarnings", "type": "logging", "path": "python/logging.html#logging.captureWarnings", "desc": "This function is used to turn the capture of warnings by logging on and off" }, { "name": "lzma.open", "type": "lzma", "path": "python/lzma.html#lzma.open", "desc": "以二进制或文本模式打开LZMA压缩文件，返回file object" }, { "name": "lzma.compress", "type": "lzma", "path": "python/lzma.html#lzma.compress", "desc": "压缩数据（a bytes对象），将压缩数据作为bytes对象返回" }, { "name": "lzma.decompress", "type": "lzma", "path": "python/lzma.html#lzma.decompress", "desc": "解压缩数据（a bytes对象），将未压缩数据作为bytes对象返回" }, { "name": "lzma.is_check_supported", "type": "lzma", "path": "python/lzma.html#lzma.is_check_supported", "desc": "如果在此系统上支持给定的完整性检查，则返回true" }, { "name": "mailcap.findmatch", "type": "mailcap", "path": "python/mailcap.html#mailcap.findmatch", "desc": "返回一个2元组；第一个元素是包含要执行的命令行的字符串（可以传递到os" }, { "name": "mailcap.getcaps", "type": "mailcap", "path": "python/mailcap.html#mailcap.getcaps", "desc": "返回将MIME类型映射到mailcap文件条目列表的字典" }, { "name": "marshal.dump", "type": "marshal", "path": "python/marshal.html#marshal.dump", "desc": "在打开的文件上写入值" }, { "name": "marshal.load", "type": "marshal", "path": "python/marshal.html#marshal.load", "desc": "从打开的文件中读取一个值并返回" }, { "name": "marshal.dumps", "type": "marshal", "path": "python/marshal.html#marshal.dumps", "desc": "返回dump（value， 文件）将写入文件的字符串" }, { "name": "marshal.loads", "type": "marshal", "path": "python/marshal.html#marshal.loads", "desc": "将字符串转换为值" }, { "name": "marshal.version", "type": "marshal", "path": "python/marshal.html#marshal.version", "desc": "表示模块使用的格式" }, { "name": "math.ceil", "type": "math", "path": "python/math.html#math.ceil", "desc": "Return the ceiling of x, 大于等于 x 的最小整数" }, { "name": "math.copysign", "type": "math", "path": "python/math.html#math.copysign", "desc": "返回x的绝对值大小和y的符号" }, { "name": "math.fabs", "type": "math", "path": "python/math.html#math.fabs", "desc": "返回x的绝对值" }, { "name": "math.factorial", "type": "math", "path": "python/math.html#math.factorial", "desc": "返回x的阶乘" }, { "name": "math.floor", "type": "math", "path": "python/math.html#math.floor", "desc": "Return the floor of x, 小于等于 x的最大整数" }, { "name": "math.fmod", "type": "math", "path": "python/math.html#math.fmod", "desc": "返回由平台C库定义的fmod（x， y）" }, { "name": "math.frexp", "type": "math", "path": "python/math.html#math.frexp", "desc": "将x的尾数和指数作为对(m,  e)返回" }, { "name": "math.fsum", "type": "math", "path": "python/math.html#math.fsum", "desc": "在可迭代中返回值的准确浮动点总和" }, { "name": "math.gcd", "type": "math", "path": "python/math.html#math.gcd", "desc": "返回整数a和b的最大公约数" }, { "name": "math.isclose", "type": "math", "path": "python/math.html#math.isclose", "desc": "如果a和b的值彼此接近，则返回True, 反之则False" }, { "name": "math.isfinite", "type": "math", "path": "python/math.html#math.isfinite", "desc": "如果x既不是无穷大也不是NaN，则返回True，否则返回False" }, { "name": "math.isinf", "type": "math", "path": "python/math.html#math.isinf", "desc": "如果x是正或负无穷大，则返回True，否则返回False" }, { "name": "math.isnan", "type": "math", "path": "python/math.html#math.isnan", "desc": "如果x是NaN（不是数字），则返回True，否则返回False" }, { "name": "math.ldexp", "type": "math", "path": "python/math.html#math.ldexp", "desc": "返回x * （2 ** i）" }, { "name": "math.modf", "type": "math", "path": "python/math.html#math.modf", "desc": "返回x的小数和整数部分" }, { "name": "math.trunc", "type": "math", "path": "python/math.html#math.trunc", "desc": "将Real值x返回到Integral（通常为整数）" }, { "name": "math.exp", "type": "math", "path": "python/math.html#math.exp", "desc": "返回 e**x （e的x幂方）" }, { "name": "math.expm1", "type": "math", "path": "python/math.html#math.expm1", "desc": "返回e ** x  -  1" }, { "name": "math.log", "type": "math", "path": "python/math.html#math.log", "desc": "具有一个参数，返回的x （以e） 的自然对数" }, { "name": "math.log1p", "type": "math", "path": "python/math.html#math.log1p", "desc": "返回1 + x （底数e） 的自然对数" }, { "name": "math.log2", "type": "math", "path": "python/math.html#math.log2", "desc": "返回x的基2对数" }, { "name": "math.log10", "type": "math", "path": "python/math.html#math.log10", "desc": "返回x的对数" }, { "name": "math.pow", "type": "math", "path": "python/math.html#math.pow", "desc": "返回x的y次幂" }, { "name": "math.sqrt", "type": "math", "path": "python/math.html#math.sqrt", "desc": "返回 x 的平方根" }, { "name": "math.acos", "type": "math", "path": "python/math.html#math.acos", "desc": "返回以弧度表示的角的x，余弦" }, { "name": "math.asin", "type": "math", "path": "python/math.html#math.asin", "desc": "返回以弧度表示的正弦值的x" }, { "name": "math.atan", "type": "math", "path": "python/math.html#math.atan", "desc": "返回反正切值的x，以弧度为单位" }, { "name": "math.atan2", "type": "math", "path": "python/math.html#math.atan2", "desc": "以弧度返回atan（y / x）" }, { "name": "math.cos", "type": "math", "path": "python/math.html#math.cos", "desc": "返回x弧度的余弦值" }, { "name": "math.hypot", "type": "math", "path": "python/math.html#math.hypot", "desc": "返回欧氏方程，sqrt（x * x + y * y）" }, { "name": "math.sin", "type": "math", "path": "python/math.html#math.sin", "desc": "返回x弧度的正弦值" }, { "name": "math.tan", "type": "math", "path": "python/math.html#math.tan", "desc": "返回x弧度的正切值" }, { "name": "math.degrees", "type": "math", "path": "python/math.html#math.degrees", "desc": "将角度x从弧度转换为度" }, { "name": "math.radians", "type": "math", "path": "python/math.html#math.radians", "desc": "将角度x从度转换为弧度" }, { "name": "math.acosh", "type": "math", "path": "python/math.html#math.acosh", "desc": "返回x的反双曲余弦值" }, { "name": "math.asinh", "type": "math", "path": "python/math.html#math.asinh", "desc": "返回x的反双曲正弦值" }, { "name": "math.atanh", "type": "math", "path": "python/math.html#math.atanh", "desc": "返回x的反双曲正切值" }, { "name": "math.cosh", "type": "math", "path": "python/math.html#math.cosh", "desc": "返回x的双曲余弦值" }, { "name": "math.sinh", "type": "math", "path": "python/math.html#math.sinh", "desc": "返回x的双曲正弦值" }, { "name": "math.tanh", "type": "math", "path": "python/math.html#math.tanh", "desc": "返回x的双曲正切值" }, { "name": "math.erf", "type": "math", "path": "python/math.html#math.erf", "desc": "在x返回错误函数" }, { "name": "math.erfc", "type": "math", "path": "python/math.html#math.erfc", "desc": "返回在x的余误差函数" }, { "name": "math.gamma", "type": "math", "path": "python/math.html#math.gamma", "desc": "返回 x 的 Gamma function （伽马函数）" }, { "name": "math.lgamma", "type": "math", "path": "python/math.html#math.lgamma", "desc": "返回伽玛函数在x的绝对值的自然对数" }, { "name": "math.pi", "type": "math", "path": "python/math.html#math.pi", "desc": "数学常量 π = 3" }, { "name": "math.e", "type": "math", "path": "python/math.html#math.e", "desc": "数学常数 e = 2" }, { "name": "math.inf", "type": "math", "path": "python/math.html#math.inf", "desc": "浮点正无穷大" }, { "name": "math.nan", "type": "math", "path": "python/math.html#math.nan", "desc": "浮点数“不是数字”（NaN）值" }, { "name": "mimetypes.guess_type", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.guess_type", "desc": "根据文件名或URL（由url给出）猜测文件类型" }, { "name": "mimetypes.guess_all_extensions", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.guess_all_extensions", "desc": "根据由类型给出的MIME类型猜测文件的扩展名" }, { "name": "mimetypes.guess_extension", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.guess_extension", "desc": "根据由类型给出的MIME类型猜测文件的扩展名" }, { "name": "mimetypes.init", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.init", "desc": "初始化内部数据结构" }, { "name": "mimetypes.read_mime_types", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.read_mime_types", "desc": "加载文件filename中给出的类型映射（如果存在）" }, { "name": "mimetypes.add_type", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.add_type", "desc": "将MIME类型类型的映射添加到扩展ext" }, { "name": "mimetypes.inited", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.inited", "desc": "指示全局数据结构是否已被初始化的标志" }, { "name": "mimetypes.knownfiles", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.knownfiles", "desc": "通常安装的类型映射文件名列表" }, { "name": "mimetypes.suffix_map", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.suffix_map", "desc": "字典映射后缀到后缀" }, { "name": "mimetypes.encodings_map", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.encodings_map", "desc": "将文件扩展名映射到编码类型" }, { "name": "mimetypes.types_map", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.types_map", "desc": "字典映射MIME类型的文件扩展名" }, { "name": "mimetypes.common_types", "type": "mimetypes", "path": "python/mimetypes.html#mimetypes.common_types", "desc": "" }, { "name": "modulefinder.AddPackagePath", "type": "modulefinder", "path": "python/modulefinder.html#modulefinder.AddPackagePath", "desc": "记录在指定的路径中可以找到名为pkg_name的包" }, { "name": "modulefinder.ReplacePackage", "type": "modulefinder", "path": "python/modulefinder.html#modulefinder.ReplacePackage", "desc": "允许指定名为oldname的模块实际上是名为newname的包" }, { "name": "msilib.FCICreate", "type": "msilib", "path": "python/msilib.html#msilib.FCICreate", "desc": "创建名为cabname的新CAB文件" }, { "name": "msilib.UuidCreate", "type": "msilib", "path": "python/msilib.html#msilib.UuidCreate", "desc": "返回新的唯一标识符的字符串表示形式" }, { "name": "msilib.OpenDatabase", "type": "msilib", "path": "python/msilib.html#msilib.OpenDatabase", "desc": "通过调用MsiOpenDatabase返回一个新的数据库对象" }, { "name": "msilib.CreateRecord", "type": "msilib", "path": "python/msilib.html#msilib.CreateRecord", "desc": "通过调用MSICreateRecord()返回一个新的记录对象" }, { "name": "msilib.init_database", "type": "msilib", "path": "python/msilib.html#msilib.init_database", "desc": "Create and return a new database name, initialize it with schema, and set the properties ProductName, ProductCode, ProductVersion, and Manufacturer" }, { "name": "msilib.add_data", "type": "msilib", "path": "python/msilib.html#msilib.add_data", "desc": "将所有记录添加到数据库中名为表的表" }, { "name": "msilib.add_tables", "type": "msilib", "path": "python/msilib.html#msilib.add_tables", "desc": "将模块中的所有表内容添加到数据库" }, { "name": "msilib.add_stream", "type": "msilib", "path": "python/msilib.html#msilib.add_stream", "desc": "将路径添加到数据库的_Stream表中，流名称为name" }, { "name": "msilib.gen_uuid", "type": "msilib", "path": "python/msilib.html#msilib.gen_uuid", "desc": "以MSI通常需要的格式返回新的UUID" }, { "name": "msilib.sequence", "type": "msilib", "path": "python/msilib.html#msilib.sequence", "desc": "此模块包含标准序列表的表内容：AdminExecuteSequence，AdminUISequence，AdvtExecuteSequence，InstallExecuteSequence和 InstallUISequence" }, { "name": "msilib.text", "type": "msilib", "path": "python/msilib.html#msilib.text", "desc": "此模块包含标准安装程序操作的UIText和ActionText表的定义" }, { "name": "msvcrt.locking", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.locking", "desc": "根据C运行时文件描述器fd锁定文件的一部分" }, { "name": "msvcrt.setmode", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.setmode", "desc": "设置文件描述器fd的行末翻译模式" }, { "name": "msvcrt.open_osfhandle", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.open_osfhandle", "desc": "从文件句柄句柄创建C运行时文件描述器" }, { "name": "msvcrt.get_osfhandle", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.get_osfhandle", "desc": "返回文件描述器fd的文件句柄" }, { "name": "msvcrt.kbhit", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.kbhit", "desc": "如果键盘正在等待读取，则返回true" }, { "name": "msvcrt.getch", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.getch", "desc": "读取按键并将结果字符作为字节字符串返回" }, { "name": "msvcrt.getwch", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.getwch", "desc": "getch()的宽字符变量，返回Unicode值" }, { "name": "msvcrt.getche", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.getche", "desc": "类似于getch()，但是如果它代表一个可打印的字符，keypress将被回显" }, { "name": "msvcrt.getwche", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.getwche", "desc": "getche()的宽字符变体，返回Unicode值" }, { "name": "msvcrt.putch", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.putch", "desc": "将字节字符串char打印到控制台，无需缓冲" }, { "name": "msvcrt.putwch", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.putwch", "desc": "宽字符变体putch()，接受Unicode值" }, { "name": "msvcrt.ungetch", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.ungetch", "desc": "导致字节串char被“推回”到控制台缓冲区；它将是由getch()或getche()读取的下一个字符" }, { "name": "msvcrt.ungetwch", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.ungetwch", "desc": "ungetch()的宽字符变体，接受Unicode值" }, { "name": "msvcrt.heapmin", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.heapmin", "desc": "强制malloc()堆清理自己并将未使用的块返回到操作系统" }, { "name": "msvcrt.LK_LOCK", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.LK_LOCK", "desc": "锁定指定的字节" }, { "name": "msvcrt.LK_NBLCK", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.LK_NBLCK", "desc": "锁定指定的字节" }, { "name": "msvcrt.LK_UNLCK", "type": "msvcrt", "path": "python/msvcrt.html#msvcrt.LK_UNLCK", "desc": "解锁指定的字节，必须先前已锁定" }, { "name": "multiprocessing.Pipe", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.Pipe", "desc": "Returns a pair (conn1, conn2) of Connection objects representing the ends of a pipe" }, { "name": "multiprocessing.active_children", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.active_children", "desc": "Return list of all live children of the current process" }, { "name": "multiprocessing.cpu_count", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.cpu_count", "desc": "返回系统中的CPU数量" }, { "name": "multiprocessing.current_process", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.current_process", "desc": "Return the Process object corresponding to the current process" }, { "name": "multiprocessing.freeze_support", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.freeze_support", "desc": "Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable" }, { "name": "multiprocessing.get_all_start_methods", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.get_all_start_methods", "desc": "Returns a list of the supported start methods, the first of which is the default" }, { "name": "multiprocessing.get_context", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.get_context", "desc": "Return a context object which has the same attributes as the multiprocessing module" }, { "name": "multiprocessing.get_start_method", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.get_start_method", "desc": "Return the name of start method used for starting processes" }, { "name": "multiprocessing.set_executable", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.set_executable", "desc": "Sets the path of the Python interpreter to use when starting a child process" }, { "name": "multiprocessing.set_start_method", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.set_start_method", "desc": "Set the method which should be used to start child processes" }, { "name": "multiprocessing.Value", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.Value", "desc": "返回从共享内存分配的ctypes对象" }, { "name": "multiprocessing.Array", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.Array", "desc": "Return a ctypes array allocated from shared memory" }, { "name": "multiprocessing.sharedctypes.RawArray", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.sharedctypes.RawArray", "desc": "Return a ctypes array allocated from shared memory" }, { "name": "multiprocessing.sharedctypes.RawValue", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.sharedctypes.RawValue", "desc": "Return a ctypes object allocated from shared memory" }, { "name": "multiprocessing.sharedctypes.Array", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.sharedctypes.Array", "desc": "The same as RawArray() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes array" }, { "name": "multiprocessing.sharedctypes.Value", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.sharedctypes.Value", "desc": "The same as RawValue() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes object" }, { "name": "multiprocessing.sharedctypes.copy", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.sharedctypes.copy", "desc": "Return a ctypes object allocated from shared memory which is a copy of the ctypes object obj" }, { "name": "multiprocessing.sharedctypes.synchronized", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.sharedctypes.synchronized", "desc": "Return a process-safe wrapper object for a ctypes object which uses lock to synchronize access" }, { "name": "multiprocessing.sharedctypes.multiprocessing.Manager", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.sharedctypes.multiprocessing.Manager", "desc": "Returns a started SyncManager object which can be used for sharing objects between processes" }, { "name": "multiprocessing.connection.deliver_challenge", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.connection.deliver_challenge", "desc": "Send a randomly generated message to the other end of the connection and wait for a reply" }, { "name": "multiprocessing.connection.answer_challenge", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.connection.answer_challenge", "desc": "Receive a message, calculate the digest of the message using authkey as the key, and then send the digest back" }, { "name": "multiprocessing.connection.Client", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.connection.Client", "desc": "Attempt to set up a connection to the listener which is using address address, returning a Connection" }, { "name": "multiprocessing.connection.wait", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.connection.wait", "desc": "Wait till an object in object_list is ready" }, { "name": "multiprocessing.get_logger", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.get_logger", "desc": "Returns the logger used by multiprocessing" }, { "name": "multiprocessing.log_to_stderr", "type": "multiprocessing", "path": "python/multiprocessing.html#multiprocessing.log_to_stderr", "desc": "This function performs a call to get_logger() but in addition to returning the logger created by get_logger, it adds a handler which sends output to sys" }, { "name": "nis.match", "type": "nis", "path": "python/nis.html#nis.match", "desc": "返回映射mapname中键的匹配，如果没有匹配，则引入错误（nis" }, { "name": "nis.cat", "type": "nis", "path": "python/nis.html#nis.cat", "desc": "将键的字典映射到值，使match（键， mapname）== value / t2>" }, { "name": "nis.maps", "type": "nis", "path": "python/nis.html#nis.maps", "desc": "返回所有有效地图的列表" }, { "name": "nis.get_default_domain", "type": "nis", "path": "python/nis.html#nis.get_default_domain", "desc": "返回系统默认NIS域" }, { "name": "nntplib.decode_header", "type": "nntplib", "path": "python/nntplib.html#nntplib.decode_header", "desc": "解码标头值，取消转义任何转义的非ASCII字符" }, { "name": "operator.lt", "type": "operator", "path": "python/operator.html#operator.lt", "desc": "在a和b之间执行“丰富比较”" }, { "name": "operator.not_", "type": "operator", "path": "python/operator.html#operator.not_", "desc": "返回not obj" }, { "name": "operator.truth", "type": "operator", "path": "python/operator.html#operator.truth", "desc": "如果obj为真，则返回True，否则返回False" }, { "name": "operator.is_", "type": "operator", "path": "python/operator.html#operator.is_", "desc": "返回a 是 b" }, { "name": "operator.is_not", "type": "operator", "path": "python/operator.html#operator.is_not", "desc": "返回a 是 不是 b" }, { "name": "operator.abs", "type": "operator", "path": "python/operator.html#operator.abs", "desc": "返回obj的绝对值" }, { "name": "operator.add", "type": "operator", "path": "python/operator.html#operator.add", "desc": "返回a + b，对于a和b  t5 >数字" }, { "name": "operator.and_", "type": "operator", "path": "python/operator.html#operator.and_", "desc": "返回按位和a和b" }, { "name": "operator.floordiv", "type": "operator", "path": "python/operator.html#operator.floordiv", "desc": "返回a // b" }, { "name": "operator.index", "type": "operator", "path": "python/operator.html#operator.index", "desc": "返回a转换为整数" }, { "name": "operator.inv", "type": "operator", "path": "python/operator.html#operator.inv", "desc": "返回数字obj的按位逆" }, { "name": "operator.lshift", "type": "operator", "path": "python/operator.html#operator.lshift", "desc": "返回a向左移动b" }, { "name": "operator.mod", "type": "operator", "path": "python/operator.html#operator.mod", "desc": "返回a ％ b" }, { "name": "operator.mul", "type": "operator", "path": "python/operator.html#operator.mul", "desc": "返回a * b，对于a和b  t5 >数字" }, { "name": "operator.matmul", "type": "operator", "path": "python/operator.html#operator.matmul", "desc": "返回a @ b" }, { "name": "operator.neg", "type": "operator", "path": "python/operator.html#operator.neg", "desc": "返回obj否定（-obj）" }, { "name": "operator.or_", "type": "operator", "path": "python/operator.html#operator.or_", "desc": "返回按位或a和b" }, { "name": "operator.pos", "type": "operator", "path": "python/operator.html#operator.pos", "desc": "返回obj正（+obj）" }, { "name": "operator.pow", "type": "operator", "path": "python/operator.html#operator.pow", "desc": "对于a和b，返回a ** b t5>数字" }, { "name": "operator.rshift", "type": "operator", "path": "python/operator.html#operator.rshift", "desc": "返回a向右移动b" }, { "name": "operator.sub", "type": "operator", "path": "python/operator.html#operator.sub", "desc": "返回a  -  b" }, { "name": "operator.truediv", "type": "operator", "path": "python/operator.html#operator.truediv", "desc": "返回a / b其中2/3为" }, { "name": "operator.xor", "type": "operator", "path": "python/operator.html#operator.xor", "desc": "返回a和b的逐位异或" }, { "name": "operator.concat", "type": "operator", "path": "python/operator.html#operator.concat", "desc": "对于a和b返回a + b序列" }, { "name": "operator.contains", "type": "operator", "path": "python/operator.html#operator.contains", "desc": "返回 t> a中的测试结果b " }, { "name": "operator.countOf", "type": "operator", "path": "python/operator.html#operator.countOf", "desc": "返回a中b的出现次数" }, { "name": "operator.delitem", "type": "operator", "path": "python/operator.html#operator.delitem", "desc": "删除索引b处a的值" }, { "name": "operator.getitem", "type": "operator", "path": "python/operator.html#operator.getitem", "desc": "返回a在索引b的值" }, { "name": "operator.indexOf", "type": "operator", "path": "python/operator.html#operator.indexOf", "desc": "返回a中b的第一个出现的索引" }, { "name": "operator.setitem", "type": "operator", "path": "python/operator.html#operator.setitem", "desc": "将索引b处的a值设置为c" }, { "name": "operator.length_hint", "type": "operator", "path": "python/operator.html#operator.length_hint", "desc": "返回对象o的估计长度" }, { "name": "operator.attrgetter", "type": "operator", "path": "python/operator.html#operator.attrgetter", "desc": "返回从其操作数获取attr的可调用对象" }, { "name": "operator.itemgetter", "type": "operator", "path": "python/operator.html#operator.itemgetter", "desc": "返回使用操作数的__getitem__()方法从其操作数获取项的可调用对象" }, { "name": "operator.methodcaller", "type": "operator", "path": "python/operator.html#operator.methodcaller", "desc": "返回在其操作数上调用方法name的可调用对象" }, { "name": "operator.iadd", "type": "operator", "path": "python/operator.html#operator.iadd", "desc": "a = iadd(a, b) is equivalent to a += b" }, { "name": "operator.iand", "type": "operator", "path": "python/operator.html#operator.iand", "desc": "a = iand(a, b) is equivalent to a &= b" }, { "name": "operator.iconcat", "type": "operator", "path": "python/operator.html#operator.iconcat", "desc": "a = iconcat(a, b) is equivalent to a += b for a and b sequences" }, { "name": "operator.ifloordiv", "type": "operator", "path": "python/operator.html#operator.ifloordiv", "desc": "a = ifloordiv(a, b) is equivalent to a //= b" }, { "name": "operator.ilshift", "type": "operator", "path": "python/operator.html#operator.ilshift", "desc": "a = ilshift(a, b) is equivalent to a <<= b" }, { "name": "operator.imod", "type": "operator", "path": "python/operator.html#operator.imod", "desc": "a = imod(a, b) is equivalent to a %= b" }, { "name": "operator.imul", "type": "operator", "path": "python/operator.html#operator.imul", "desc": "a = imul(a, b) is equivalent to a *= b" }, { "name": "operator.imatmul", "type": "operator", "path": "python/operator.html#operator.imatmul", "desc": "a = imatmul(a, b) is equivalent to a @= b" }, { "name": "operator.ior", "type": "operator", "path": "python/operator.html#operator.ior", "desc": "a = ior(a, b) is equivalent to a |= b" }, { "name": "operator.ipow", "type": "operator", "path": "python/operator.html#operator.ipow", "desc": "a = ipow(a, b) is equivalent to a **= b" }, { "name": "operator.irshift", "type": "operator", "path": "python/operator.html#operator.irshift", "desc": "a = irshift(a, b) is equivalent to a >>= b" }, { "name": "operator.isub", "type": "operator", "path": "python/operator.html#operator.isub", "desc": "a = isub(a, b) is equivalent to a -= b" }, { "name": "operator.itruediv", "type": "operator", "path": "python/operator.html#operator.itruediv", "desc": "a = itruediv(a, b) is equivalent to a /= b" }, { "name": "operator.ixor", "type": "operator", "path": "python/operator.html#operator.ixor", "desc": "a = ixor(a, b) is equivalent to a ^= b" }, { "name": "os.ctermid", "type": "os", "path": "python/os.html#os.ctermid", "desc": "返回与进程的控制终端对应的文件名" }, { "name": "os.fsencode", "type": "os", "path": "python/os.html#os.fsencode", "desc": "在Windows上使用'surrogateescape'错误处理程序或'strict'编码文件名返回bytes不变" }, { "name": "os.fsdecode", "type": "os", "path": "python/os.html#os.fsdecode", "desc": "在Windows上使用'surrogateescape'错误处理程序或'strict'对文件系统进行解码filename返回str不变" }, { "name": "os.getenv", "type": "os", "path": "python/os.html#os.getenv", "desc": "如果它存在，则返回环境变量键的值；如果不存在，则返回默认值" }, { "name": "os.getenvb", "type": "os", "path": "python/os.html#os.getenvb", "desc": "如果它存在，则返回环境变量键的值；如果不存在，则返回默认值" }, { "name": "os.get_exec_path", "type": "os", "path": "python/os.html#os.get_exec_path", "desc": "在启动进程时，返回将搜索命名可执行文件的目录列表，类似于shell" }, { "name": "os.getegid", "type": "os", "path": "python/os.html#os.getegid", "desc": "返回当前进程的有效组标识" }, { "name": "os.geteuid", "type": "os", "path": "python/os.html#os.geteuid", "desc": "返回当前进程的有效用户标识" }, { "name": "os.getgid", "type": "os", "path": "python/os.html#os.getgid", "desc": "返回当前进程的实际组ID" }, { "name": "os.getgrouplist", "type": "os", "path": "python/os.html#os.getgrouplist", "desc": "返回user所属的组ID的列表" }, { "name": "os.getgroups", "type": "os", "path": "python/os.html#os.getgroups", "desc": "返回与当前进程关联的补充组标识的列表" }, { "name": "os.getlogin", "type": "os", "path": "python/os.html#os.getlogin", "desc": "Return the name of the user logged in on the controlling terminal of the process" }, { "name": "os.getpgid", "type": "os", "path": "python/os.html#os.getpgid", "desc": "用进程id pid返回进程的进程组ID" }, { "name": "os.getpgrp", "type": "os", "path": "python/os.html#os.getpgrp", "desc": "返回当前进程组的ID" }, { "name": "os.getpid", "type": "os", "path": "python/os.html#os.getpid", "desc": "返回当前进程id" }, { "name": "os.getppid", "type": "os", "path": "python/os.html#os.getppid", "desc": "返回父进程的进程ID" }, { "name": "os.getpriority", "type": "os", "path": "python/os.html#os.getpriority", "desc": "获取计划调度优先级" }, { "name": "os.getresuid", "type": "os", "path": "python/os.html#os.getresuid", "desc": "返回一个元组（ruid，euid，suid），表示当前进程的真实，有效和保存的用户id" }, { "name": "os.getresgid", "type": "os", "path": "python/os.html#os.getresgid", "desc": "返回一个元组（rgid，egid，sgid），表示当前进程的真实，有效和保存的组ID" }, { "name": "os.getuid", "type": "os", "path": "python/os.html#os.getuid", "desc": "返回当前进程的真实用户ID" }, { "name": "os.initgroups", "type": "os", "path": "python/os.html#os.initgroups", "desc": "调用系统initgroups()初始化组访问列表，其中包含指定用户名所属的所有组以及指定的组ID" }, { "name": "os.putenv", "type": "os", "path": "python/os.html#os.putenv", "desc": "将名为key的环境变量设置为字符串值" }, { "name": "os.setegid", "type": "os", "path": "python/os.html#os.setegid", "desc": "设置当前进程的有效组ID" }, { "name": "os.seteuid", "type": "os", "path": "python/os.html#os.seteuid", "desc": "设置当前进程的有效用户标识" }, { "name": "os.setgid", "type": "os", "path": "python/os.html#os.setgid", "desc": "设置当前进程的组ID" }, { "name": "os.setgroups", "type": "os", "path": "python/os.html#os.setgroups", "desc": "将与当前进程关联的补充组标识列表设置为组" }, { "name": "os.setpgrp", "type": "os", "path": "python/os.html#os.setpgrp", "desc": "根据所实现的版本，调用系统调用setpgrp()或setpgrp（0， 0）任何）" }, { "name": "os.setpgid", "type": "os", "path": "python/os.html#os.setpgid", "desc": "调用系统调用setpgid()将id为pid的进程的进程组id设置为id为pgrp的进程组" }, { "name": "os.setpriority", "type": "os", "path": "python/os.html#os.setpriority", "desc": "设置节目安排优先级" }, { "name": "os.setregid", "type": "os", "path": "python/os.html#os.setregid", "desc": "设置当前进程的真实和有效的组ID" }, { "name": "os.setresgid", "type": "os", "path": "python/os.html#os.setresgid", "desc": "设置当前进程的真实，有效和保存的组ID" }, { "name": "os.setresuid", "type": "os", "path": "python/os.html#os.setresuid", "desc": "设置当前进程的真实，有效和保存的用户标识" }, { "name": "os.setreuid", "type": "os", "path": "python/os.html#os.setreuid", "desc": "设置当前进程的真实和有效的用户ID" }, { "name": "os.getsid", "type": "os", "path": "python/os.html#os.getsid", "desc": "调用系统调用getsid()" }, { "name": "os.setsid", "type": "os", "path": "python/os.html#os.setsid", "desc": "调用系统调用setsid()" }, { "name": "os.setuid", "type": "os", "path": "python/os.html#os.setuid", "desc": "设置当前进程的用户标识" }, { "name": "os.strerror", "type": "os", "path": "python/os.html#os.strerror", "desc": "返回代码中与错误代码对应的错误消息" }, { "name": "os.umask", "type": "os", "path": "python/os.html#os.umask", "desc": "设置当前的数字umask并返回先前的umask" }, { "name": "os.uname", "type": "os", "path": "python/os.html#os.uname", "desc": "返回标识当前操作系统的信息" }, { "name": "os.unsetenv", "type": "os", "path": "python/os.html#os.unsetenv", "desc": "取消设置（删除）名为键的环境变量" }, { "name": "os.fdopen", "type": "os", "path": "python/os.html#os.fdopen", "desc": "返回连接到文件描述符fd的打开文件对象" }, { "name": "os.close", "type": "os", "path": "python/os.html#os.close", "desc": "关闭文件描述符fd" }, { "name": "os.closerange", "type": "os", "path": "python/os.html#os.closerange", "desc": "将所有文件描述符从fd_low（包括）关闭到fd_high（不包括），忽略错误" }, { "name": "os.device_encoding", "type": "os", "path": "python/os.html#os.device_encoding", "desc": "如果连接到终端，则返回描述与fd关联的设备的编码的字符串；否则返回None" }, { "name": "os.dup", "type": "os", "path": "python/os.html#os.dup", "desc": "返回文件描述符fd的副本" }, { "name": "os.dup2", "type": "os", "path": "python/os.html#os.dup2", "desc": "复制文件描述符fd到fd2，必要时关闭后者" }, { "name": "os.fchmod", "type": "os", "path": "python/os.html#os.fchmod", "desc": "将由fd给出的文件模式更改为数字模式" }, { "name": "os.fchown", "type": "os", "path": "python/os.html#os.fchown", "desc": "将由fd给出的文件的所有者和组标识更改为数字uid和gid" }, { "name": "os.fdatasync", "type": "os", "path": "python/os.html#os.fdatasync", "desc": "用filedescriptor fd强制将文件写入磁盘" }, { "name": "os.fpathconf", "type": "os", "path": "python/os.html#os.fpathconf", "desc": "返回与打开文件相关的系统配置信息" }, { "name": "os.fstat", "type": "os", "path": "python/os.html#os.fstat", "desc": "获取文件描述符fd的状态" }, { "name": "os.fstatvfs", "type": "os", "path": "python/os.html#os.fstatvfs", "desc": "返回包含与文件描述符fd关联的文件的文件系统的信息，如statvfs()" }, { "name": "os.fsync", "type": "os", "path": "python/os.html#os.fsync", "desc": "用filedescriptor fd强制将文件写入磁盘" }, { "name": "os.ftruncate", "type": "os", "path": "python/os.html#os.ftruncate", "desc": "截断与文件描述符fd相对应的文件，以便它的大小最多为长度个字节" }, { "name": "os.get_blocking", "type": "os", "path": "python/os.html#os.get_blocking", "desc": "获取文件描述符的阻塞模式：False如果O_NONBLOCK标志被设置，True如果标志被清除" }, { "name": "os.isatty", "type": "os", "path": "python/os.html#os.isatty", "desc": "如果文件描述符fd打开并连接到类似tty（-like）的设备，则返回True，否则False" }, { "name": "os.lockf", "type": "os", "path": "python/os.html#os.lockf", "desc": "在打开的文件描述符上应用，测试或移除POSIX锁" }, { "name": "os.lseek", "type": "os", "path": "python/os.html#os.lseek", "desc": "Set the current position of file descriptor fd to position pos, modified by how: SEEK_SET or 0 to set the position relative to the beginning of the file; SEEK_CUR or 1 to set it relative to the current position; SEEK_END or 2 to set it relative to the end of the file" }, { "name": "os.open", "type": "os", "path": "python/os.html#os.open", "desc": "根据flags打开文件path，并根据mode设置不同的标志" }, { "name": "os.openpty", "type": "os", "path": "python/os.html#os.openpty", "desc": "打开一个新的伪终端对" }, { "name": "os.pipe", "type": "os", "path": "python/os.html#os.pipe", "desc": "创建一个管道" }, { "name": "os.pipe2", "type": "os", "path": "python/os.html#os.pipe2", "desc": "使用flags自动设置一个管道" }, { "name": "os.posix_fallocate", "type": "os", "path": "python/os.html#os.posix_fallocate", "desc": "确保为fd指定的文件分配足够的磁盘空间，该文件从offset开始并继续处理len字节" }, { "name": "os.posix_fadvise", "type": "os", "path": "python/os.html#os.posix_fadvise", "desc": "宣布打算以特定模式访问数据，从而允许内核进行优化" }, { "name": "os.pread", "type": "os", "path": "python/os.html#os.pread", "desc": "从文件描述符fd中读取offset位置处的文件描述符" }, { "name": "os.pwrite", "type": "os", "path": "python/os.html#os.pwrite", "desc": "将bytestring从offset写入文件描述符fd，使文件偏移保持不变" }, { "name": "os.read", "type": "os", "path": "python/os.html#os.read", "desc": "从文件描述符fd中最多读取n个字节" }, { "name": "os.sendfile", "type": "os", "path": "python/os.html#os.sendfile", "desc": "从offset开始，将count字节从中的文件描述符复制到文件描述符out" }, { "name": "os.set_blocking", "type": "os", "path": "python/os.html#os.set_blocking", "desc": "设置指定文件描述符的阻止模式" }, { "name": "os.readv", "type": "os", "path": "python/os.html#os.readv", "desc": "从文件描述符fd中读入多个可变的bytes-like objects 缓冲区" }, { "name": "os.tcgetpgrp", "type": "os", "path": "python/os.html#os.tcgetpgrp", "desc": "返回由fd（由os" }, { "name": "os.tcsetpgrp", "type": "os", "path": "python/os.html#os.tcsetpgrp", "desc": "将与由fd（由os" }, { "name": "os.ttyname", "type": "os", "path": "python/os.html#os.ttyname", "desc": "返回一个字符串，它指定与文件描述符fd关联的终端设备" }, { "name": "os.write", "type": "os", "path": "python/os.html#os.write", "desc": "将str中的字节串写入文件描述符fd" }, { "name": "os.writev", "type": "os", "path": "python/os.html#os.writev", "desc": "将buffers的内容写入文件描述符fd" }, { "name": "os.get_terminal_size", "type": "os", "path": "python/os.html#os.get_terminal_size", "desc": "以（列， 行），terminal_size类型的元组的形式返回终端窗口的大小" }, { "name": "os.get_inheritable", "type": "os", "path": "python/os.html#os.get_inheritable", "desc": "获取指定文件描述符的“可继承”标志（布尔值）" }, { "name": "os.set_inheritable", "type": "os", "path": "python/os.html#os.set_inheritable", "desc": "设置指定文件描述符的“可继承”标志" }, { "name": "os.get_handle_inheritable", "type": "os", "path": "python/os.html#os.get_handle_inheritable", "desc": "获取指定句柄的“可继承”标志（布尔值）" }, { "name": "os.set_handle_inheritable", "type": "os", "path": "python/os.html#os.set_handle_inheritable", "desc": "设置指定句柄的“可继承”标志" }, { "name": "os.access", "type": "os", "path": "python/os.html#os.access", "desc": "使用real uid / gid来测试对路径的访问" }, { "name": "os.chdir", "type": "os", "path": "python/os.html#os.chdir", "desc": "将当前工作目录更改为路径" }, { "name": "os.chflags", "type": "os", "path": "python/os.html#os.chflags", "desc": "将路径的标志设置为数字标志" }, { "name": "os.chmod", "type": "os", "path": "python/os.html#os.chmod", "desc": "将路径的模式更改为数字模式" }, { "name": "os.chown", "type": "os", "path": "python/os.html#os.chown", "desc": "将path的所有者和组标识更改为数字uid和gid" }, { "name": "os.chroot", "type": "os", "path": "python/os.html#os.chroot", "desc": "将当前进程的根目录更改为路径" }, { "name": "os.fchdir", "type": "os", "path": "python/os.html#os.fchdir", "desc": "将当前工作目录更改为由文件描述符fd表示的目录" }, { "name": "os.getcwd", "type": "os", "path": "python/os.html#os.getcwd", "desc": "返回表示当前工作目录的字符串" }, { "name": "os.getcwdb", "type": "os", "path": "python/os.html#os.getcwdb", "desc": "返回表示当前工作目录的字符串" }, { "name": "os.lchflags", "type": "os", "path": "python/os.html#os.lchflags", "desc": "将path的标志设置为数字标志，如chflags()，但不要遵循符号链接" }, { "name": "os.lchmod", "type": "os", "path": "python/os.html#os.lchmod", "desc": "将路径的模式更改为数字模式" }, { "name": "os.lchown", "type": "os", "path": "python/os.html#os.lchown", "desc": "将path的所有者和组标识更改为数字uid和gid" }, { "name": "os.link", "type": "os", "path": "python/os.html#os.link", "desc": "Create a hard link pointing to src named dst" }, { "name": "os.listdir", "type": "os", "path": "python/os.html#os.listdir", "desc": "返回一个list，包含给定path 目录下所有条目的名字" }, { "name": "os.lstat", "type": "os", "path": "python/os.html#os.lstat", "desc": "在给定路径上执行与lstat()系统调用等价的操作" }, { "name": "os.mkdir", "type": "os", "path": "python/os.html#os.mkdir", "desc": "创建一个名称为path的目录，模式为mode" }, { "name": "os.makedirs", "type": "os", "path": "python/os.html#os.makedirs", "desc": "递归创建目录的函数" }, { "name": "os.mkfifo", "type": "os", "path": "python/os.html#os.mkfifo", "desc": "使用数字模式模式创建名为path的FIFO（命名管道）" }, { "name": "os.mknod", "type": "os", "path": "python/os.html#os.mknod", "desc": "创建一个名为path的文件系统节点（文件，设备专用文件或命名管道）" }, { "name": "os.major", "type": "os", "path": "python/os.html#os.major", "desc": "从原始设备编号（通常是stat中的st_dev或st_rdev字段）中提取设备主编号" }, { "name": "os.minor", "type": "os", "path": "python/os.html#os.minor", "desc": "从原始设备编号（通常是stat中的st_dev或st_rdev字段）中提取设备次要编号" }, { "name": "os.makedev", "type": "os", "path": "python/os.html#os.makedev", "desc": "从主要和次要设备编号构成原始设备编号" }, { "name": "os.pathconf", "type": "os", "path": "python/os.html#os.pathconf", "desc": "返回与指定文件相关的系统配置信息" }, { "name": "os.readlink", "type": "os", "path": "python/os.html#os.readlink", "desc": "返回表示符号链接指向的路径的字符串" }, { "name": "os.remove", "type": "os", "path": "python/os.html#os.remove", "desc": "删除（删除）文件路径" }, { "name": "os.removedirs", "type": "os", "path": "python/os.html#os.removedirs", "desc": "递归地删除目录" }, { "name": "os.rename", "type": "os", "path": "python/os.html#os.rename", "desc": "将文件或目录src重命名为dst" }, { "name": "os.renames", "type": "os", "path": "python/os.html#os.renames", "desc": "重命名函数递归处理目录或文件，像rename()一样工作，除了首先尝试创建新路径名所需的任何中间目录之外" }, { "name": "os.replace", "type": "os", "path": "python/os.html#os.replace", "desc": "将文件或目录src重命名为dst" }, { "name": "os.rmdir", "type": "os", "path": "python/os.html#os.rmdir", "desc": "删除（删除）目录路径" }, { "name": "os.scandir", "type": "os", "path": "python/os.html#os.scandir", "desc": "返回与path给出的目录条目对应的DirEntry对象的迭代器" }, { "name": "os.stat", "type": "os", "path": "python/os.html#os.stat", "desc": "获取文件或文件描述符的状态" }, { "name": "os.stat_float_times", "type": "os", "path": "python/os.html#os.stat_float_times", "desc": "确定stat_result是否将时间戳记表示为浮动对象" }, { "name": "os.statvfs", "type": "os", "path": "python/os.html#os.statvfs", "desc": "在给定路径上执行statvfs()系统调用" }, { "name": "os.symlink", "type": "os", "path": "python/os.html#os.symlink", "desc": "创建一个指向名为dst的src的符号链接" }, { "name": "os.sync", "type": "os", "path": "python/os.html#os.sync", "desc": "强制将所有内容写入磁盘" }, { "name": "os.truncate", "type": "os", "path": "python/os.html#os.truncate", "desc": "截断与路径对应的文件，以便它的大小至多为长度字节" }, { "name": "os.unlink", "type": "os", "path": "python/os.html#os.unlink", "desc": "删除（删除）文件路径" }, { "name": "os.utime", "type": "os", "path": "python/os.html#os.utime", "desc": "设置由path指定的文件的访问和修改时间" }, { "name": "os.walk", "type": "os", "path": "python/os.html#os.walk", "desc": "遍历目录树，自顶向下或自底向上生成目录树下的文件名" }, { "name": "os.fwalk", "type": "os", "path": "python/os.html#os.fwalk", "desc": "行为与walk()非常类似，不同的是它产生一个4元组(dirpath, dirnames, filenames, dirfd)，并支持dir_fd" }, { "name": "os.getxattr", "type": "os", "path": "python/os.html#os.getxattr", "desc": "为路径返回扩展文件系统属性属性的值" }, { "name": "os.listxattr", "type": "os", "path": "python/os.html#os.listxattr", "desc": "返回路径上的扩展文件系统属性列表" }, { "name": "os.removexattr", "type": "os", "path": "python/os.html#os.removexattr", "desc": "从路径中删除扩展文件系统属性属性" }, { "name": "os.setxattr", "type": "os", "path": "python/os.html#os.setxattr", "desc": "将路径上的扩展文件系统属性属性设置为值" }, { "name": "os.abort", "type": "os", "path": "python/os.html#os.abort", "desc": "生成一个SIGABRT信号给当前进程" }, { "name": "os.execl", "type": "os", "path": "python/os.html#os.execl", "desc": "这些功能都执行一个新程序，取代当前进程；他们不回来" }, { "name": "os._exit", "type": "os", "path": "python/os.html#os._exit", "desc": "状态n退出进程，无需调用清理处理程序，刷新stdio缓冲区等" }, { "name": "os.fork", "type": "os", "path": "python/os.html#os.fork", "desc": "叉一个孩子的过程" }, { "name": "os.forkpty", "type": "os", "path": "python/os.html#os.forkpty", "desc": "用一个新的伪终端作为孩子的控制终端，把一个子进程分叉开来" }, { "name": "os.kill", "type": "os", "path": "python/os.html#os.kill", "desc": "发送信号sig到进程pid" }, { "name": "os.killpg", "type": "os", "path": "python/os.html#os.killpg", "desc": "Send the signal sig to the process group pgid" }, { "name": "os.nice", "type": "os", "path": "python/os.html#os.nice", "desc": "将increment添加到进程的“niceness”中" }, { "name": "os.plock", "type": "os", "path": "python/os.html#os.plock", "desc": "将程序段锁定到内存中" }, { "name": "os.popen", "type": "os", "path": "python/os.html#os.popen", "desc": "从命令cmd打开管道" }, { "name": "os.spawnl", "type": "os", "path": "python/os.html#os.spawnl", "desc": "在新进程中执行程序路径" }, { "name": "os.startfile", "type": "os", "path": "python/os.html#os.startfile", "desc": "用相关的应用程序启动一个文件" }, { "name": "os.system", "type": "os", "path": "python/os.html#os.system", "desc": "在子shell中执行命令（一个字符串）" }, { "name": "os.times", "type": "os", "path": "python/os.html#os.times", "desc": "返回当前的全局流程时间" }, { "name": "os.wait", "type": "os", "path": "python/os.html#os.wait", "desc": "等待子进程完成，并返回一个包含它的pid和退出状态指示的元组：一个16位数字，其低字节是杀死进程的信号编号，其高字节是退出状态（如果信号数字为零）；如果生成核心文件，则设置低字节的高位" }, { "name": "os.waitid", "type": "os", "path": "python/os.html#os.waitid", "desc": "等待一个或多个子进程的完成" }, { "name": "os.waitpid", "type": "os", "path": "python/os.html#os.waitpid", "desc": "这个功能的细节在Unix和Windows上有所不同" }, { "name": "os.wait3", "type": "os", "path": "python/os.html#os.wait3", "desc": "类似于waitpid()，除了没有给出进程ID参数并且返回包含子进程ID，退出状态指示和资源使用信息的3元素元组" }, { "name": "os.wait4", "type": "os", "path": "python/os.html#os.wait4", "desc": "类似于waitpid()，除了包含子进程ID，退出状态指示和资源使用信息的3元素元组之外，它被返回" }, { "name": "os.WCOREDUMP", "type": "os", "path": "python/os.html#os.WCOREDUMP", "desc": "如果为进程生成核心转储，则返回True，否则返回False" }, { "name": "os.WIFCONTINUED", "type": "os", "path": "python/os.html#os.WIFCONTINUED", "desc": "如果进程从作业控制停止继续，则返回True，否则返回False" }, { "name": "os.WIFSTOPPED", "type": "os", "path": "python/os.html#os.WIFSTOPPED", "desc": "如果进程已停止，则返回True，否则返回False" }, { "name": "os.WIFSIGNALED", "type": "os", "path": "python/os.html#os.WIFSIGNALED", "desc": "如果进程由于信号而退出，则返回True，否则返回False" }, { "name": "os.WIFEXITED", "type": "os", "path": "python/os.html#os.WIFEXITED", "desc": "如果进程使用exit（2）系统调用退出，则返回True，否则返回False" }, { "name": "os.WEXITSTATUS", "type": "os", "path": "python/os.html#os.WEXITSTATUS", "desc": "如果WIFEXITED(status)为true，则返回整型参数到exit（2）系统调用" }, { "name": "os.WSTOPSIG", "type": "os", "path": "python/os.html#os.WSTOPSIG", "desc": "返回导致进程停止的信号" }, { "name": "os.WTERMSIG", "type": "os", "path": "python/os.html#os.WTERMSIG", "desc": "返回导致进程退出的信号" }, { "name": "os.sched_get_priority_min", "type": "os", "path": "python/os.html#os.sched_get_priority_min", "desc": "获取策略的最低优先级值" }, { "name": "os.sched_get_priority_max", "type": "os", "path": "python/os.html#os.sched_get_priority_max", "desc": "获取策略的最大优先级值" }, { "name": "os.sched_setscheduler", "type": "os", "path": "python/os.html#os.sched_setscheduler", "desc": "使用PID pid设置进程的调度策略" }, { "name": "os.sched_getscheduler", "type": "os", "path": "python/os.html#os.sched_getscheduler", "desc": "用PID pid返回进程的调度策略" }, { "name": "os.sched_setparam", "type": "os", "path": "python/os.html#os.sched_setparam", "desc": "使用PID pid为进程设置调度参数" }, { "name": "os.sched_getparam", "type": "os", "path": "python/os.html#os.sched_getparam", "desc": "将具有PID pid的进程的调度参数作为sched_param实例返回" }, { "name": "os.sched_rr_get_interval", "type": "os", "path": "python/os.html#os.sched_rr_get_interval", "desc": "用PID pid返回循环过程的秒数" }, { "name": "os.sched_yield", "type": "os", "path": "python/os.html#os.sched_yield", "desc": "自愿放弃CPU" }, { "name": "os.sched_setaffinity", "type": "os", "path": "python/os.html#os.sched_setaffinity", "desc": "用PID pid（或当前进程，如果为零）限制进程到一组CPU" }, { "name": "os.sched_getaffinity", "type": "os", "path": "python/os.html#os.sched_getaffinity", "desc": "返回具有PID pid（或当前过程，如果为零）的过程的CPU集合限制为" }, { "name": "os.confstr", "type": "os", "path": "python/os.html#os.confstr", "desc": "返回字符串值的系统配置值" }, { "name": "os.cpu_count", "type": "os", "path": "python/os.html#os.cpu_count", "desc": "返回系统中的CPU数量" }, { "name": "os.getloadavg", "type": "os", "path": "python/os.html#os.getloadavg", "desc": "如果无法获得负载平均值，则返回系统运行队列中过去1分钟，5分钟和15分钟内平均的进程数量或引发OSError" }, { "name": "os.sysconf", "type": "os", "path": "python/os.html#os.sysconf", "desc": "返回整数值的系统配置值" }, { "name": "os.urandom", "type": "os", "path": "python/os.html#os.urandom", "desc": "返回n个字节的用以加密的随机字符串" }, { "name": "os.name", "type": "os", "path": "python/os.html#os.name", "desc": "导入的操作系统相关模块的名称" }, { "name": "os.environ", "type": "os", "path": "python/os.html#os.environ", "desc": "表示字符串环境的mapping对象" }, { "name": "os.environb", "type": "os", "path": "python/os.html#os.environb", "desc": "字节版本的environ：表示环境为字节字符串的mapping对象" }, { "name": "os.PRIO_PROCESS", "type": "os", "path": "python/os.html#os.PRIO_PROCESS", "desc": "getpriority()和setpriority()函数的参数" }, { "name": "os.supports_bytes_environ", "type": "os", "path": "python/os.html#os.supports_bytes_environ", "desc": "TrueFalse在Windows上）" }, { "name": "os.F_LOCK", "type": "os", "path": "python/os.html#os.F_LOCK", "desc": "指定lockf()执行什么操作的标志" }, { "name": "os.SEEK_SET", "type": "os", "path": "python/os.html#os.SEEK_SET", "desc": "lseek()函数的参数" }, { "name": "os.O_RDONLY", "type": "os", "path": "python/os.html#os.O_RDONLY", "desc": "这些常量在Unix和Windows上可用" }, { "name": "os.O_DSYNC", "type": "os", "path": "python/os.html#os.O_DSYNC", "desc": "这些常量仅在Unix上可用" }, { "name": "os.O_BINARY", "type": "os", "path": "python/os.html#os.O_BINARY", "desc": "这些常量仅在Windows上可用" }, { "name": "os.O_ASYNC", "type": "os", "path": "python/os.html#os.O_ASYNC", "desc": "这些常量是GNU扩展，如果它们没有被C库定义则不存在" }, { "name": "os.POSIX_FADV_NORMAL", "type": "os", "path": "python/os.html#os.POSIX_FADV_NORMAL", "desc": "可以在posix_fadvise()的advice中使用的标志指定可能使用的访问模式" }, { "name": "os.SF_NODISKIO", "type": "os", "path": "python/os.html#os.SF_NODISKIO", "desc": "sendfile()函数的参数，如果实现支持它们的话" }, { "name": "os.F_OK", "type": "os", "path": "python/os.html#os.F_OK", "desc": "作为access()的mode参数传递的值分别用于测试path的存在性，可读性，可写性和可执行性" }, { "name": "os.pathconf_names", "type": "os", "path": "python/os.html#os.pathconf_names", "desc": "将由pathconf()和fpathconf()接受的字典映射名称转换为主机操作系统为这些名称定义的整数值" }, { "name": "os.supports_dir_fd", "type": "os", "path": "python/os.html#os.supports_dir_fd", "desc": "Set对象指示os模块中的哪些函数允许使用它们的dir_fd参数" }, { "name": "os.supports_effective_ids", "type": "os", "path": "python/os.html#os.supports_effective_ids", "desc": "指示os模块中的哪些函数允许os" }, { "name": "os.supports_fd", "type": "os", "path": "python/os.html#os.supports_fd", "desc": "Set对象指示os模块中的哪些函数允许将路径参数指定为打开的文件描述符" }, { "name": "os.supports_follow_symlinks", "type": "os", "path": "python/os.html#os.supports_follow_symlinks", "desc": "Set对象指示os模块中的哪些函数允许使用它们的follow_symlinks参数" }, { "name": "os.XATTR_SIZE_MAX", "type": "os", "path": "python/os.html#os.XATTR_SIZE_MAX", "desc": "扩展属性值的最大大小可以是" }, { "name": "os.XATTR_CREATE", "type": "os", "path": "python/os.html#os.XATTR_CREATE", "desc": "这是setxattr()中flags参数的可能值" }, { "name": "os.XATTR_REPLACE", "type": "os", "path": "python/os.html#os.XATTR_REPLACE", "desc": "这是setxattr()中flags参数的可能值" }, { "name": "os.EX_OK", "type": "os", "path": "python/os.html#os.EX_OK", "desc": "退出代码意味着没有发生错误" }, { "name": "os.EX_USAGE", "type": "os", "path": "python/os.html#os.EX_USAGE", "desc": "退出代码意味着命令被错误地使用，例如给出错误的参数数量" }, { "name": "os.EX_DATAERR", "type": "os", "path": "python/os.html#os.EX_DATAERR", "desc": "退出代码意味着输入数据不正确" }, { "name": "os.EX_NOINPUT", "type": "os", "path": "python/os.html#os.EX_NOINPUT", "desc": "退出代码意味着输入文件不存在或不可读" }, { "name": "os.EX_NOUSER", "type": "os", "path": "python/os.html#os.EX_NOUSER", "desc": "退出代码，意味着指定的用户不存在" }, { "name": "os.EX_NOHOST", "type": "os", "path": "python/os.html#os.EX_NOHOST", "desc": "退出代码，意味着指定的主机不存在" }, { "name": "os.EX_UNAVAILABLE", "type": "os", "path": "python/os.html#os.EX_UNAVAILABLE", "desc": "退出代码，这意味着所需的服务不可用" }, { "name": "os.EX_SOFTWARE", "type": "os", "path": "python/os.html#os.EX_SOFTWARE", "desc": "退出代码意味着检测到内部软件错误" }, { "name": "os.EX_OSERR", "type": "os", "path": "python/os.html#os.EX_OSERR", "desc": "退出代码意味着检测到操作系统错误，例如无法分叉或创建管道" }, { "name": "os.EX_OSFILE", "type": "os", "path": "python/os.html#os.EX_OSFILE", "desc": "退出代码意味着某些系统文件不存在，无法打开或出现其他类型的错误" }, { "name": "os.EX_CANTCREAT", "type": "os", "path": "python/os.html#os.EX_CANTCREAT", "desc": "退出代码意味着无法创建用户指定的输出文件" }, { "name": "os.EX_IOERR", "type": "os", "path": "python/os.html#os.EX_IOERR", "desc": "退出代码意味着在某个文件上执行I / O时发生错误" }, { "name": "os.EX_TEMPFAIL", "type": "os", "path": "python/os.html#os.EX_TEMPFAIL", "desc": "退出代码意味着发生了临时故障" }, { "name": "os.EX_PROTOCOL", "type": "os", "path": "python/os.html#os.EX_PROTOCOL", "desc": "退出代码意味着协议交换是非法的，无效的或不被理解的" }, { "name": "os.EX_NOPERM", "type": "os", "path": "python/os.html#os.EX_NOPERM", "desc": "退出代码意味着没有足够的权限执行操作（但不适用于文件系统问题）" }, { "name": "os.EX_CONFIG", "type": "os", "path": "python/os.html#os.EX_CONFIG", "desc": "退出代码意味着发生某种配置错误" }, { "name": "os.EX_NOTFOUND", "type": "os", "path": "python/os.html#os.EX_NOTFOUND", "desc": "退出代码意味着类似“未找到条目”" }, { "name": "os.P_NOWAIT", "type": "os", "path": "python/os.html#os.P_NOWAIT", "desc": "spawn*系列函数的mode参数的可能值" }, { "name": "os.P_WAIT", "type": "os", "path": "python/os.html#os.P_WAIT", "desc": "spawn*系列函数的模式参数的可能值" }, { "name": "os.P_DETACH", "type": "os", "path": "python/os.html#os.P_DETACH", "desc": "spawn*系列函数的mode参数的可能值" }, { "name": "os.P_PID", "type": "os", "path": "python/os.html#os.P_PID", "desc": "这些是waitid()中idtype的可能值" }, { "name": "os.WEXITED", "type": "os", "path": "python/os.html#os.WEXITED", "desc": "可以在waitid()的options中使用的标志指定要等待的子信号" }, { "name": "os.CLD_EXITED", "type": "os", "path": "python/os.html#os.CLD_EXITED", "desc": "这些是由waitid()返回的结果中si_code的可能值" }, { "name": "os.WNOHANG", "type": "os", "path": "python/os.html#os.WNOHANG", "desc": "如果没有子进程状态立即可用，waitpid()选项立即返回" }, { "name": "os.WCONTINUED", "type": "os", "path": "python/os.html#os.WCONTINUED", "desc": "此选项会导致子进程在自上次报告状态后已从作业控制停止继续进行报告" }, { "name": "os.WUNTRACED", "type": "os", "path": "python/os.html#os.WUNTRACED", "desc": "这个选项会导致子进程被报告，如果它们已经被停止，但是它们的当前状态自停止以来还没有被报告" }, { "name": "os.SCHED_OTHER", "type": "os", "path": "python/os.html#os.SCHED_OTHER", "desc": "默认调度策略" }, { "name": "os.SCHED_BATCH", "type": "os", "path": "python/os.html#os.SCHED_BATCH", "desc": "为尝试保留计算机其余部分的交互性的CPU密集型进程调度策略" }, { "name": "os.SCHED_IDLE", "type": "os", "path": "python/os.html#os.SCHED_IDLE", "desc": "为极低优先级的后台任务调度策略" }, { "name": "os.SCHED_SPORADIC", "type": "os", "path": "python/os.html#os.SCHED_SPORADIC", "desc": "针对零星服务器程序的调度策略" }, { "name": "os.SCHED_FIFO", "type": "os", "path": "python/os.html#os.SCHED_FIFO", "desc": "先进先出调度策略" }, { "name": "os.SCHED_RR", "type": "os", "path": "python/os.html#os.SCHED_RR", "desc": "循环调度策略" }, { "name": "os.SCHED_RESET_ON_FORK", "type": "os", "path": "python/os.html#os.SCHED_RESET_ON_FORK", "desc": "该标志可以与任何其他调度策略进行或运算" }, { "name": "os.confstr_names", "type": "os", "path": "python/os.html#os.confstr_names", "desc": "由confstr()接受的字典映射名称与主机操作系统为这些名称定义的整数值" }, { "name": "os.sysconf_names", "type": "os", "path": "python/os.html#os.sysconf_names", "desc": "由sysconf()接受的字典映射名称与主机操作系统为这些名称定义的整数值" }, { "name": "os.curdir", "type": "os", "path": "python/os.html#os.curdir", "desc": "操作系统用来引用当前目录的常量字符串" }, { "name": "os.pardir", "type": "os", "path": "python/os.html#os.pardir", "desc": "操作系统用来引用父目录的常量字符串" }, { "name": "os.sep", "type": "os", "path": "python/os.html#os.sep", "desc": "操作系统用来分隔路径名组件的字符" }, { "name": "os.altsep", "type": "os", "path": "python/os.html#os.altsep", "desc": "操作系统用来分隔路径名组件的替代字符，或者如果只有一个分隔符字符，则None" }, { "name": "os.extsep", "type": "os", "path": "python/os.html#os.extsep", "desc": "将基本文件名与扩展名分开的字符；例如，'" }, { "name": "os.pathsep", "type": "os", "path": "python/os.html#os.pathsep", "desc": "The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows" }, { "name": "os.defpath", "type": "os", "path": "python/os.html#os.defpath", "desc": "如果环境没有'PATH'键，exec*p*和spawn*p*使用的默认搜索路径" }, { "name": "os.linesep", "type": "os", "path": "python/os.html#os.linesep", "desc": "用于在当前平台上分隔（或相反，终止）行的字符串" }, { "name": "os.devnull", "type": "os", "path": "python/os.html#os.devnull", "desc": "空设备的文件路径" }, { "name": "os.RTLD_LAZY", "type": "os", "path": "python/os.html#os.RTLD_LAZY", "desc": "用于setdlopenflags()和getdlopenflags()函数的标志" }, { "name": "os.path.abspath", "type": "os.path", "path": "python/os.path.html#os.path.abspath", "desc": "返回一个标准的绝对路径名 path" }, { "name": "os.path.basename", "type": "os.path", "path": "python/os.path.html#os.path.basename", "desc": "返回路径名path的最后一级的名称" }, { "name": "os.path.commonpath", "type": "os.path", "path": "python/os.path.html#os.path.commonpath", "desc": "返回 paths参数中，所有路径序列中共有的最长的路径" }, { "name": "os.path.commonprefix", "type": "os.path", "path": "python/os.path.html#os.path.commonprefix", "desc": "返回列表中所有路径的前缀的最长路径前缀（逐个字符）" }, { "name": "os.path.dirname", "type": "os.path", "path": "python/os.path.html#os.path.dirname", "desc": "返回 path中的目录名" }, { "name": "os.path.exists", "type": "os.path", "path": "python/os.path.html#os.path.exists", "desc": "如果路径指向现有路径或打开的文件描述器，则返回True" }, { "name": "os.path.lexists", "type": "os.path", "path": "python/os.path.html#os.path.lexists", "desc": "如果 path 指向现有的路径，则返回 True" }, { "name": "os.path.expanduser", "type": "os.path", "path": "python/os.path.html#os.path.expanduser", "desc": "在Unix和Windows上，将参数中原始的~或~user部分用user主目录替换" }, { "name": "os.path.expandvars", "type": "os.path", "path": "python/os.path.html#os.path.expandvars", "desc": "返回参数，其中的环境变量被扩展" }, { "name": "os.path.getatime", "type": "os.path", "path": "python/os.path.html#os.path.getatime", "desc": "返回 path的上次访问时间" }, { "name": "os.path.getmtime", "type": "os.path", "path": "python/os.path.html#os.path.getmtime", "desc": "返回path的最后修改时间" }, { "name": "os.path.getctime", "type": "os.path", "path": "python/os.path.html#os.path.getctime", "desc": "返回系统的ctime，在某些系统（如Unix）上是最后元数据更改的时间，在其他系统（如Windows）上，是路径的创建时间" }, { "name": "os.path.getsize", "type": "os.path", "path": "python/os.path.html#os.path.getsize", "desc": "返回path的大小，以字节为单位" }, { "name": "os.path.isabs", "type": "os.path", "path": "python/os.path.html#os.path.isabs", "desc": "如果路径是绝对路径名，则返回True" }, { "name": "os.path.isfile", "type": "os.path", "path": "python/os.path.html#os.path.isfile", "desc": "如果路径是现有的常规文件，则返回True" }, { "name": "os.path.isdir", "type": "os.path", "path": "python/os.path.html#os.path.isdir", "desc": "如果文件是目录，则返回True" }, { "name": "os.path.islink", "type": "os.path", "path": "python/os.path.html#os.path.islink", "desc": "如果路径指的是符号链接的目录条目，则返回True" }, { "name": "os.path.ismount", "type": "os.path", "path": "python/os.path.html#os.path.ismount", "desc": "如果路径名路径是安装点，则返回True在POSIX上，函数检查路径的父节点，path/" }, { "name": "os.path.join", "type": "os.path", "path": "python/os.path.html#os.path.join", "desc": "将一个或多个路径正确地连接起来" }, { "name": "os.path.normcase", "type": "os.path", "path": "python/os.path.html#os.path.normcase", "desc": "标准化路径名的大小写" }, { "name": "os.path.normpath", "type": "os.path", "path": "python/os.path.html#os.path.normpath", "desc": "通过折叠冗余分隔符和上级引用来归一化路径名，以使A//B，A/B/，A/" }, { "name": "os.path.realpath", "type": "os.path", "path": "python/os.path.html#os.path.realpath", "desc": "返回指定的文件名的规范名字，并消除路径中遇到的任何符号链接（如果操作系统支持的话）" }, { "name": "os.path.relpath", "type": "os.path", "path": "python/os.path.html#os.path.relpath", "desc": "返回自当前目录或者可选的start 目录的 path相对文件路径" }, { "name": "os.path.samefile", "type": "os.path", "path": "python/os.path.html#os.path.samefile", "desc": "如果两个路径名参数都指向相同的文件或目录，则返回True" }, { "name": "os.path.sameopenfile", "type": "os.path", "path": "python/os.path.html#os.path.sameopenfile", "desc": "如果文件描述器fp1和fp2指向同一文件，则返回True" }, { "name": "os.path.samestat", "type": "os.path", "path": "python/os.path.html#os.path.samestat", "desc": "如果统计数据元组stat1和stat2指向同一文件，则返回True" }, { "name": "os.path.split", "type": "os.path", "path": "python/os.path.html#os.path.split", "desc": "将路径名path拆分为一个元组对(head, tail)，其中tail是路径名的最后一个部分，head是前面的所有内容" }, { "name": "os.path.splitdrive", "type": "os.path", "path": "python/os.path.html#os.path.splitdrive", "desc": "将路径名路径拆分为（drive， tail）其中drive为挂载点或空字符串" }, { "name": "os.path.splitext", "type": "os.path", "path": "python/os.path.html#os.path.splitext", "desc": "Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period" }, { "name": "os.path.splitunc", "type": "os.path", "path": "python/os.path.html#os.path.splitunc", "desc": "自3" }, { "name": "os.path.supports_unicode_filenames", "type": "os.path", "path": "python/os.path.html#os.path.supports_unicode_filenames", "desc": "True如果任意Unicode字符串可以用作文件名（在文件系统限制的限制之内）" }, { "name": "ossaudiodev.open", "type": "ossaudiodev", "path": "python/ossaudiodev.html#ossaudiodev.open", "desc": "打开音频设备并返回OSS音频设备对象" }, { "name": "ossaudiodev.openmixer", "type": "ossaudiodev", "path": "python/ossaudiodev.html#ossaudiodev.openmixer", "desc": "打开混音器设备并返回OSS混音器设备对象" }, { "name": "parser.expr", "type": "parser", "path": "python/parser.html#parser.expr", "desc": "expr()函数解析参数source，就像它是compile（source， 'file）的输入" }, { "name": "parser.suite", "type": "parser", "path": "python/parser.html#parser.suite", "desc": "suite()函数解析参数source，就像它是compile（source， 'file）的输入" }, { "name": "parser.sequence2st", "type": "parser", "path": "python/parser.html#parser.sequence2st", "desc": "此函数接受表示为序列的解析树，并在可能的情况下构建内部表示" }, { "name": "parser.tuple2st", "type": "parser", "path": "python/parser.html#parser.tuple2st", "desc": "这与sequence2st()具有相同的功能" }, { "name": "parser.st2list", "type": "parser", "path": "python/parser.html#parser.st2list", "desc": "此函数在st中接受来自调用者的ST对象，并返回表示等效解析树的Python列表" }, { "name": "parser.st2tuple", "type": "parser", "path": "python/parser.html#parser.st2tuple", "desc": "此函数在st中接受来自调用者的ST对象，并返回表示等效解析树的Python元组" }, { "name": "parser.compilest", "type": "parser", "path": "python/parser.html#parser.compilest", "desc": "Python字节编译器可以在ST对象上调用以产生代码对象，这些对象可以用作调用内建exec()或eval()函数的一部分" }, { "name": "parser.isexpr", "type": "parser", "path": "python/parser.html#parser.isexpr", "desc": "当st表示'eval'形式时，此函数返回true，否则返回false" }, { "name": "parser.issuite", "type": "parser", "path": "python/parser.html#parser.issuite", "desc": "此函数镜像isexpr()，因为它报告ST对象是否表示'exec'形式，通常称为“套件”" }, { "name": "parser.STType", "type": "parser", "path": "python/parser.html#parser.STType", "desc": "由expr()，suite()和sequence2st()返回的对象类型" }, { "name": "pathlib.PurePath.parts", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.parts", "desc": "可以访问路径各个组件的元组：" }, { "name": "pathlib.PurePath.drive", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.drive", "desc": "表示驱动器盘符或名称的字符串（如果有）：" }, { "name": "pathlib.PurePath.root", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.root", "desc": "表示（本地或全局）根（如果有）的字符串：" }, { "name": "pathlib.PurePath.anchor", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.anchor", "desc": "驱动器和根目录的连接：" }, { "name": "pathlib.PurePath.parents", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.parents", "desc": "提供对路径的逻辑祖先的访问的不可变序列：" }, { "name": "pathlib.PurePath.parent", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.parent", "desc": "路径的逻辑父代：" }, { "name": "pathlib.PurePath.name", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.name", "desc": "表示最终路径组件的字符串，不包括驱动器和根目录（如果有）：" }, { "name": "pathlib.PurePath.suffix", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.suffix", "desc": "最终组件的文件扩展名（如果有）：" }, { "name": "pathlib.PurePath.suffixes", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.suffixes", "desc": "路径的文件扩展名列表：" }, { "name": "pathlib.PurePath.stem", "type": "pathlib", "path": "python/pathlib.html#pathlib.PurePath.stem", "desc": "最终路径组件，不带其后缀：" }, { "name": "pdb.run", "type": "pdb", "path": "python/pdb.html#pdb.run", "desc": "在调试器控制下执行statement（作为字符串或代码对象）" }, { "name": "pdb.runeval", "type": "pdb", "path": "python/pdb.html#pdb.runeval", "desc": "在调试器控制下计算表达式（作为字符串或代码对象）" }, { "name": "pdb.runcall", "type": "pdb", "path": "python/pdb.html#pdb.runcall", "desc": "使用给定的参数调用函数（函数或方法对象，而不是字符串）" }, { "name": "pdb.set_trace", "type": "pdb", "path": "python/pdb.html#pdb.set_trace", "desc": "在调用堆栈框架处输入调试器" }, { "name": "pdb.post_mortem", "type": "pdb", "path": "python/pdb.html#pdb.post_mortem", "desc": "输入给定traceback对象的事后调试" }, { "name": "pdb.pm", "type": "pdb", "path": "python/pdb.html#pdb.pm", "desc": "输入在sys" }, { "name": "pickle.dump", "type": "pickle", "path": "python/pickle.html#pickle.dump", "desc": "将obj的腌制表示写入打开的file object 文件" }, { "name": "pickle.dumps", "type": "pickle", "path": "python/pickle.html#pickle.dumps", "desc": "将对象的腌制表示作为bytes对象返回，而不是将其写入文件" }, { "name": "pickle.load", "type": "pickle", "path": "python/pickle.html#pickle.load", "desc": "从打开的文件对象file读取pickled对象表示形式，并返回其中重新构建的对象层次结构" }, { "name": "pickle.loads", "type": "pickle", "path": "python/pickle.html#pickle.loads", "desc": "从bytes对象读取腌制对象层次结构，并返回其中指定的重构对象层次结构" }, { "name": "pickle.HIGHEST_PROTOCOL", "type": "pickle", "path": "python/pickle.html#pickle.HIGHEST_PROTOCOL", "desc": "整数，最高的protocol version可用" }, { "name": "pickle.DEFAULT_PROTOCOL", "type": "pickle", "path": "python/pickle.html#pickle.DEFAULT_PROTOCOL", "desc": "整数，默认的protocol version用于酸洗" }, { "name": "pickletools.dis", "type": "pickletools", "path": "python/pickletools.html#pickletools.dis", "desc": "版本3" }, { "name": "pickletools.genops", "type": "pickletools", "path": "python/pickletools.html#pickletools.genops", "desc": "在pickle中的所有操作码上提供iterator，返回（操作码， arg， pos） 三元组" }, { "name": "pickletools.optimize", "type": "pickletools", "path": "python/pickletools.html#pickletools.optimize", "desc": "在删除未使用的PUT操作码后，返回一个新的等效pickle字符串" }, { "name": "pkgutil.extend_path", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.extend_path", "desc": "扩展组成包的模块的搜索路径" }, { "name": "pkgutil.find_loader", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.find_loader", "desc": "针对给定的全名，检索 PEP 302模块加载程序" }, { "name": "pkgutil.get_importer", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.get_importer", "desc": "针对给定的path_item，检索 PEP 302导入器" }, { "name": "pkgutil.get_loader", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.get_loader", "desc": "为module_or_name获取 PEP 302“loader”对象" }, { "name": "pkgutil.iter_importers", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.iter_importers", "desc": "给定模块名称的产出 PEP 302导入器" }, { "name": "pkgutil.iter_modules", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.iter_modules", "desc": "对路径上的所有子模块，产生（module_finder， 名称， ispkg） ，如果路径为None，则sys" }, { "name": "pkgutil.walk_packages", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.walk_packages", "desc": "对于所有模块在路径上递归生成（module_finder， 名称， ispkg）或者，如果路径是None，所有可访问的模块" }, { "name": "pkgutil.get_data", "type": "pkgutil", "path": "python/pkgutil.html#pkgutil.get_data", "desc": "从包中获取资源" }, { "name": "platform.architecture", "type": "platform", "path": "python/platform.html#platform.architecture", "desc": "查询给定的可执行文件（默认为Python解释器二进制）以获取体系结构的各种信息" }, { "name": "platform.machine", "type": "platform", "path": "python/platform.html#platform.machine", "desc": "返回机器类型，例如'i386'" }, { "name": "platform.node", "type": "platform", "path": "python/platform.html#platform.node", "desc": "返回计算机的网络名称（可能不完全限定！）" }, { "name": "platform.platform", "type": "platform", "path": "python/platform.html#platform.platform", "desc": "返回一个标识基础平台的单个字符串，尽可能使用尽可能多的有用信息" }, { "name": "platform.processor", "type": "platform", "path": "python/platform.html#platform.processor", "desc": "返回（实际）处理器名称，例如'amdk6'" }, { "name": "platform.python_build", "type": "platform", "path": "python/platform.html#platform.python_build", "desc": "返回一个元组（buildno， builddate）将Python内部版本号和日期说明为字符串" }, { "name": "platform.python_compiler", "type": "platform", "path": "python/platform.html#platform.python_compiler", "desc": "返回一个字符串，标识用于编译Python的编译器" }, { "name": "platform.python_branch", "type": "platform", "path": "python/platform.html#platform.python_branch", "desc": "返回一个标识Python实现SCM分支的字符串" }, { "name": "platform.python_implementation", "type": "platform", "path": "python/platform.html#platform.python_implementation", "desc": "返回一个标识Python实现的字符串" }, { "name": "platform.python_revision", "type": "platform", "path": "python/platform.html#platform.python_revision", "desc": "返回一个标识Python实现SCM修订版本的字符串" }, { "name": "platform.python_version", "type": "platform", "path": "python/platform.html#platform.python_version", "desc": "以字符串'major" }, { "name": "platform.python_version_tuple", "type": "platform", "path": "python/platform.html#platform.python_version_tuple", "desc": "返回字符串的tuple （major， minor， patchlevel）的Python版本" }, { "name": "platform.release", "type": "platform", "path": "python/platform.html#platform.release", "desc": "返回系统的版本，例如'2" }, { "name": "platform.system", "type": "platform", "path": "python/platform.html#platform.system", "desc": "返回系统/操作系统名称，例如'Linux'，'Windows'或'Java'" }, { "name": "platform.system_alias", "type": "platform", "path": "python/platform.html#platform.system_alias", "desc": "Returns (system, release, version) aliased to common marketing names used for some systems" }, { "name": "platform.version", "type": "platform", "path": "python/platform.html#platform.version", "desc": "返回系统的发布版本，例如'＃3 on degas'" }, { "name": "platform.uname", "type": "platform", "path": "python/platform.html#platform.uname", "desc": "相当便携的uname接口" }, { "name": "platform.java_ver", "type": "platform", "path": "python/platform.html#platform.java_ver", "desc": "Jython的版本接口" }, { "name": "platform.win32_ver", "type": "platform", "path": "python/platform.html#platform.win32_ver", "desc": "从Windows注册表获取其他版本信息，并返回元组（发布， 版本， csd， ptype） t4>指OS版本，版本号，CSD级别（服务封装）和OS类型（多/单处理器）" }, { "name": "platform.popen", "type": "platform", "path": "python/platform.html#platform.popen", "desc": "便携式popen()接口" }, { "name": "platform.mac_ver", "type": "platform", "path": "python/platform.html#platform.mac_ver", "desc": "Get Mac OS version information and return it as tuple (release, versioninfo, machine) with versioninfo being a tuple (version, dev_stage, non_release_version)" }, { "name": "platform.dist", "type": "platform", "path": "python/platform.html#platform.dist", "desc": "这是linux_distribution()的另一个名称" }, { "name": "platform.linux_distribution", "type": "platform", "path": "python/platform.html#platform.linux_distribution", "desc": "尝试确定Linux操作系统分发名称的名称" }, { "name": "platform.libc_ver", "type": "platform", "path": "python/platform.html#platform.libc_ver", "desc": "尝试确定可执行文件（默认为 Python 解释器） 链接的 libc 版本" }, { "name": "plistlib.load", "type": "plistlib", "path": "python/plistlib.html#plistlib.load", "desc": "读取plist文件" }, { "name": "plistlib.loads", "type": "plistlib", "path": "python/plistlib.html#plistlib.loads", "desc": "从字节对象加载plist" }, { "name": "plistlib.dump", "type": "plistlib", "path": "python/plistlib.html#plistlib.dump", "desc": "将值写入plist文件" }, { "name": "plistlib.dumps", "type": "plistlib", "path": "python/plistlib.html#plistlib.dumps", "desc": "将值返回为plist格式的字节对象" }, { "name": "plistlib.readPlist", "type": "plistlib", "path": "python/plistlib.html#plistlib.readPlist", "desc": "读取plist文件" }, { "name": "plistlib.writePlist", "type": "plistlib", "path": "python/plistlib.html#plistlib.writePlist", "desc": "将rootObject写入XML plist文件" }, { "name": "plistlib.readPlistFromBytes", "type": "plistlib", "path": "python/plistlib.html#plistlib.readPlistFromBytes", "desc": "从字节对象读取plist数据" }, { "name": "plistlib.writePlistToBytes", "type": "plistlib", "path": "python/plistlib.html#plistlib.writePlistToBytes", "desc": "返回rootObject作为XML plist格式的字节对象" }, { "name": "plistlib.FMT_XML", "type": "plistlib", "path": "python/plistlib.html#plistlib.FMT_XML", "desc": "plist文件的XML格式" }, { "name": "plistlib.FMT_BINARY", "type": "plistlib", "path": "python/plistlib.html#plistlib.FMT_BINARY", "desc": "plist文件的二进制格式" }, { "name": "posix.environ", "type": "posix", "path": "python/posix.html#posix.environ", "desc": "表示解释器启动时的字符串环境的字典" }, { "name": "pprint.pformat", "type": "pprint", "path": "python/pprint.html#pprint.pformat", "desc": "以字符串的形式返回object的打印结果" }, { "name": "pprint.pprint", "type": "pprint", "path": "python/pprint.html#pprint.pprint", "desc": "将object打印到stream中，结尾输出新行" }, { "name": "pprint.isreadable", "type": "pprint", "path": "python/pprint.html#pprint.isreadable", "desc": "判断 object 的打印结果是否“可读”，或者能否用 eval()来重新构造值" }, { "name": "pprint.isrecursive", "type": "pprint", "path": "python/pprint.html#pprint.isrecursive", "desc": "判断object是否需要递归打印" }, { "name": "pprint.saferepr", "type": "pprint", "path": "python/pprint.html#pprint.saferepr", "desc": "返回object的字符串表示，对于递归的数据结构有保护" }, { "name": "profile.run", "type": "profile", "path": "python/profile.html#profile.run", "desc": "此函数接受可传递到exec()函数的单个参数，以及可选的文件名" }, { "name": "profile.runctx", "type": "profile", "path": "python/profile.html#profile.runctx", "desc": "此函数类似于run()，添加了参数以提供命令字符串的全局和本地化字典" }, { "name": "pty.fork", "type": "pty", "path": "python/pty.html#pty.fork", "desc": "叉子" }, { "name": "pty.openpty", "type": "pty", "path": "python/pty.html#pty.openpty", "desc": "打开一个新的伪终端对，使用os" }, { "name": "pty.spawn", "type": "pty", "path": "python/pty.html#pty.spawn", "desc": "产生一个进程，并将其控制终端与当前进程的标准io连接" }, { "name": "pwd.getpwuid", "type": "pwd", "path": "python/pwd.html#pwd.getpwuid", "desc": "返回给定数字用户ID的密码数据库条目" }, { "name": "pwd.getpwnam", "type": "pwd", "path": "python/pwd.html#pwd.getpwnam", "desc": "返回给定用户名的密码数据库条目" }, { "name": "pwd.getpwall", "type": "pwd", "path": "python/pwd.html#pwd.getpwall", "desc": "以任意顺序返回所有可用密码数据库条目的列表" }, { "name": "pyclbr.readmodule", "type": "pyclbr", "path": "python/pyclbr.html#pyclbr.readmodule", "desc": "读取一个模块并返回一个字典映射类名到类描述器对象" }, { "name": "pyclbr.readmodule_ex", "type": "pyclbr", "path": "python/pyclbr.html#pyclbr.readmodule_ex", "desc": "像readmodule()，但返回的字典，除了将类名映射到类描述器对象之外，还将顶级函数名映射到函数描述器对象" }, { "name": "xml.parsers.expat.ErrorString", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.ErrorString", "desc": "返回给定错误号errno的说明字符串" }, { "name": "xml.parsers.expat.ParserCreate", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.ParserCreate", "desc": "创建并返回一个新的xmlparser对象" }, { "name": "xml.parsers.expat.XMLParserType", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.XMLParserType", "desc": "来自ParserCreate()函数的返回值的类型" }, { "name": "xml.parsers.expat.errors.codes", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.codes", "desc": "将数字错误代码映射到其字符串描述的字典" }, { "name": "xml.parsers.expat.errors.messages", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.messages", "desc": "将字符串描述映射到其错误代码的字典" }, { "name": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "desc": "引用到外部实体而不是内部实体的属性值中的实体引用" }, { "name": "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF", "desc": "字符引用指的是XML中非法字符（例如，字符0或'&#0;'）" }, { "name": "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF", "desc": "实体引用指的是用符号声明的实体，因此不能被解析" }, { "name": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "desc": "一个属性在开始标记中多次使用" }, { "name": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "desc": "在输入字节无法正确分配给字符时引发；例如，UTF-8输入流中的NUL字节（值0）" }, { "name": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "desc": "文档元素之后出现了除空格之外的其他内容" }, { "name": "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI", "desc": "在除了输入数据的开始之外的某处发现了XML声明" }, { "name": "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS", "desc": "文档不包含元素（XML要求所有文档只包含一个顶级元素）" }, { "name": "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NO_MEMORY", "desc": "Expat无法在内部分配内存" }, { "name": "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF", "desc": "发现不允许参数实体引用的位置" }, { "name": "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR", "desc": "在输入中找到不完整的字符" }, { "name": "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF", "desc": "实体引用包含对同一实体的另一引用；可能通过不同的名称，并且可能间接" }, { "name": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_SYNTAX", "desc": "遇到一些未指定的语法错误" }, { "name": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "desc": "结束标记与最内部的开始标记不匹配" }, { "name": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN", "desc": "某些令牌（例如开始标签）在流结束或遇到下一个令牌之前未关闭" }, { "name": "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY", "desc": "引用未定义的实体" }, { "name": "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING", "desc": "Expat不支持文档编码" }, { "name": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION", "desc": "未关闭标有CDATA的部分" }, { "name": "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE", "desc": "解析器确定文档不是“独立”，尽管它声明自己在XML声明中，并且设置了NotStandaloneHandler并返回0" }, { "name": "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD", "desc": "需要操作，需要编译DTD支持，但是在没有DTD支持的情况下配置了Expat" }, { "name": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "desc": "在解析开始后请求行为更改，只能在解析开始前更改" }, { "name": "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX", "desc": "" }, { "name": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "desc": "该文档试图删除与前缀相关联的名称空间声明" }, { "name": "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE", "desc": "参数实体包含不完整标记" }, { "name": "xml.parsers.expat.errors.XML_ERROR_XML_DECL", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_XML_DECL", "desc": "文档根本没有文档元素" }, { "name": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "desc": "解析外部实体中的文本声明时出错" }, { "name": "xml.parsers.expat.errors.XML_ERROR_PUBLICID", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_PUBLICID", "desc": "在公共ID中找到不允许的字符" }, { "name": "xml.parsers.expat.errors.XML_ERROR_SUSPENDED", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_SUSPENDED", "desc": "请求的操作是在已暂停的解析器上进行的，但不允许" }, { "name": "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED", "desc": "当解析器未被挂起时，尝试恢复解析器" }, { "name": "xml.parsers.expat.errors.XML_ERROR_ABORTED", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_ABORTED", "desc": "这不应该报告给Python应用程序" }, { "name": "xml.parsers.expat.errors.XML_ERROR_FINISHED", "type": "pyexpat", "path": "python/pyexpat.html#xml.parsers.expat.errors.XML_ERROR_FINISHED", "desc": "所请求的操作是在已完成解析输入的解析器上进行的，但不允许" }, { "name": "py_compile.compile", "type": "py_compile", "path": "python/py_compile.html#py_compile.compile", "desc": "将源文件编译为字节代码并写出字节代码高速缓存文件" }, { "name": "py_compile.main", "type": "py_compile", "path": "python/py_compile.html#py_compile.main", "desc": "编译几个源文件" }, { "name": "quopri.decode", "type": "quopri", "path": "python/quopri.html#quopri.decode", "desc": "解码输入文件的内容，并将生成的解码二进制数据写入输出文件" }, { "name": "quopri.encode", "type": "quopri", "path": "python/quopri.html#quopri.encode", "desc": "编码输入文件的内容，并将生成的可引用数据写入输出文件" }, { "name": "quopri.decodestring", "type": "quopri", "path": "python/quopri.html#quopri.decodestring", "desc": "类似于decode()，除了它接受源bytes并返回对应的解码的bytes" }, { "name": "quopri.encodestring", "type": "quopri", "path": "python/quopri.html#quopri.encodestring", "desc": "像encode()，除了它接受源bytes并返回相应的编码的bytes" }, { "name": "random.seed", "type": "random", "path": "python/random.html#random.seed", "desc": "初始化生成器的随机数" }, { "name": "random.getstate", "type": "random", "path": "python/random.html#random.getstate", "desc": "返回捕获生成器的当前内部状态的对象" }, { "name": "random.setstate", "type": "random", "path": "python/random.html#random.setstate", "desc": "状态应该从先前对getstate()的调用获得，并且setstate()将生成器的内部状态恢复为是在当时getstate()被调用" }, { "name": "random.getrandbits", "type": "random", "path": "python/random.html#random.getrandbits", "desc": "返回一个 k 位(bit) 的随机整数(译者注：如k=8,返回8bit范围内的随机数，即0-255的随机数)该方法与MersenneTwister生成器一起提供，并且一些其他生成器也可以将其提供为API的可选部分" }, { "name": "random.randrange", "type": "random", "path": "python/random.html#random.randrange", "desc": "从range(start, stop, step)返回一个start到end范围内的随机整数（译者注：start，end，step都是整数，不包含end），可以指定step" }, { "name": "random.randint", "type": "random", "path": "python/random.html#random.randint", "desc": "返回一个随机整数N，a <= N <= b" }, { "name": "random.choice", "type": "random", "path": "python/random.html#random.choice", "desc": "从非空序列seq返回一个随机元素" }, { "name": "random.shuffle", "type": "random", "path": "python/random.html#random.shuffle", "desc": "原地搅乱序列x" }, { "name": "random.sample", "type": "random", "path": "python/random.html#random.sample", "desc": "返回从群体序列或集合中选择的唯一元素的k长度列表" }, { "name": "random.random", "type": "random", "path": "python/random.html#random.random", "desc": "返回下一个在范围 [0" }, { "name": "random.uniform", "type": "random", "path": "python/random.html#random.uniform", "desc": "Return a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a" }, { "name": "random.triangular", "type": "random", "path": "python/random.html#random.triangular", "desc": "返回随机浮点数 N 使得 low <= N <= high" }, { "name": "random.betavariate", "type": "random", "path": "python/random.html#random.betavariate", "desc": "Beta分布" }, { "name": "random.expovariate", "type": "random", "path": "python/random.html#random.expovariate", "desc": "指数分布" }, { "name": "random.gammavariate", "type": "random", "path": "python/random.html#random.gammavariate", "desc": "伽玛分布" }, { "name": "random.gauss", "type": "random", "path": "python/random.html#random.gauss", "desc": "高斯分布" }, { "name": "random.lognormvariate", "type": "random", "path": "python/random.html#random.lognormvariate", "desc": "对数正态分布" }, { "name": "random.normalvariate", "type": "random", "path": "python/random.html#random.normalvariate", "desc": "正态分布" }, { "name": "random.vonmisesvariate", "type": "random", "path": "python/random.html#random.vonmisesvariate", "desc": "mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero" }, { "name": "random.paretovariate", "type": "random", "path": "python/random.html#random.paretovariate", "desc": "帕累托分布" }, { "name": "random.weibullvariate", "type": "random", "path": "python/random.html#random.weibullvariate", "desc": "Weibull分布" }, { "name": "re.compile", "type": "re", "path": "python/re.html#re.compile", "desc": "将正则表达式模式编译成正则表达式对象，其 match() 和 search() 方法可用于匹配，描述如下" }, { "name": "re.search", "type": "re", "path": "python/re.html#re.search", "desc": "顺序扫描 string ，寻找正则表达式 pattern 产生匹配的第一个位置，并返回相应的 match object" }, { "name": "re.match", "type": "re", "path": "python/re.html#re.match", "desc": "若在 string 起始位置的0个或多个字符匹配正则表达式 pattern，返回相应的 match object" }, { "name": "re.fullmatch", "type": "re", "path": "python/re.html#re.fullmatch", "desc": "如果整个字符串匹配正则表达式pattern，则返回相应的match object" }, { "name": "re.split", "type": "re", "path": "python/re.html#re.split", "desc": "根据pattern的出现拆分字符串" }, { "name": "re.findall", "type": "re", "path": "python/re.html#re.findall", "desc": "返回字符串中pattern的所有非重叠匹配项作为字符串列表" }, { "name": "re.finditer", "type": "re", "path": "python/re.html#re.finditer", "desc": "在字符串中的RE 模式的所有非重叠匹配中返回产生match objects的iterator" }, { "name": "re.sub", "type": "re", "path": "python/re.html#re.sub", "desc": "将string中最左侧非重叠出现的pattern替换为repl，返回所获得的字符串" }, { "name": "re.subn", "type": "re", "path": "python/re.html#re.subn", "desc": "执行与sub()相同的操作，但返回一个元组（new_string， number_of_subs_made）" }, { "name": "re.escape", "type": "re", "path": "python/re.html#re.escape", "desc": "转义模式中除ASCII字母、数字和'_'之外的所有字符" }, { "name": "re.purge", "type": "re", "path": "python/re.html#re.purge", "desc": "清除正则表达式缓存" }, { "name": "re.A", "type": "re", "path": "python/re.html#re.A", "desc": "让 \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S 执行纯 ASCII 匹配，而不是全部Unicode匹配(译注：因为Unicode中存在多国文字页面，所以上述字符存在多个码点，作用相同而二进制不同)" }, { "name": "re.DEBUG", "type": "re", "path": "python/re.html#re.DEBUG", "desc": "显示关于编译表达式的调试信息" }, { "name": "re.I", "type": "re", "path": "python/re.html#re.I", "desc": "执行不区分大小写的匹配；如[A-Z]也会匹配小写字母" }, { "name": "re.L", "type": "re", "path": "python/re.html#re.L", "desc": "Make \\w，\\W，\\b，\\B，\\s和\\S取决于当前的语言环境" }, { "name": "re.M", "type": "re", "path": "python/re.html#re.M", "desc": "指定时，模式字符'^'匹配字符串的开头和每行的开始处（紧跟在每个换行符后面）；和模式字符'$'匹配字符串的末尾和每行的末尾（紧接在每个换行符的前面）" }, { "name": "re.S", "type": "re", "path": "python/re.html#re.S", "desc": "制作'" }, { "name": "re.X", "type": "re", "path": "python/re.html#re.X", "desc": "该标志允许您编写正则表达式，通过允许您在视觉上分离模式的逻辑部分并添加注释，该正则表达式看起来更好，并且更易读" }, { "name": "readline.parse_and_bind", "type": "readline", "path": "python/readline.html#readline.parse_and_bind", "desc": "执行string参数中提供的init行" }, { "name": "readline.read_init_file", "type": "readline", "path": "python/readline.html#readline.read_init_file", "desc": "执行readline初始化文件" }, { "name": "readline.get_line_buffer", "type": "readline", "path": "python/readline.html#readline.get_line_buffer", "desc": "返回行缓冲区的当前内容（rl_line_buffer在底层库中）" }, { "name": "readline.insert_text", "type": "readline", "path": "python/readline.html#readline.insert_text", "desc": "在光标位置的行缓冲区中插入文本" }, { "name": "readline.redisplay", "type": "readline", "path": "python/readline.html#readline.redisplay", "desc": "更改屏幕上显示的内容以反映行缓冲区的当前内容" }, { "name": "readline.read_history_file", "type": "readline", "path": "python/readline.html#readline.read_history_file", "desc": "加载阅读历史记录文件，并将其附加到历史记录列表" }, { "name": "readline.write_history_file", "type": "readline", "path": "python/readline.html#readline.write_history_file", "desc": "将历史记录列表保存到阅读历史记录文件，覆盖任何现有文件" }, { "name": "readline.append_history_file", "type": "readline", "path": "python/readline.html#readline.append_history_file", "desc": "将最后的nelements项目追加到文件中" }, { "name": "readline.get_history_length", "type": "readline", "path": "python/readline.html#readline.get_history_length", "desc": "设置或返回要保存在历史记录文件中的所需行数" }, { "name": "readline.clear_history", "type": "readline", "path": "python/readline.html#readline.clear_history", "desc": "清除当前历史记录" }, { "name": "readline.get_current_history_length", "type": "readline", "path": "python/readline.html#readline.get_current_history_length", "desc": "返回当前在历史记录中的项目数" }, { "name": "readline.get_history_item", "type": "readline", "path": "python/readline.html#readline.get_history_item", "desc": "返回索引的历史记录项目的当前内容" }, { "name": "readline.remove_history_item", "type": "readline", "path": "python/readline.html#readline.remove_history_item", "desc": "从历史记录中删除其位置指定的历史记录项" }, { "name": "readline.replace_history_item", "type": "readline", "path": "python/readline.html#readline.replace_history_item", "desc": "用行替换其位置指定的历史记录项" }, { "name": "readline.add_history", "type": "readline", "path": "python/readline.html#readline.add_history", "desc": "将行附加到历史记录缓冲区，就好像它是最后一行键入的" }, { "name": "readline.set_startup_hook", "type": "readline", "path": "python/readline.html#readline.set_startup_hook", "desc": "设置或删除由底层库的rl_startup_hook回调调用的函数" }, { "name": "readline.set_pre_input_hook", "type": "readline", "path": "python/readline.html#readline.set_pre_input_hook", "desc": "设置或删除由底层库的rl_pre_input_hook回调调用的函数" }, { "name": "readline.set_completer", "type": "readline", "path": "python/readline.html#readline.set_completer", "desc": "设置或删除完成器功能" }, { "name": "readline.get_completer", "type": "readline", "path": "python/readline.html#readline.get_completer", "desc": "获取完成器函数，或None如果未设置完成器函数" }, { "name": "readline.get_begidx", "type": "readline", "path": "python/readline.html#readline.get_begidx", "desc": "获取完成范围的开始或结束索引" }, { "name": "readline.set_completion_display_matches_hook", "type": "readline", "path": "python/readline.html#readline.set_completion_display_matches_hook", "desc": "设置或删除完成显示功能" }, { "name": "reprlib.repr", "type": "reprlib", "path": "python/reprlib.html#reprlib.repr", "desc": "这是aRepr的repr()方法" }, { "name": "reprlib.recursive_repr", "type": "reprlib", "path": "python/reprlib.html#reprlib.recursive_repr", "desc": "装饰器用于检测同一线程中的递归调用的__repr__()方法" }, { "name": "reprlib.aRepr", "type": "reprlib", "path": "python/reprlib.html#reprlib.aRepr", "desc": "这是 repr 用来提供如下所述的 repr() 函数的一个实例" }, { "name": "resource.getrlimit", "type": "resource", "path": "python/resource.html#resource.getrlimit", "desc": "使用资源的当前软和硬限制返回元组（软， 硬） 如果底层系统调用意外失败，则引发ValueError（如果指定了无效资源）或error" }, { "name": "resource.setrlimit", "type": "resource", "path": "python/resource.html#resource.setrlimit", "desc": "设置资源的新限制" }, { "name": "resource.prlimit", "type": "resource", "path": "python/resource.html#resource.prlimit", "desc": "在一个函数中组合setrlimit()和getrlimit()，并支持获取和设置任意进程的资源限制" }, { "name": "resource.getrusage", "type": "resource", "path": "python/resource.html#resource.getrusage", "desc": "此函数返回描述由当前进程或其子进程消耗的资源的对象，由who参数指定" }, { "name": "resource.getpagesize", "type": "resource", "path": "python/resource.html#resource.getpagesize", "desc": "返回系统页面中的字节数" }, { "name": "resource.RLIM_INFINITY", "type": "resource", "path": "python/resource.html#resource.RLIM_INFINITY", "desc": "常量用于表示无限资源的限制" }, { "name": "resource.RLIMIT_CORE", "type": "resource", "path": "python/resource.html#resource.RLIMIT_CORE", "desc": "当前进程可以创建的核心文件的最大大小（以字节为单位）" }, { "name": "resource.RLIMIT_CPU", "type": "resource", "path": "python/resource.html#resource.RLIMIT_CPU", "desc": "进程可以使用的最大处理器时间量（以秒为单位）" }, { "name": "resource.RLIMIT_FSIZE", "type": "resource", "path": "python/resource.html#resource.RLIMIT_FSIZE", "desc": "进程可能创建的文件的最大大小" }, { "name": "resource.RLIMIT_DATA", "type": "resource", "path": "python/resource.html#resource.RLIMIT_DATA", "desc": "进程堆的最大大小（以字节为单位）" }, { "name": "resource.RLIMIT_STACK", "type": "resource", "path": "python/resource.html#resource.RLIMIT_STACK", "desc": "当前进程的调用堆栈的最大大小（以字节为单位）" }, { "name": "resource.RLIMIT_RSS", "type": "resource", "path": "python/resource.html#resource.RLIMIT_RSS", "desc": "应该为进程提供的最大驻留集大小" }, { "name": "resource.RLIMIT_NPROC", "type": "resource", "path": "python/resource.html#resource.RLIMIT_NPROC", "desc": "" }, { "name": "resource.RLIMIT_NOFILE", "type": "resource", "path": "python/resource.html#resource.RLIMIT_NOFILE", "desc": "当前进程的打开文件描述器的最大数量" }, { "name": "resource.RLIMIT_OFILE", "type": "resource", "path": "python/resource.html#resource.RLIMIT_OFILE", "desc": "RLIMIT_NOFILE的BSD名称" }, { "name": "resource.RLIMIT_MEMLOCK", "type": "resource", "path": "python/resource.html#resource.RLIMIT_MEMLOCK", "desc": "可以在内存中锁定的最大地址空间" }, { "name": "resource.RLIMIT_VMEM", "type": "resource", "path": "python/resource.html#resource.RLIMIT_VMEM", "desc": "过程可能占用的映射内存的最大区域" }, { "name": "resource.RLIMIT_AS", "type": "resource", "path": "python/resource.html#resource.RLIMIT_AS", "desc": "进程可能占用的地址空间的最大区域（以字节为单位）" }, { "name": "resource.RLIMIT_MSGQUEUE", "type": "resource", "path": "python/resource.html#resource.RLIMIT_MSGQUEUE", "desc": "可分配给POSIX消息队列的字节数" }, { "name": "resource.RLIMIT_NICE", "type": "resource", "path": "python/resource.html#resource.RLIMIT_NICE", "desc": "进程的最高级别的水平（计算为20  -  rlim_cur）" }, { "name": "resource.RLIMIT_RTPRIO", "type": "resource", "path": "python/resource.html#resource.RLIMIT_RTPRIO", "desc": "实时优先级的上限" }, { "name": "resource.RLIMIT_RTTIME", "type": "resource", "path": "python/resource.html#resource.RLIMIT_RTTIME", "desc": "进程可以在实时调度下花费的CPU时间的时间限制（以微秒为单位），而不会阻塞系统调用" }, { "name": "resource.RLIMIT_SIGPENDING", "type": "resource", "path": "python/resource.html#resource.RLIMIT_SIGPENDING", "desc": "进程可能排队的信号数" }, { "name": "resource.RLIMIT_SBSIZE", "type": "resource", "path": "python/resource.html#resource.RLIMIT_SBSIZE", "desc": "此用户的套接字缓冲区使用的最大大小（以字节为单位）" }, { "name": "resource.RLIMIT_SWAP", "type": "resource", "path": "python/resource.html#resource.RLIMIT_SWAP", "desc": "可由此用户ID的所有进程保留或使用的交换空间的最大大小（以字节为单位）" }, { "name": "resource.RLIMIT_NPTS", "type": "resource", "path": "python/resource.html#resource.RLIMIT_NPTS", "desc": "此用户ID创建的伪终端的最大数量" }, { "name": "resource.RUSAGE_SELF", "type": "resource", "path": "python/resource.html#resource.RUSAGE_SELF", "desc": "传递到getrusage()以请求调用进程消耗的资源，这是进程中的所有线程使用的资源的总和" }, { "name": "resource.RUSAGE_CHILDREN", "type": "resource", "path": "python/resource.html#resource.RUSAGE_CHILDREN", "desc": "传递到getrusage()以请求已终止并等待的调用进程的子进程消耗的资源" }, { "name": "resource.RUSAGE_BOTH", "type": "resource", "path": "python/resource.html#resource.RUSAGE_BOTH", "desc": "Pass to getrusage() to request resources consumed by both the current process and child processes" }, { "name": "resource.RUSAGE_THREAD", "type": "resource", "path": "python/resource.html#resource.RUSAGE_THREAD", "desc": "传递到getrusage()以请求当前线程使用的资源" }, { "name": "runpy.run_module", "type": "runpy", "path": "python/runpy.html#runpy.run_module", "desc": "执行指定模块的代码，并返回结果模块全局字典" }, { "name": "runpy.run_path", "type": "runpy", "path": "python/runpy.html#runpy.run_path", "desc": "在指定的文件系统位置执行代码，并返回结果模块全局字典" }, { "name": "select.devpoll", "type": "select", "path": "python/select.html#select.devpoll", "desc": "（仅在Solaris和衍生产品上受支持" }, { "name": "select.epoll", "type": "select", "path": "python/select.html#select.epoll", "desc": "（仅在Linux 2" }, { "name": "select.poll", "type": "select", "path": "python/select.html#select.poll", "desc": "（不受所有操作系统支持" }, { "name": "select.kqueue", "type": "select", "path": "python/select.html#select.kqueue", "desc": "（仅在BSD上支持" }, { "name": "select.kevent", "type": "select", "path": "python/select.html#select.kevent", "desc": "（仅在BSD上支持" }, { "name": "select.select", "type": "select", "path": "python/select.html#select.select", "desc": "这是Unix select()系统调用的简单接口" }, { "name": "shelve.open", "type": "shelve", "path": "python/shelve.html#shelve.open", "desc": "打开持久性字典" }, { "name": "shlex.split", "type": "shlex", "path": "python/shlex.html#shlex.split", "desc": "使用类shell语法拆分字符串s" }, { "name": "shlex.quote", "type": "shlex", "path": "python/shlex.html#shlex.quote", "desc": "返回字符串s的shell转义版本" }, { "name": "shutil.copyfileobj", "type": "shutil", "path": "python/shutil.html#shutil.copyfileobj", "desc": "将类似文件的对象fsrc的内容复制到类似文件的对象fdst" }, { "name": "shutil.copyfile", "type": "shutil", "path": "python/shutil.html#shutil.copyfile", "desc": "将名为src的文件的内容（无元数据）复制到名为dst的文件，然后返回dst" }, { "name": "shutil.copymode", "type": "shutil", "path": "python/shutil.html#shutil.copymode", "desc": "将权限位从src复制到dst" }, { "name": "shutil.copystat", "type": "shutil", "path": "python/shutil.html#shutil.copystat", "desc": "将权限位，最后访问时间，上次修改时间和标志从src复制到dst" }, { "name": "shutil.copy", "type": "shutil", "path": "python/shutil.html#shutil.copy", "desc": "将文件src复制到文件或目录dst" }, { "name": "shutil.copy2", "type": "shutil", "path": "python/shutil.html#shutil.copy2", "desc": "与copy()相同，但copy2()也尝试保留所有文件元数据" }, { "name": "shutil.ignore_patterns", "type": "shutil", "path": "python/shutil.html#shutil.ignore_patterns", "desc": "此工厂函数创建一个函数，可用作copytree()的忽略参数的可调用函数，忽略与glob类型模式" }, { "name": "shutil.copytree", "type": "shutil", "path": "python/shutil.html#shutil.copytree", "desc": "递归地复制以src为根的整个目录树，返回目标目录" }, { "name": "shutil.rmtree", "type": "shutil", "path": "python/shutil.html#shutil.rmtree", "desc": "删除整个目录树； 路径必须指向目录（而不是指向目录的符号链接）" }, { "name": "shutil.move", "type": "shutil", "path": "python/shutil.html#shutil.move", "desc": "递归地将文件或目录（src）移动到另一个位置（dst），并返回目标" }, { "name": "shutil.disk_usage", "type": "shutil", "path": "python/shutil.html#shutil.disk_usage", "desc": "将给定路径的磁盘使用情况统计信息作为named tuple返回总计，使用和免费是总的，已用和可用空间的量，以字节为单位" }, { "name": "shutil.chown", "type": "shutil", "path": "python/shutil.html#shutil.chown", "desc": "更改给定路径的所有者用户和/或组" }, { "name": "shutil.which", "type": "shutil", "path": "python/shutil.html#shutil.which", "desc": "返回可执行文件的路径，如果给定的cmd被调用，它将运行" }, { "name": "shutil.make_archive", "type": "shutil", "path": "python/shutil.html#shutil.make_archive", "desc": "创建归档文件（例如zip或tar）并返回其名称" }, { "name": "shutil.get_archive_formats", "type": "shutil", "path": "python/shutil.html#shutil.get_archive_formats", "desc": "返回支持的归档格式列表" }, { "name": "shutil.register_archive_format", "type": "shutil", "path": "python/shutil.html#shutil.register_archive_format", "desc": "为格式名称注册档案库" }, { "name": "shutil.unregister_archive_format", "type": "shutil", "path": "python/shutil.html#shutil.unregister_archive_format", "desc": "从支持的格式列表中删除归档格式名称" }, { "name": "shutil.unpack_archive", "type": "shutil", "path": "python/shutil.html#shutil.unpack_archive", "desc": "分拆归档" }, { "name": "shutil.register_unpack_format", "type": "shutil", "path": "python/shutil.html#shutil.register_unpack_format", "desc": "注册分拆格式" }, { "name": "shutil.unregister_unpack_format", "type": "shutil", "path": "python/shutil.html#shutil.unregister_unpack_format", "desc": "取消注册分拆格式" }, { "name": "shutil.get_unpack_formats", "type": "shutil", "path": "python/shutil.html#shutil.get_unpack_formats", "desc": "返回分拆的所有注册格式的列表" }, { "name": "shutil.get_terminal_size", "type": "shutil", "path": "python/shutil.html#shutil.get_terminal_size", "desc": "获取终端窗口的大小" }, { "name": "signal.alarm", "type": "signal", "path": "python/signal.html#signal.alarm", "desc": "如果时间不为零，则此功能请求在时间秒内将SIGALRM信号发送到过程" }, { "name": "signal.getsignal", "type": "signal", "path": "python/signal.html#signal.getsignal", "desc": "返回信号signalnum的当前信号处理程序" }, { "name": "signal.pause", "type": "signal", "path": "python/signal.html#signal.pause", "desc": "使该过程睡眠直到接收到信号；那么将调用适当的处理程序" }, { "name": "signal.pthread_kill", "type": "signal", "path": "python/signal.html#signal.pthread_kill", "desc": "将信号signalnum发送到线程thread_id，这是与调用者相同的进程中的另一个线程" }, { "name": "signal.pthread_sigmask", "type": "signal", "path": "python/signal.html#signal.pthread_sigmask", "desc": "获取和/或更改调用线程的信号掩码" }, { "name": "signal.setitimer", "type": "signal", "path": "python/signal.html#signal.setitimer", "desc": "设置由指定的给定间隔定时器（signal" }, { "name": "signal.getitimer", "type": "signal", "path": "python/signal.html#signal.getitimer", "desc": "返回由指定的给定间隔定时器的当前值，其中" }, { "name": "signal.set_wakeup_fd", "type": "signal", "path": "python/signal.html#signal.set_wakeup_fd", "desc": "将唤醒文件描述器设置为fd" }, { "name": "signal.siginterrupt", "type": "signal", "path": "python/signal.html#signal.siginterrupt", "desc": "更改系统呼叫重新启动行为：如果标志为False，系统呼叫将在由信号signalnum中断时重新启动，否则系统呼叫将中断" }, { "name": "signal.signal", "type": "signal", "path": "python/signal.html#signal.signal", "desc": "将信号signalnum的处理程序设置为处理程序" }, { "name": "signal.sigpending", "type": "signal", "path": "python/signal.html#signal.sigpending", "desc": "检查等待传递到调用线程的信号集合（即，在阻塞时已经产生的信号）" }, { "name": "signal.sigwait", "type": "signal", "path": "python/signal.html#signal.sigwait", "desc": "挂起调用线程的执行，直到发送信号集sigset中指定的信号之一" }, { "name": "signal.sigwaitinfo", "type": "signal", "path": "python/signal.html#signal.sigwaitinfo", "desc": "挂起调用线程的执行，直到发送信号集sigset中指定的信号之一" }, { "name": "signal.sigtimedwait", "type": "signal", "path": "python/signal.html#signal.sigtimedwait", "desc": "像sigwaitinfo()，但是需要一个额外的超时参数指定超时" }, { "name": "signal.SIG_DFL", "type": "signal", "path": "python/signal.html#signal.SIG_DFL", "desc": "这是两个标准信号处理选项之一；它将简单地执行信号的默认功能" }, { "name": "signal.SIG_IGN", "type": "signal", "path": "python/signal.html#signal.SIG_IGN", "desc": "这是另一个标准信号处理程序，它将简单地忽略给定的信号" }, { "name": "signal.CTRL_C_EVENT", "type": "signal", "path": "python/signal.html#signal.CTRL_C_EVENT", "desc": "对应于Ctrl+C击键事件的信号" }, { "name": "signal.CTRL_BREAK_EVENT", "type": "signal", "path": "python/signal.html#signal.CTRL_BREAK_EVENT", "desc": "对应于Ctrl+Break击键事件的信号" }, { "name": "signal.NSIG", "type": "signal", "path": "python/signal.html#signal.NSIG", "desc": "一个多于最高信号数的数" }, { "name": "signal.ITIMER_REAL", "type": "signal", "path": "python/signal.html#signal.ITIMER_REAL", "desc": "实时递减间隔定时器，并在到期时递送SIGALRM" }, { "name": "signal.ITIMER_VIRTUAL", "type": "signal", "path": "python/signal.html#signal.ITIMER_VIRTUAL", "desc": "仅在进程正在执行时减少间隔定时器，并在到期时传递SIGVTALRM" }, { "name": "signal.ITIMER_PROF", "type": "signal", "path": "python/signal.html#signal.ITIMER_PROF", "desc": "递减间隔定时器，当进程执行时和系统代表进程执行时" }, { "name": "signal.SIG_BLOCK", "type": "signal", "path": "python/signal.html#signal.SIG_BLOCK", "desc": "如何参数到pthread_sigmask()的可能值，表示要阻止信号" }, { "name": "signal.SIG_UNBLOCK", "type": "signal", "path": "python/signal.html#signal.SIG_UNBLOCK", "desc": "如何参数到pthread_sigmask()的可能值，表示要解除阻塞信号" }, { "name": "signal.SIG_SETMASK", "type": "signal", "path": "python/signal.html#signal.SIG_SETMASK", "desc": "如何参数到pthread_sigmask()的可能值，表示要替换信号掩码" }, { "name": "site.main", "type": "site", "path": "python/site.html#site.main", "desc": "将所有标准站点特定目录添加到模块搜索路径" }, { "name": "site.addsitedir", "type": "site", "path": "python/site.html#site.addsitedir", "desc": "将目录添加到sys" }, { "name": "site.getsitepackages", "type": "site", "path": "python/site.html#site.getsitepackages", "desc": "返回一个包含所有全局site-packages目录的列表" }, { "name": "site.getuserbase", "type": "site", "path": "python/site.html#site.getuserbase", "desc": "返回用户基本目录USER_BASE的路径" }, { "name": "site.getusersitepackages", "type": "site", "path": "python/site.html#site.getusersitepackages", "desc": "返回用户特定的site-packages目录USER_SITE的路径" }, { "name": "site.PREFIXES", "type": "site", "path": "python/site.html#site.PREFIXES", "desc": "site-packages目录的前缀列表" }, { "name": "site.ENABLE_USER_SITE", "type": "site", "path": "python/site.html#site.ENABLE_USER_SITE", "desc": "标志显示用户site-packages目录的状态" }, { "name": "sndhdr.what", "type": "sndhdr", "path": "python/sndhdr.html#sndhdr.what", "desc": "使用whathdr()确定存储在文件filename中的声音数据类型" }, { "name": "sndhdr.whathdr", "type": "sndhdr", "path": "python/sndhdr.html#sndhdr.whathdr", "desc": "基于文件头确定存储在文件中的声音数据的类型" }, { "name": "socket.socket", "type": "socket", "path": "python/socket.html#socket.socket", "desc": "使用给定的地址族、套接字类型和协议号创建一个新的套接字" }, { "name": "socket.socketpair", "type": "socket", "path": "python/socket.html#socket.socketpair", "desc": "使用所给的地址族，套接字类型和协议号创建一对已连接的socket 对象" }, { "name": "socket.create_connection", "type": "socket", "path": "python/socket.html#socket.create_connection", "desc": "连接到监听网络地址(一个2-tuple(host,port)),然后返回`socket`对象" }, { "name": "socket.fromfd", "type": "socket", "path": "python/socket.html#socket.fromfd", "desc": "复制文件描述符fd（由文件对象的fileno（）方法返回的整数），并根据结果构建一个套接字对象" }, { "name": "socket.fromshare", "type": "socket", "path": "python/socket.html#socket.fromshare", "desc": "使用从`socket" }, { "name": "socket.getaddrinfo", "type": "socket", "path": "python/socket.html#socket.getaddrinfo", "desc": "将 host/port 参数转换为一个5元组序列，其中包含创建连接到该服务的套接字的所有必要参数" }, { "name": "socket.getfqdn", "type": "socket", "path": "python/socket.html#socket.getfqdn", "desc": "Return a fully qualified domain name for name" }, { "name": "socket.gethostbyname", "type": "socket", "path": "python/socket.html#socket.gethostbyname", "desc": "将主机名转换为IPv4地址格式" }, { "name": "socket.gethostbyname_ex", "type": "socket", "path": "python/socket.html#socket.gethostbyname_ex", "desc": "Translate a host name to IPv4 address format, extended interface" }, { "name": "socket.gethostname", "type": "socket", "path": "python/socket.html#socket.gethostname", "desc": "Return a string containing the hostname of the machine where the Python interpreter is currently executing" }, { "name": "socket.gethostbyaddr", "type": "socket", "path": "python/socket.html#socket.gethostbyaddr", "desc": "Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address)" }, { "name": "socket.getnameinfo", "type": "socket", "path": "python/socket.html#socket.getnameinfo", "desc": "Translate a socket address sockaddr into a 2-tuple (host, port)" }, { "name": "socket.getprotobyname", "type": "socket", "path": "python/socket.html#socket.getprotobyname", "desc": "Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function" }, { "name": "socket.getservbyname", "type": "socket", "path": "python/socket.html#socket.getservbyname", "desc": "Translate an Internet service name and protocol name to a port number for that service" }, { "name": "socket.getservbyport", "type": "socket", "path": "python/socket.html#socket.getservbyport", "desc": "Translate an Internet port number and protocol name to a service name for that service" }, { "name": "socket.ntohl", "type": "socket", "path": "python/socket.html#socket.ntohl", "desc": "将32位正整数从网络字节顺序转换为主机字节顺序" }, { "name": "socket.ntohs", "type": "socket", "path": "python/socket.html#socket.ntohs", "desc": "Convert 16-bit positive integers from network to host byte order" }, { "name": "socket.htonl", "type": "socket", "path": "python/socket.html#socket.htonl", "desc": "Convert 32-bit positive integers from host to network byte order" }, { "name": "socket.htons", "type": "socket", "path": "python/socket.html#socket.htons", "desc": "Convert 16-bit positive integers from host to network byte order" }, { "name": "socket.inet_aton", "type": "socket", "path": "python/socket.html#socket.inet_aton", "desc": "Convert an IPv4 address from dotted-quad string format (for example, ‘123" }, { "name": "socket.inet_ntoa", "type": "socket", "path": "python/socket.html#socket.inet_ntoa", "desc": "Convert a 32-bit packed IPv4 address (a bytes-like object four bytes in length) to its standard dotted-quad string representation (for example, ‘123" }, { "name": "socket.inet_pton", "type": "socket", "path": "python/socket.html#socket.inet_pton", "desc": "将IP地址从其特定类型的字符串格式转换为压缩的二进制格式" }, { "name": "socket.inet_ntop", "type": "socket", "path": "python/socket.html#socket.inet_ntop", "desc": "Convert a packed IP address (a bytes-like object of some number of bytes) to its standard, family-specific string representation (for example, '7" }, { "name": "socket.CMSG_LEN", "type": "socket", "path": "python/socket.html#socket.CMSG_LEN", "desc": "Return the total length, without trailing padding, of an ancillary data item with associated data of the given length" }, { "name": "socket.CMSG_SPACE", "type": "socket", "path": "python/socket.html#socket.CMSG_SPACE", "desc": "Return the buffer size needed for recvmsg() to receive an ancillary data item with associated data of the given length, along with any trailing padding" }, { "name": "socket.getdefaulttimeout", "type": "socket", "path": "python/socket.html#socket.getdefaulttimeout", "desc": "返回新套接字对象的默认超时值（以秒为单位）（浮点数）" }, { "name": "socket.setdefaulttimeout", "type": "socket", "path": "python/socket.html#socket.setdefaulttimeout", "desc": "为新的套接字对象设置默认超时（以秒为单位）（float）" }, { "name": "socket.sethostname", "type": "socket", "path": "python/socket.html#socket.sethostname", "desc": "将计算机的主机名设置为名称" }, { "name": "socket.if_nameindex", "type": "socket", "path": "python/socket.html#socket.if_nameindex", "desc": "Return a list of network interface information (index int, name string) tuples" }, { "name": "socket.if_nametoindex", "type": "socket", "path": "python/socket.html#socket.if_nametoindex", "desc": "Return a network interface index number corresponding to an interface name" }, { "name": "socket.if_indextoname", "type": "socket", "path": "python/socket.html#socket.if_indextoname", "desc": "Return a network interface name corresponding to an interface index number" }, { "name": "socket.AF_UNIX", "type": "socket", "path": "python/socket.html#socket.AF_UNIX", "desc": "这些常量表示地址（和协议）族，用于 socket() 的第一个参数" }, { "name": "socket.SOCK_STREAM", "type": "socket", "path": "python/socket.html#socket.SOCK_STREAM", "desc": "这些常量表示套接字类型，用于 socket() 的第二个参数" }, { "name": "socket.SOCK_CLOEXEC", "type": "socket", "path": "python/socket.html#socket.SOCK_CLOEXEC", "desc": "这两个常量（如果已定义）可以与套接字类型结合使用，并允许你以原子方式设置一些标志（从而避免可能的竞争条件和需要单独调用）" }, { "name": "socket.AF_CAN", "type": "socket", "path": "python/socket.html#socket.AF_CAN", "desc": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module" }, { "name": "socket.CAN_BCM", "type": "socket", "path": "python/socket.html#socket.CAN_BCM", "desc": "CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol" }, { "name": "socket.CAN_RAW_FD_FRAMES", "type": "socket", "path": "python/socket.html#socket.CAN_RAW_FD_FRAMES", "desc": "Enables CAN FD support in a CAN_RAW socket" }, { "name": "socket.AF_RDS", "type": "socket", "path": "python/socket.html#socket.AF_RDS", "desc": "Many constants of these forms, documented in the Linux documentation, are also defined in the socket module" }, { "name": "socket.AF_LINK", "type": "socket", "path": "python/socket.html#socket.AF_LINK", "desc": "Availability: BSD, OSX" }, { "name": "socket.has_ipv6", "type": "socket", "path": "python/socket.html#socket.has_ipv6", "desc": "This constant contains a boolean value which indicates if IPv6 is supported on this platform" }, { "name": "socket.BDADDR_ANY", "type": "socket", "path": "python/socket.html#socket.BDADDR_ANY", "desc": "These are string constants containing Bluetooth addresses with special meanings" }, { "name": "socket.HCI_FILTER", "type": "socket", "path": "python/socket.html#socket.HCI_FILTER", "desc": "For use with BTPROTO_HCI" }, { "name": "socket.SocketType", "type": "socket", "path": "python/socket.html#socket.SocketType", "desc": "这是一个代表socket对象类型的Python类型对象" }, { "name": "spwd.getspnam", "type": "spwd", "path": "python/spwd.html#spwd.getspnam", "desc": "返回给定用户名的影子密码数据库条目" }, { "name": "spwd.getspall", "type": "spwd", "path": "python/spwd.html#spwd.getspall", "desc": "以任意顺序返回所有可用shadow密码数据库条目的列表" }, { "name": "sqlite3.connect", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.connect", "desc": "打开到SQLite数据库文件database的连接" }, { "name": "sqlite3.register_converter", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.register_converter", "desc": "注册可调用对象用来将来自数据库的bytestring转换成为自定义的Python类型" }, { "name": "sqlite3.register_adapter", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.register_adapter", "desc": "注册可调用对象用来将自定义的 Python 类型type转换为 SQLite 的支持的类型" }, { "name": "sqlite3.complete_statement", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.complete_statement", "desc": "如果字符串sql包含一个或多个以分号结束的完整的SQL语句则返回True" }, { "name": "sqlite3.enable_callback_tracebacks", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.enable_callback_tracebacks", "desc": "默认情况下你不会在用户定义的函数、 聚合、 转换器、 授权者回调等地方得到回溯对象（调用栈对象）" }, { "name": "sqlite3.version", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.version", "desc": "该模块的字符串形式的版本号" }, { "name": "sqlite3.version_info", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.version_info", "desc": "该模块的整数元组形式的版本号" }, { "name": "sqlite3.sqlite_version", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.sqlite_version", "desc": "运行期SQLite库的版本号，字符串形式" }, { "name": "sqlite3.sqlite_version_info", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.sqlite_version_info", "desc": "运行期SQLite库的版本号，整数元组形式" }, { "name": "sqlite3.PARSE_DECLTYPES", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.PARSE_DECLTYPES", "desc": "该常量用于connect()函数的detect_types参数" }, { "name": "sqlite3.PARSE_COLNAMES", "type": "sqlite3", "path": "python/sqlite3.html#sqlite3.PARSE_COLNAMES", "desc": "该常量用于connect()函数的detect_types参数" }, { "name": "ssl.wrap_socket", "type": "ssl", "path": "python/ssl.html#ssl.wrap_socket", "desc": "Takes an instance sock of socket" }, { "name": "ssl.create_default_context", "type": "ssl", "path": "python/ssl.html#ssl.create_default_context", "desc": "Return a new SSLContext object with default settings for the given purpose" }, { "name": "ssl.RAND_bytes", "type": "ssl", "path": "python/ssl.html#ssl.RAND_bytes", "desc": "Return num cryptographically strong pseudo-random bytes" }, { "name": "ssl.RAND_pseudo_bytes", "type": "ssl", "path": "python/ssl.html#ssl.RAND_pseudo_bytes", "desc": "Return (bytes, is_cryptographic): bytes are num pseudo-random bytes, is_cryptographic is True if the bytes generated are cryptographically strong" }, { "name": "ssl.RAND_status", "type": "ssl", "path": "python/ssl.html#ssl.RAND_status", "desc": "Return True if the SSL pseudo-random number generator has been seeded with ‘enough’ randomness, and False otherwise" }, { "name": "ssl.RAND_egd", "type": "ssl", "path": "python/ssl.html#ssl.RAND_egd", "desc": "If you are running an entropy-gathering daemon (EGD) somewhere, and path is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys" }, { "name": "ssl.RAND_add", "type": "ssl", "path": "python/ssl.html#ssl.RAND_add", "desc": "Mix the given bytes into the SSL pseudo-random number generator" }, { "name": "ssl.match_hostname", "type": "ssl", "path": "python/ssl.html#ssl.match_hostname", "desc": "Verify that cert (in decoded format as returned by SSLSocket" }, { "name": "ssl.cert_time_to_seconds", "type": "ssl", "path": "python/ssl.html#ssl.cert_time_to_seconds", "desc": "Return the time in seconds since the Epoch, given the cert_time string representing the “notBefore” or “notAfter” date from a certificate in &quot;%b %d %H:%M:%S %Y %Z&quot; strptime format (C locale)" }, { "name": "ssl.get_server_certificate", "type": "ssl", "path": "python/ssl.html#ssl.get_server_certificate", "desc": "Given the address addr of an SSL-protected server, as a (hostname, port-number) pair, fetches the server’s certificate, and returns it as a PEM-encoded string" }, { "name": "ssl.DER_cert_to_PEM_cert", "type": "ssl", "path": "python/ssl.html#ssl.DER_cert_to_PEM_cert", "desc": "Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate" }, { "name": "ssl.PEM_cert_to_DER_cert", "type": "ssl", "path": "python/ssl.html#ssl.PEM_cert_to_DER_cert", "desc": "Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate" }, { "name": "ssl.get_default_verify_paths", "type": "ssl", "path": "python/ssl.html#ssl.get_default_verify_paths", "desc": "Returns a named tuple with paths to OpenSSL’s default cafile and capath" }, { "name": "ssl.enum_certificates", "type": "ssl", "path": "python/ssl.html#ssl.enum_certificates", "desc": "Retrieve certificates from Windows’ system cert store" }, { "name": "ssl.enum_crls", "type": "ssl", "path": "python/ssl.html#ssl.enum_crls", "desc": "Retrieve CRLs from Windows’ system cert store" }, { "name": "ssl.CERT_NONE", "type": "ssl", "path": "python/ssl.html#ssl.CERT_NONE", "desc": "Possible value for SSLContext" }, { "name": "ssl.CERT_OPTIONAL", "type": "ssl", "path": "python/ssl.html#ssl.CERT_OPTIONAL", "desc": "Possible value for SSLContext" }, { "name": "ssl.CERT_REQUIRED", "type": "ssl", "path": "python/ssl.html#ssl.CERT_REQUIRED", "desc": "Possible value for SSLContext" }, { "name": "ssl.VERIFY_DEFAULT", "type": "ssl", "path": "python/ssl.html#ssl.VERIFY_DEFAULT", "desc": "Possible value for SSLContext" }, { "name": "ssl.VERIFY_CRL_CHECK_LEAF", "type": "ssl", "path": "python/ssl.html#ssl.VERIFY_CRL_CHECK_LEAF", "desc": "Possible value for SSLContext" }, { "name": "ssl.VERIFY_CRL_CHECK_CHAIN", "type": "ssl", "path": "python/ssl.html#ssl.VERIFY_CRL_CHECK_CHAIN", "desc": "Possible value for SSLContext" }, { "name": "ssl.VERIFY_X509_STRICT", "type": "ssl", "path": "python/ssl.html#ssl.VERIFY_X509_STRICT", "desc": "Possible value for SSLContext" }, { "name": "ssl.VERIFY_X509_TRUSTED_FIRST", "type": "ssl", "path": "python/ssl.html#ssl.VERIFY_X509_TRUSTED_FIRST", "desc": "Possible value for SSLContext" }, { "name": "ssl.PROTOCOL_SSLv23", "type": "ssl", "path": "python/ssl.html#ssl.PROTOCOL_SSLv23", "desc": "Selects the highest protocol version that both the client and server support" }, { "name": "ssl.PROTOCOL_SSLv2", "type": "ssl", "path": "python/ssl.html#ssl.PROTOCOL_SSLv2", "desc": "Selects SSL version 2 as the channel encryption protocol" }, { "name": "ssl.PROTOCOL_SSLv3", "type": "ssl", "path": "python/ssl.html#ssl.PROTOCOL_SSLv3", "desc": "Selects SSL version 3 as the channel encryption protocol" }, { "name": "ssl.PROTOCOL_TLSv1", "type": "ssl", "path": "python/ssl.html#ssl.PROTOCOL_TLSv1", "desc": "Selects TLS version 1" }, { "name": "ssl.PROTOCOL_TLSv1_1", "type": "ssl", "path": "python/ssl.html#ssl.PROTOCOL_TLSv1_1", "desc": "Selects TLS version 1" }, { "name": "ssl.PROTOCOL_TLSv1_2", "type": "ssl", "path": "python/ssl.html#ssl.PROTOCOL_TLSv1_2", "desc": "使用TLSv1" }, { "name": "ssl.OP_ALL", "type": "ssl", "path": "python/ssl.html#ssl.OP_ALL", "desc": "Enables workarounds for various bugs present in other SSL implementations" }, { "name": "ssl.OP_NO_SSLv2", "type": "ssl", "path": "python/ssl.html#ssl.OP_NO_SSLv2", "desc": "Prevents an SSLv2 connection" }, { "name": "ssl.OP_NO_SSLv3", "type": "ssl", "path": "python/ssl.html#ssl.OP_NO_SSLv3", "desc": "Prevents an SSLv3 connection" }, { "name": "ssl.OP_NO_TLSv1", "type": "ssl", "path": "python/ssl.html#ssl.OP_NO_TLSv1", "desc": "Prevents a TLSv1 connection" }, { "name": "ssl.OP_NO_TLSv1_1", "type": "ssl", "path": "python/ssl.html#ssl.OP_NO_TLSv1_1", "desc": "Prevents a TLSv1" }, { "name": "ssl.OP_NO_TLSv1_2", "type": "ssl", "path": "python/ssl.html#ssl.OP_NO_TLSv1_2", "desc": "Prevents a TLSv1" }, { "name": "ssl.OP_CIPHER_SERVER_PREFERENCE", "type": "ssl", "path": "python/ssl.html#ssl.OP_CIPHER_SERVER_PREFERENCE", "desc": "Use the server’s cipher ordering preference, rather than the client’s" }, { "name": "ssl.OP_SINGLE_DH_USE", "type": "ssl", "path": "python/ssl.html#ssl.OP_SINGLE_DH_USE", "desc": "Prevents re-use of the same DH key for distinct SSL sessions" }, { "name": "ssl.OP_SINGLE_ECDH_USE", "type": "ssl", "path": "python/ssl.html#ssl.OP_SINGLE_ECDH_USE", "desc": "Prevents re-use of the same ECDH key for distinct SSL sessions" }, { "name": "ssl.OP_NO_COMPRESSION", "type": "ssl", "path": "python/ssl.html#ssl.OP_NO_COMPRESSION", "desc": "Disable compression on the SSL channel" }, { "name": "ssl.HAS_ALPN", "type": "ssl", "path": "python/ssl.html#ssl.HAS_ALPN", "desc": "Whether the OpenSSL library has built-in support for the Application-Layer Protocol Negotiation TLS extension as described in RFC 7301" }, { "name": "ssl.HAS_ECDH", "type": "ssl", "path": "python/ssl.html#ssl.HAS_ECDH", "desc": "Whether the OpenSSL library has built-in support for Elliptic Curve-based Diffie-Hellman key exchange" }, { "name": "ssl.HAS_SNI", "type": "ssl", "path": "python/ssl.html#ssl.HAS_SNI", "desc": "Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 4366)" }, { "name": "ssl.HAS_NPN", "type": "ssl", "path": "python/ssl.html#ssl.HAS_NPN", "desc": "Whether the OpenSSL library has built-in support for Next Protocol Negotiation as described in the NPN draft specification" }, { "name": "ssl.CHANNEL_BINDING_TYPES", "type": "ssl", "path": "python/ssl.html#ssl.CHANNEL_BINDING_TYPES", "desc": "List of supported TLS channel binding types" }, { "name": "ssl.OPENSSL_VERSION", "type": "ssl", "path": "python/ssl.html#ssl.OPENSSL_VERSION", "desc": "The version string of the OpenSSL library loaded by the interpreter:" }, { "name": "ssl.OPENSSL_VERSION_INFO", "type": "ssl", "path": "python/ssl.html#ssl.OPENSSL_VERSION_INFO", "desc": "A tuple of five integers representing version information about the OpenSSL library:" }, { "name": "ssl.OPENSSL_VERSION_NUMBER", "type": "ssl", "path": "python/ssl.html#ssl.OPENSSL_VERSION_NUMBER", "desc": "The raw version number of the OpenSSL library, as a single integer:" }, { "name": "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE", "type": "ssl", "path": "python/ssl.html#ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE", "desc": "Alert Descriptions from RFC 5246 and others" }, { "name": "ssl.Purpose.SERVER_AUTH", "type": "ssl", "path": "python/ssl.html#ssl.Purpose.SERVER_AUTH", "desc": "Option for create_default_context() and SSLContext" }, { "name": "ssl.Purpose.CLIENT_AUTH", "type": "ssl", "path": "python/ssl.html#ssl.Purpose.CLIENT_AUTH", "desc": "Option for create_default_context() and SSLContext" }, { "name": "stat.S_ISDIR", "type": "stat", "path": "python/stat.html#stat.S_ISDIR", "desc": "如果mode来自一个目录，返回非零" }, { "name": "stat.S_ISCHR", "type": "stat", "path": "python/stat.html#stat.S_ISCHR", "desc": "如果mode来自特殊的字符设备文件，返回非零" }, { "name": "stat.S_ISBLK", "type": "stat", "path": "python/stat.html#stat.S_ISBLK", "desc": "如果mode来自特殊的块设备文件，返回非零" }, { "name": "stat.S_ISREG", "type": "stat", "path": "python/stat.html#stat.S_ISREG", "desc": "如果mode来自一个正常的文件，返回非零" }, { "name": "stat.S_ISFIFO", "type": "stat", "path": "python/stat.html#stat.S_ISFIFO", "desc": "如果mode来自FIFO（命名管道），返回非零" }, { "name": "stat.S_ISLNK", "type": "stat", "path": "python/stat.html#stat.S_ISLNK", "desc": "如果mode来自一个符号链接，返回非零" }, { "name": "stat.S_ISSOCK", "type": "stat", "path": "python/stat.html#stat.S_ISSOCK", "desc": "如果mode来自一个套接字，返回非零" }, { "name": "stat.S_ISDOOR", "type": "stat", "path": "python/stat.html#stat.S_ISDOOR", "desc": "如果模式是从门返回非零" }, { "name": "stat.S_ISPORT", "type": "stat", "path": "python/stat.html#stat.S_ISPORT", "desc": "如果模式来自事件端口，则返回非零" }, { "name": "stat.S_ISWHT", "type": "stat", "path": "python/stat.html#stat.S_ISWHT", "desc": "如果模式来自白光，返回非零" }, { "name": "stat.S_IMODE", "type": "stat", "path": "python/stat.html#stat.S_IMODE", "desc": "返回可以由os" }, { "name": "stat.S_IFMT", "type": "stat", "path": "python/stat.html#stat.S_IFMT", "desc": "返回描述文件类型的文件模式部分（由上面的S_IS*()函数使用）" }, { "name": "stat.filemode", "type": "stat", "path": "python/stat.html#stat.filemode", "desc": "将文件的模式转换为格式为'-rwxrwxrwx'的字符串" }, { "name": "stat.ST_MODE", "type": "stat", "path": "python/stat.html#stat.ST_MODE", "desc": "inode 保护模式" }, { "name": "stat.ST_INO", "type": "stat", "path": "python/stat.html#stat.ST_INO", "desc": "inode 节点号" }, { "name": "stat.ST_DEV", "type": "stat", "path": "python/stat.html#stat.ST_DEV", "desc": "inode 驻留的设备" }, { "name": "stat.ST_NLINK", "type": "stat", "path": "python/stat.html#stat.ST_NLINK", "desc": "inode 的链接数" }, { "name": "stat.ST_UID", "type": "stat", "path": "python/stat.html#stat.ST_UID", "desc": "所有者的用户ID" }, { "name": "stat.ST_GID", "type": "stat", "path": "python/stat.html#stat.ST_GID", "desc": "所有者的组ID" }, { "name": "stat.ST_SIZE", "type": "stat", "path": "python/stat.html#stat.ST_SIZE", "desc": "一个普通文件的字节大小；等待某些特殊文件的数据量" }, { "name": "stat.ST_ATIME", "type": "stat", "path": "python/stat.html#stat.ST_ATIME", "desc": "上次访问的时间" }, { "name": "stat.ST_MTIME", "type": "stat", "path": "python/stat.html#stat.ST_MTIME", "desc": "最后一次修改的时间" }, { "name": "stat.ST_CTIME", "type": "stat", "path": "python/stat.html#stat.ST_CTIME", "desc": "由操作系统报告的&quot;ctime&quot;" }, { "name": "stat.S_IFSOCK", "type": "stat", "path": "python/stat.html#stat.S_IFSOCK", "desc": "套接字" }, { "name": "stat.S_IFLNK", "type": "stat", "path": "python/stat.html#stat.S_IFLNK", "desc": "符号链接" }, { "name": "stat.S_IFREG", "type": "stat", "path": "python/stat.html#stat.S_IFREG", "desc": "常规文件" }, { "name": "stat.S_IFBLK", "type": "stat", "path": "python/stat.html#stat.S_IFBLK", "desc": "块设备" }, { "name": "stat.S_IFDIR", "type": "stat", "path": "python/stat.html#stat.S_IFDIR", "desc": "目录" }, { "name": "stat.S_IFCHR", "type": "stat", "path": "python/stat.html#stat.S_IFCHR", "desc": "字符设备" }, { "name": "stat.S_IFIFO", "type": "stat", "path": "python/stat.html#stat.S_IFIFO", "desc": "先进先出" }, { "name": "stat.S_IFDOOR", "type": "stat", "path": "python/stat.html#stat.S_IFDOOR", "desc": "门" }, { "name": "stat.S_IFPORT", "type": "stat", "path": "python/stat.html#stat.S_IFPORT", "desc": "事件端口" }, { "name": "stat.S_IFWHT", "type": "stat", "path": "python/stat.html#stat.S_IFWHT", "desc": "Whiteout" }, { "name": "stat.S_ISUID", "type": "stat", "path": "python/stat.html#stat.S_ISUID", "desc": "设置 UID 位" }, { "name": "stat.S_ISGID", "type": "stat", "path": "python/stat.html#stat.S_ISGID", "desc": "设置组 ID 位" }, { "name": "stat.S_ISVTX", "type": "stat", "path": "python/stat.html#stat.S_ISVTX", "desc": "粘滞位" }, { "name": "stat.S_IRWXU", "type": "stat", "path": "python/stat.html#stat.S_IRWXU", "desc": "文件所有者权限掩码" }, { "name": "stat.S_IRUSR", "type": "stat", "path": "python/stat.html#stat.S_IRUSR", "desc": "所有者拥有读取权限" }, { "name": "stat.S_IWUSR", "type": "stat", "path": "python/stat.html#stat.S_IWUSR", "desc": "所有者具有写入权限" }, { "name": "stat.S_IXUSR", "type": "stat", "path": "python/stat.html#stat.S_IXUSR", "desc": "所有者具有执行权限" }, { "name": "stat.S_IRWXG", "type": "stat", "path": "python/stat.html#stat.S_IRWXG", "desc": "组权限掩码" }, { "name": "stat.S_IRGRP", "type": "stat", "path": "python/stat.html#stat.S_IRGRP", "desc": "组具有读取权限" }, { "name": "stat.S_IWGRP", "type": "stat", "path": "python/stat.html#stat.S_IWGRP", "desc": "组具有写入权限" }, { "name": "stat.S_IXGRP", "type": "stat", "path": "python/stat.html#stat.S_IXGRP", "desc": "组具有执行权限" }, { "name": "stat.S_IRWXO", "type": "stat", "path": "python/stat.html#stat.S_IRWXO", "desc": "其他人（不在组中的人）的权限掩码" }, { "name": "stat.S_IROTH", "type": "stat", "path": "python/stat.html#stat.S_IROTH", "desc": "其他人具有读取权限" }, { "name": "stat.S_IWOTH", "type": "stat", "path": "python/stat.html#stat.S_IWOTH", "desc": "其他人具有写入权限" }, { "name": "stat.S_IXOTH", "type": "stat", "path": "python/stat.html#stat.S_IXOTH", "desc": "其他人具有执行权限" }, { "name": "stat.S_ENFMT", "type": "stat", "path": "python/stat.html#stat.S_ENFMT", "desc": "V 系统文件锁定的执法行动" }, { "name": "stat.S_IREAD", "type": "stat", "path": "python/stat.html#stat.S_IREAD", "desc": "S_IRUSR的Unix V7同义词" }, { "name": "stat.S_IWRITE", "type": "stat", "path": "python/stat.html#stat.S_IWRITE", "desc": "S_IWUSR的Unix V7同义词" }, { "name": "stat.S_IEXEC", "type": "stat", "path": "python/stat.html#stat.S_IEXEC", "desc": "S_IXUSR的Unix V7同义词" }, { "name": "stat.UF_NODUMP", "type": "stat", "path": "python/stat.html#stat.UF_NODUMP", "desc": "不转储文件" }, { "name": "stat.UF_IMMUTABLE", "type": "stat", "path": "python/stat.html#stat.UF_IMMUTABLE", "desc": "该文件不能更改" }, { "name": "stat.UF_APPEND", "type": "stat", "path": "python/stat.html#stat.UF_APPEND", "desc": "该文件可能只被追加到" }, { "name": "stat.UF_OPAQUE", "type": "stat", "path": "python/stat.html#stat.UF_OPAQUE", "desc": "该目录是不透明的通过联盟的堆栈查看时" }, { "name": "stat.UF_NOUNLINK", "type": "stat", "path": "python/stat.html#stat.UF_NOUNLINK", "desc": "该文件可能不能重命名或删除" }, { "name": "stat.UF_COMPRESSED", "type": "stat", "path": "python/stat.html#stat.UF_COMPRESSED", "desc": "该文件存储压缩 （Mac OS X 10" }, { "name": "stat.UF_HIDDEN", "type": "stat", "path": "python/stat.html#stat.UF_HIDDEN", "desc": "该文件不应显示在GUI中（Mac OS X 10" }, { "name": "stat.SF_ARCHIVED", "type": "stat", "path": "python/stat.html#stat.SF_ARCHIVED", "desc": "该文件可能被存档" }, { "name": "stat.SF_IMMUTABLE", "type": "stat", "path": "python/stat.html#stat.SF_IMMUTABLE", "desc": "该文件不能更改" }, { "name": "stat.SF_APPEND", "type": "stat", "path": "python/stat.html#stat.SF_APPEND", "desc": "该文件可能只被追加到" }, { "name": "stat.SF_NOUNLINK", "type": "stat", "path": "python/stat.html#stat.SF_NOUNLINK", "desc": "该文件可能不能重命名或删除" }, { "name": "stat.SF_SNAPSHOT", "type": "stat", "path": "python/stat.html#stat.SF_SNAPSHOT", "desc": "该文件是一个快照文件" }, { "name": "stat.FILE_ATTRIBUTE_ARCHIVE", "type": "stat", "path": "python/stat.html#stat.FILE_ATTRIBUTE_ARCHIVE", "desc": "版本3" }, { "name": "statistics.mean", "type": "statistics", "path": "python/statistics.html#statistics.mean", "desc": "返回数据的样本算术平均值，实数值的序列或迭代器" }, { "name": "statistics.median", "type": "statistics", "path": "python/statistics.html#statistics.median", "desc": "使用常用的“中间两个平均值”方法返回数值数据的中值（中间值）" }, { "name": "statistics.median_low", "type": "statistics", "path": "python/statistics.html#statistics.median_low", "desc": "返回数值数据的低中位数" }, { "name": "statistics.median_high", "type": "statistics", "path": "python/statistics.html#statistics.median_high", "desc": "返回数据的高中位数" }, { "name": "statistics.median_grouped", "type": "statistics", "path": "python/statistics.html#statistics.median_grouped", "desc": "使用内插法返回分组连续数据的中值，计算为第50个百分位数" }, { "name": "statistics.mode", "type": "statistics", "path": "python/statistics.html#statistics.mode", "desc": "从离散或标称数据返回最常用的数据点" }, { "name": "statistics.pstdev", "type": "statistics", "path": "python/statistics.html#statistics.pstdev", "desc": "返回总体标准差（总体方差的平方根）" }, { "name": "statistics.pvariance", "type": "statistics", "path": "python/statistics.html#statistics.pvariance", "desc": "返回数据的总体方差，实数值的非空迭代" }, { "name": "statistics.stdev", "type": "statistics", "path": "python/statistics.html#statistics.stdev", "desc": "返回样本标准偏差（样本方差的平方根）" }, { "name": "statistics.variance", "type": "statistics", "path": "python/statistics.html#statistics.variance", "desc": "返回数据的样本方差，这是至少两个实数值的迭代" }, { "name": "string.capwords", "type": "string", "path": "python/string.html#string.capwords", "desc": "使用str" }, { "name": "string.ascii_letters", "type": "string", "path": "python/string.html#string.ascii_letters", "desc": "与此级联（即包含）的 ascii_lowercase 和 ascii_uppercase 描述见下文" }, { "name": "string.ascii_lowercase", "type": "string", "path": "python/string.html#string.ascii_lowercase", "desc": "小写字母 'abcdefghijklmnopqrstuvwxyz'" }, { "name": "string.ascii_uppercase", "type": "string", "path": "python/string.html#string.ascii_uppercase", "desc": "大写字母 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" }, { "name": "string.digits", "type": "string", "path": "python/string.html#string.digits", "desc": "字符串 '0123456789'" }, { "name": "string.hexdigits", "type": "string", "path": "python/string.html#string.hexdigits", "desc": "字符串 '0123456789abcdefABCDEF'" }, { "name": "string.octdigits", "type": "string", "path": "python/string.html#string.octdigits", "desc": "字符串'01234567'" }, { "name": "string.punctuation", "type": "string", "path": "python/string.html#string.punctuation", "desc": "在 C语言 中被定义为ASCII 字符的字符集合而成的字符串" }, { "name": "string.printable", "type": "string", "path": "python/string.html#string.printable", "desc": "被定义为printable的ASCII 字符集合而成的字符串，这是一个包含了 位数, ascii字符, 标点符号, 和空格" }, { "name": "string.whitespace", "type": "string", "path": "python/string.html#string.whitespace", "desc": "包含所有ASCII中可当作空白的字符集合而成的字符串" }, { "name": "stringprep.in_table_a1", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_a1", "desc": "确定代码是否在表A" }, { "name": "stringprep.in_table_b1", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_b1", "desc": "确定代码是否在表B" }, { "name": "stringprep.map_table_b2", "type": "stringprep", "path": "python/stringprep.html#stringprep.map_table_b2", "desc": "根据表B" }, { "name": "stringprep.map_table_b3", "type": "stringprep", "path": "python/stringprep.html#stringprep.map_table_b3", "desc": "根据表B" }, { "name": "stringprep.in_table_c11", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c11", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c12", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c12", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c11_c12", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c11_c12", "desc": "确定代码是否在表C1（空间字符，C" }, { "name": "stringprep.in_table_c21", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c21", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c22", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c22", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c21_c22", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c21_c22", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c3", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c3", "desc": "确定代码是否在表C3（私人使用）中" }, { "name": "stringprep.in_table_c4", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c4", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c5", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c5", "desc": "确定代码是否在表C5（代理代码）中" }, { "name": "stringprep.in_table_c6", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c6", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c7", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c7", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c8", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c8", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_c9", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_c9", "desc": "确定代码是否在表C" }, { "name": "stringprep.in_table_d1", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_d1", "desc": "确定代码是否在表D" }, { "name": "stringprep.in_table_d2", "type": "stringprep", "path": "python/stringprep.html#stringprep.in_table_d2", "desc": "确定代码是否在表D" }, { "name": "struct.pack", "type": "struct", "path": "python/struct.html#struct.pack", "desc": "Return a bytes object containing the values v1, v2, " }, { "name": "struct.pack_into", "type": "struct", "path": "python/struct.html#struct.pack_into", "desc": "根据格式字符串fmt封装值v1，v2，并将压缩字节写入可写缓冲区缓冲区从位置偏移开始" }, { "name": "struct.unpack", "type": "struct", "path": "python/struct.html#struct.unpack", "desc": "从缓冲器缓冲器分离（假定由pack（fmt， " }, { "name": "struct.unpack_from", "type": "struct", "path": "python/struct.html#struct.unpack_from", "desc": "根据格式字符串fmt从缓冲区开始分离偏移" }, { "name": "struct.iter_unpack", "type": "struct", "path": "python/struct.html#struct.iter_unpack", "desc": "根据格式字符串fmt从缓冲区缓冲区中迭代分离" }, { "name": "struct.calcsize", "type": "struct", "path": "python/struct.html#struct.calcsize", "desc": "返回对应于格式字符串的结构（以及由此产生的pack（fmt， " }, { "name": "subprocess.run", "type": "subprocess", "path": "python/subprocess.html#subprocess.run", "desc": "运行args描述的命令" }, { "name": "subprocess.call", "type": "subprocess", "path": "python/subprocess.html#subprocess.call", "desc": "执行args 描述的命令" }, { "name": "subprocess.check_call", "type": "subprocess", "path": "python/subprocess.html#subprocess.check_call", "desc": "执行带参数的命令" }, { "name": "subprocess.check_output", "type": "subprocess", "path": "python/subprocess.html#subprocess.check_output", "desc": "使用参数运行命令并返回其输出" }, { "name": "subprocess.getstatusoutput", "type": "subprocess", "path": "python/subprocess.html#subprocess.getstatusoutput", "desc": "返回在shell中执行cmd的(status, output)" }, { "name": "subprocess.getoutput", "type": "subprocess", "path": "python/subprocess.html#subprocess.getoutput", "desc": "返回在shell中执行cmd的输出（标准输出和标准错误）" }, { "name": "subprocess.DEVNULL", "type": "subprocess", "path": "python/subprocess.html#subprocess.DEVNULL", "desc": "可用作Popen的stdin、stdout或stderr参数的特殊值，指示将使用os" }, { "name": "subprocess.PIPE", "type": "subprocess", "path": "python/subprocess.html#subprocess.PIPE", "desc": "可用作Popen的stdin、stdout或stderr参数的特殊值，表示应打开相应标准流的管道" }, { "name": "subprocess.STDOUT", "type": "subprocess", "path": "python/subprocess.html#subprocess.STDOUT", "desc": "可用作Popen的stderr参数的特殊值，表示标准错误应与标准输出放在同一句柄中" }, { "name": "subprocess.STD_INPUT_HANDLE", "type": "subprocess", "path": "python/subprocess.html#subprocess.STD_INPUT_HANDLE", "desc": "标准输入设备" }, { "name": "subprocess.STD_OUTPUT_HANDLE", "type": "subprocess", "path": "python/subprocess.html#subprocess.STD_OUTPUT_HANDLE", "desc": "标准输出设备" }, { "name": "subprocess.STD_ERROR_HANDLE", "type": "subprocess", "path": "python/subprocess.html#subprocess.STD_ERROR_HANDLE", "desc": "标准错误设备" }, { "name": "subprocess.SW_HIDE", "type": "subprocess", "path": "python/subprocess.html#subprocess.SW_HIDE", "desc": "隐藏窗口" }, { "name": "subprocess.STARTF_USESTDHANDLES", "type": "subprocess", "path": "python/subprocess.html#subprocess.STARTF_USESTDHANDLES", "desc": "表示STARTUPINFO" }, { "name": "subprocess.STARTF_USESHOWWINDOW", "type": "subprocess", "path": "python/subprocess.html#subprocess.STARTF_USESHOWWINDOW", "desc": "表示STARTUPINFO" }, { "name": "subprocess.CREATE_NEW_CONSOLE", "type": "subprocess", "path": "python/subprocess.html#subprocess.CREATE_NEW_CONSOLE", "desc": "新的进程将具有一个新的控制台，而不是继承它父进程的控制台（默认行为）" }, { "name": "subprocess.CREATE_NEW_PROCESS_GROUP", "type": "subprocess", "path": "python/subprocess.html#subprocess.CREATE_NEW_PROCESS_GROUP", "desc": "一个Popen creationflags参数，以指定将创建一个新进程组" }, { "name": "sunau.open", "type": "sunau", "path": "python/sunau.html#sunau.open", "desc": "如果文件是字符串，请按该名称打开该文件，否则将其视为可搜索的类文件对象" }, { "name": "sunau.openfp", "type": "sunau", "path": "python/sunau.html#sunau.openfp", "desc": "为维持向后兼容性的open()的同义词" }, { "name": "sunau.AUDIO_FILE_MAGIC", "type": "sunau", "path": "python/sunau.html#sunau.AUDIO_FILE_MAGIC", "desc": "每个有效的Sun AU文件的整数开始，以big-endian形式存储" }, { "name": "sunau.AUDIO_FILE_ENCODING_MULAW_8", "type": "sunau", "path": "python/sunau.html#sunau.AUDIO_FILE_ENCODING_MULAW_8", "desc": "此模块支持的AU头中的编码字段的值" }, { "name": "sunau.AUDIO_FILE_ENCODING_FLOAT", "type": "sunau", "path": "python/sunau.html#sunau.AUDIO_FILE_ENCODING_FLOAT", "desc": "来自AU头的编码字段的其他已知值，但不受此模块支持" }, { "name": "symbol.sym_name", "type": "symbol", "path": "python/symbol.html#symbol.sym_name", "desc": "将此模块中定义的常量的数字值映射回名称字符串的字典，从而允许生成更加人性化的解析树表示" }, { "name": "symtable.symtable", "type": "symtable", "path": "python/symtable.html#symtable.symtable", "desc": "返回对于Python源代码代码的toplevel SymbolTable" }, { "name": "sys.call_tracing", "type": "sys", "path": "python/sys.html#sys.call_tracing", "desc": "在跟踪启用时调用func(*args)" }, { "name": "sys._clear_type_cache", "type": "sys", "path": "python/sys.html#sys._clear_type_cache", "desc": "清除内部类型缓存" }, { "name": "sys._current_frames", "type": "sys", "path": "python/sys.html#sys._current_frames", "desc": "返回一个字典，该函数被调用时，将每个线程的标识符映射到当前在该线程中处于活动状态的最上面的堆栈帧" }, { "name": "sys._debugmallocstats", "type": "sys", "path": "python/sys.html#sys._debugmallocstats", "desc": "打印低级别信息以了解CPython内存分配器的状态" }, { "name": "sys.displayhook", "type": "sys", "path": "python/sys.html#sys.displayhook", "desc": "如果值不是None，则此函数将repr(value)打印到sys" }, { "name": "sys.excepthook", "type": "sys", "path": "python/sys.html#sys.excepthook", "desc": "这个函数打印出一个给定的回溯和例外情况给sys" }, { "name": "sys.exc_info", "type": "sys", "path": "python/sys.html#sys.exc_info", "desc": "这个函数返回一个包含三个值的元组，该元组提供有关当前正在处理的异常的信息" }, { "name": "sys.exit", "type": "sys", "path": "python/sys.html#sys.exit", "desc": "从Python退出" }, { "name": "sys.getallocatedblocks", "type": "sys", "path": "python/sys.html#sys.getallocatedblocks", "desc": "不管大小如何，都返回当前由解释器分配的内存块数量" }, { "name": "sys.getcheckinterval", "type": "sys", "path": "python/sys.html#sys.getcheckinterval", "desc": "返回解释器的“检查间隔”；请参阅setcheckinterval()" }, { "name": "sys.getdefaultencoding", "type": "sys", "path": "python/sys.html#sys.getdefaultencoding", "desc": "返回Unicode实现使用的当前默认字符串编码的名称" }, { "name": "sys.getdlopenflags", "type": "sys", "path": "python/sys.html#sys.getdlopenflags", "desc": "返回用于dlopen()调用的标志的当前值" }, { "name": "sys.getfilesystemencoding", "type": "sys", "path": "python/sys.html#sys.getfilesystemencoding", "desc": "返回用于将Unicode文件名转换为系统文件名的编码名称" }, { "name": "sys.getrefcount", "type": "sys", "path": "python/sys.html#sys.getrefcount", "desc": "返回对象的引用计数" }, { "name": "sys.getrecursionlimit", "type": "sys", "path": "python/sys.html#sys.getrecursionlimit", "desc": "返回递归限制的当前值，即Python解释器堆栈的最大深度" }, { "name": "sys.getsizeof", "type": "sys", "path": "python/sys.html#sys.getsizeof", "desc": "以字节为单位返回对象的大小" }, { "name": "sys.getswitchinterval", "type": "sys", "path": "python/sys.html#sys.getswitchinterval", "desc": "返回解释器的“线程切换间隔”；请参阅setswitchinterval()" }, { "name": "sys._getframe", "type": "sys", "path": "python/sys.html#sys._getframe", "desc": "从调用堆栈中返回一个框架对象" }, { "name": "sys.getprofile", "type": "sys", "path": "python/sys.html#sys.getprofile", "desc": "Get the profiler function as set by setprofile()" }, { "name": "sys.gettrace", "type": "sys", "path": "python/sys.html#sys.gettrace", "desc": "获取由settrace()设置的跟踪函数" }, { "name": "sys.getwindowsversion", "type": "sys", "path": "python/sys.html#sys.getwindowsversion", "desc": "返回描述当前正在运行的Windows版本的命名元组" }, { "name": "sys.get_coroutine_wrapper", "type": "sys", "path": "python/sys.html#sys.get_coroutine_wrapper", "desc": "返回None，或由set_coroutine_wrapper()设置的包装器" }, { "name": "sys.intern", "type": "sys", "path": "python/sys.html#sys.intern", "desc": "在“interned”字符串表中输入字符串，并返回字符串 -  字符串本身或副本" }, { "name": "sys.is_finalizing", "type": "sys", "path": "python/sys.html#sys.is_finalizing", "desc": "如果Python解释器shutting down，则返回True，否则返回False" }, { "name": "sys.setcheckinterval", "type": "sys", "path": "python/sys.html#sys.setcheckinterval", "desc": "设置解释器的“检查间隔”" }, { "name": "sys.setdlopenflags", "type": "sys", "path": "python/sys.html#sys.setdlopenflags", "desc": "设置解释器用于dlopen()调用的标志，例如当解释器加载扩展模块时" }, { "name": "sys.setrecursionlimit", "type": "sys", "path": "python/sys.html#sys.setrecursionlimit", "desc": "将Python解释器堆栈的最大深度设置为limit" }, { "name": "sys.setswitchinterval", "type": "sys", "path": "python/sys.html#sys.setswitchinterval", "desc": "设置解释器的线程切换间隔（以秒为单位）" }, { "name": "sys.settrace", "type": "sys", "path": "python/sys.html#sys.settrace", "desc": "设置系统的跟踪功能，它允许你在Python中实现一个Python源代码调试器" }, { "name": "sys.settscdump", "type": "sys", "path": "python/sys.html#sys.settscdump", "desc": "如果on_flag为真，则使用Pentium时间戳计数器激活VM测量结果的转储" }, { "name": "sys.set_coroutine_wrapper", "type": "sys", "path": "python/sys.html#sys.set_coroutine_wrapper", "desc": "Allows intercepting creation of coroutine objects (only ones that are created by an async def function; generators decorated with types" }, { "name": "sys.abiflags", "type": "sys", "path": "python/sys.html#sys.abiflags", "desc": "在使用标准configure脚本构建Python的POSIX系统上，它包含由 PEP 3149指定的ABI标志" }, { "name": "sys.argv", "type": "sys", "path": "python/sys.html#sys.argv", "desc": "传递给Python脚本的命令行参数列表" }, { "name": "sys.base_exec_prefix", "type": "sys", "path": "python/sys.html#sys.base_exec_prefix", "desc": "在Python启动过程中，在site" }, { "name": "sys.base_prefix", "type": "sys", "path": "python/sys.html#sys.base_prefix", "desc": "在Python启动过程中，在site" }, { "name": "sys.byteorder", "type": "sys", "path": "python/sys.html#sys.byteorder", "desc": "本地字节顺序的指示符" }, { "name": "sys.builtin_module_names", "type": "sys", "path": "python/sys.html#sys.builtin_module_names", "desc": "一个字符串元组，给出了编译到这个Python解释器中的所有模块的名称" }, { "name": "sys.copyright", "type": "sys", "path": "python/sys.html#sys.copyright", "desc": "包含与Python解释器相关的版权的字符串" }, { "name": "sys.dllhandle", "type": "sys", "path": "python/sys.html#sys.dllhandle", "desc": "整数指定Python DLL的句柄" }, { "name": "sys.dont_write_bytecode", "type": "sys", "path": "python/sys.html#sys.dont_write_bytecode", "desc": "如果这是真的，Python将不会尝试在导入源模块时编写" }, { "name": "sys.__displayhook__", "type": "sys", "path": "python/sys.html#sys.__displayhook__", "desc": "这些对象在程序开始时包含displayhook和excepthook的原始值" }, { "name": "sys.exec_prefix", "type": "sys", "path": "python/sys.html#sys.exec_prefix", "desc": "一个字符串，其中给出了特定于站点的目录前缀，其中安装了与平台相关的Python文件；默认情况下，这也是'/usr/local'" }, { "name": "sys.executable", "type": "sys", "path": "python/sys.html#sys.executable", "desc": "一个字符串，给出Python解释器的可执行二进制文件的绝对路径，在这种情况下是合理的" }, { "name": "sys.flags", "type": "sys", "path": "python/sys.html#sys.flags", "desc": "struct sequence flags暴露了命令行标志的状态" }, { "name": "sys.float_info", "type": "sys", "path": "python/sys.html#sys.float_info", "desc": "包含关于浮点类型信息的struct sequence" }, { "name": "sys.float_repr_style", "type": "sys", "path": "python/sys.html#sys.float_repr_style", "desc": "一个字符串，指示repr()函数如何为浮点操作" }, { "name": "sys.hash_info", "type": "sys", "path": "python/sys.html#sys.hash_info", "desc": "给出数字散列实现参数的struct sequence" }, { "name": "sys.hexversion", "type": "sys", "path": "python/sys.html#sys.hexversion", "desc": "版本号编码为单个整数" }, { "name": "sys.implementation", "type": "sys", "path": "python/sys.html#sys.implementation", "desc": "包含有关当前正在运行的Python解释器的实现信息的对象" }, { "name": "sys.int_info", "type": "sys", "path": "python/sys.html#sys.int_info", "desc": "一个struct sequence，它包含关于Python内部整数表示的信息" }, { "name": "sys.__interactivehook__", "type": "sys", "path": "python/sys.html#sys.__interactivehook__", "desc": "当该属性存在时，当解释器以interactive mode启动时，它的值会自动调用（不带参数）" }, { "name": "sys.last_type", "type": "sys", "path": "python/sys.html#sys.last_type", "desc": "这三个变量并不总是被定义的；它们在未处理异常时设置，并且解释器打印错误消息和堆栈回溯" }, { "name": "sys.maxsize", "type": "sys", "path": "python/sys.html#sys.maxsize", "desc": "一个给出最大值的整数是一个Py_ssize_t类型的变量" }, { "name": "sys.maxunicode", "type": "sys", "path": "python/sys.html#sys.maxunicode", "desc": "一个给出最大Unicode码点值的整数，即1114111（0x10FFFF，十六进制）" }, { "name": "sys.meta_path", "type": "sys", "path": "python/sys.html#sys.meta_path", "desc": "调用其find_spec()方法的meta path finder对象的列表，以查看其中一个对象是否可以找到要导入的模块" }, { "name": "sys.modules", "type": "sys", "path": "python/sys.html#sys.modules", "desc": "这是一个将模块名称映射到已经加载的模块的字典" }, { "name": "sys.path", "type": "sys", "path": "python/sys.html#sys.path", "desc": "指定模块搜索路径的字符串列表" }, { "name": "sys.path_hooks", "type": "sys", "path": "python/sys.html#sys.path_hooks", "desc": "可以使用路径参数尝试为路径创建finder的可调用列表" }, { "name": "sys.path_importer_cache", "type": "sys", "path": "python/sys.html#sys.path_importer_cache", "desc": "作为finder对象缓存的字典" }, { "name": "sys.platform", "type": "sys", "path": "python/sys.html#sys.platform", "desc": "例如，该字符串包含一个平台标识符，可用于将特定于平台的组件附加到sys" }, { "name": "sys.prefix", "type": "sys", "path": "python/sys.html#sys.prefix", "desc": "一个字符串，它给出了特定于站点的目录前缀，其中安装了与平台无关的Python文件；默认情况下，这是字符串'/usr/local'" }, { "name": "sys.ps1", "type": "sys", "path": "python/sys.html#sys.ps1", "desc": "指定解释器的主要和次要提示的字符串" }, { "name": "sys.stdin", "type": "sys", "path": "python/sys.html#sys.stdin", "desc": "解释器用于标准输入，输出和错误的File objects：" }, { "name": "sys.__stdin__", "type": "sys", "path": "python/sys.html#sys.__stdin__", "desc": "这些对象在程序开始时包含stdin，stderr和stdout的原始值" }, { "name": "sys.thread_info", "type": "sys", "path": "python/sys.html#sys.thread_info", "desc": "包含关于线程实现的信息的struct sequence" }, { "name": "sys.tracebacklimit", "type": "sys", "path": "python/sys.html#sys.tracebacklimit", "desc": "当此变量设置为整数值时，它确定发生未处理的异常时打印的追溯信息的最大级别数" }, { "name": "sys.version", "type": "sys", "path": "python/sys.html#sys.version", "desc": "一个字符串，其中包含Python解释器的版本号以及所使用的内部版本号和编译器的附加信息" }, { "name": "sys.api_version", "type": "sys", "path": "python/sys.html#sys.api_version", "desc": "此解释器的C API版本" }, { "name": "sys.version_info", "type": "sys", "path": "python/sys.html#sys.version_info", "desc": "一个包含版本号五个组成部分的元组：major、minor、micro、releaselevel和serial" }, { "name": "sys.warnoptions", "type": "sys", "path": "python/sys.html#sys.warnoptions", "desc": "这是警告框架的实施细节；不要修改这个值" }, { "name": "sys.winver", "type": "sys", "path": "python/sys.html#sys.winver", "desc": "用于在Windows平台上形成注册表项的版本号" }, { "name": "sys._xoptions", "type": "sys", "path": "python/sys.html#sys._xoptions", "desc": "通过-X命令行选项传递的各种实现特定标志的字典" }, { "name": "sysconfig.get_config_vars", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_config_vars", "desc": "没有参数，返回与当前平台相关的所有配置变量的字典" }, { "name": "sysconfig.get_config_var", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_config_var", "desc": "返回单个变量名称的值" }, { "name": "sysconfig.get_scheme_names", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_scheme_names", "desc": "返回包含sysconfig中当前支持的所有方案的元组" }, { "name": "sysconfig.get_path_names", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_path_names", "desc": "返回包含当前在sysconfig中支持的所有路径名的元组" }, { "name": "sysconfig.get_path", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_path", "desc": "从名为方案的安装方案中返回与路径名称对应的安装路径" }, { "name": "sysconfig.get_paths", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_paths", "desc": "返回包含与安装方案对应的所有安装路径的字典" }, { "name": "sysconfig.get_python_version", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_python_version", "desc": "将MAJOR" }, { "name": "sysconfig.get_platform", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_platform", "desc": "返回一个标识当前平台的字符串" }, { "name": "sysconfig.is_python_build", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.is_python_build", "desc": "如果当前Python安装是从源代码构建的，则返回True" }, { "name": "sysconfig.parse_config_h", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.parse_config_h", "desc": "解析config" }, { "name": "sysconfig.get_config_h_filename", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_config_h_filename", "desc": "返回pyconfig" }, { "name": "sysconfig.get_makefile_filename", "type": "sysconfig", "path": "python/sysconfig.html#sysconfig.get_makefile_filename", "desc": "返回Makefile的路径" }, { "name": "syslog.syslog", "type": "syslog", "path": "python/syslog.html#syslog.syslog", "desc": "将字符串消息发送到系统记录器" }, { "name": "syslog.openlog", "type": "syslog", "path": "python/syslog.html#syslog.openlog", "desc": "可以通过调用openlog()来设置后续syslog()调用的日志记录选项" }, { "name": "syslog.closelog", "type": "syslog", "path": "python/syslog.html#syslog.closelog", "desc": "重置系统日志模块值并调用系统库closelog()" }, { "name": "syslog.setlogmask", "type": "syslog", "path": "python/syslog.html#syslog.setlogmask", "desc": "将优先级掩码设置为maskpri，并返回上一个掩码值" }, { "name": "tabnanny.check", "type": "tabnanny", "path": "python/tabnanny.html#tabnanny.check", "desc": "如果file_or_dir是目录而不是符号链接，则递归下降由file_or_dir命名的目录树，检查所有" }, { "name": "tabnanny.tokeneater", "type": "tabnanny", "path": "python/tabnanny.html#tabnanny.tokeneater", "desc": "此函数由check()用作函数tokenize" }, { "name": "tabnanny.verbose", "type": "tabnanny", "path": "python/tabnanny.html#tabnanny.verbose", "desc": "指示是否打印详细消息的标志" }, { "name": "tabnanny.filename_only", "type": "tabnanny", "path": "python/tabnanny.html#tabnanny.filename_only", "desc": "指示是否仅打印包含空格相关问题的文件的文件名的标志" }, { "name": "tarfile.open", "type": "tarfile", "path": "python/tarfile.html#tarfile.open", "desc": "为路径名名称返回TarFile对象" }, { "name": "tarfile.is_tarfile", "type": "tarfile", "path": "python/tarfile.html#tarfile.is_tarfile", "desc": "返回True如果名称是tar存档文件，tarfile模块可以读取" }, { "name": "tarfile.ENCODING", "type": "tarfile", "path": "python/tarfile.html#tarfile.ENCODING", "desc": "Windows上的默认字符编码：'utf-8'否则为sys" }, { "name": "tarfile.USTAR_FORMAT", "type": "tarfile", "path": "python/tarfile.html#tarfile.USTAR_FORMAT", "desc": "POSIX" }, { "name": "tarfile.GNU_FORMAT", "type": "tarfile", "path": "python/tarfile.html#tarfile.GNU_FORMAT", "desc": "GNU tar格式" }, { "name": "tarfile.PAX_FORMAT", "type": "tarfile", "path": "python/tarfile.html#tarfile.PAX_FORMAT", "desc": "POSIX" }, { "name": "tarfile.DEFAULT_FORMAT", "type": "tarfile", "path": "python/tarfile.html#tarfile.DEFAULT_FORMAT", "desc": "用于创建归档的默认格式" }, { "name": "tempfile.TemporaryFile", "type": "tempfile", "path": "python/tempfile.html#tempfile.TemporaryFile", "desc": "返回一个类文件对象以提供临时的数据存储空间" }, { "name": "tempfile.NamedTemporaryFile", "type": "tempfile", "path": "python/tempfile.html#tempfile.NamedTemporaryFile", "desc": "此函数与TemporaryFile()完全一样，除了文件保证在文件系统中有一个可见的名称（在Unix上，目录项没有取消链接）" }, { "name": "tempfile.SpooledTemporaryFile", "type": "tempfile", "path": "python/tempfile.html#tempfile.SpooledTemporaryFile", "desc": "This function operates exactly as TemporaryFile() does, except that data is spooled in memory until the file size exceeds max_size, or until the file’s fileno() method is called, at which point the contents are written to disk and operation proceeds as with TemporaryFile()" }, { "name": "tempfile.TemporaryDirectory", "type": "tempfile", "path": "python/tempfile.html#tempfile.TemporaryDirectory", "desc": "此函数使用与mkdtemp()相同的规则安全地创建临时目录" }, { "name": "tempfile.mkstemp", "type": "tempfile", "path": "python/tempfile.html#tempfile.mkstemp", "desc": "以最安全的方式创建临时文件" }, { "name": "tempfile.mkdtemp", "type": "tempfile", "path": "python/tempfile.html#tempfile.mkdtemp", "desc": "以最安全的方式创建临时目录" }, { "name": "tempfile.gettempdir", "type": "tempfile", "path": "python/tempfile.html#tempfile.gettempdir", "desc": "返回用于临时文件的目录的名称" }, { "name": "tempfile.gettempdirb", "type": "tempfile", "path": "python/tempfile.html#tempfile.gettempdirb", "desc": "与gettempdir()相同，但返回值以字节为单位" }, { "name": "tempfile.gettempprefix", "type": "tempfile", "path": "python/tempfile.html#tempfile.gettempprefix", "desc": "返回用于创建临时文件的文件名前缀" }, { "name": "tempfile.gettempprefixb", "type": "tempfile", "path": "python/tempfile.html#tempfile.gettempprefixb", "desc": "与gettempprefix()相同，但返回值以字节为单位" }, { "name": "tempfile.mktemp", "type": "tempfile", "path": "python/tempfile.html#tempfile.mktemp", "desc": "从版本2" }, { "name": "tempfile.tempdir", "type": "tempfile", "path": "python/tempfile.html#tempfile.tempdir", "desc": "当设置为除None之外的值时，此变量为此模块中定义的所有函数定义dir参数的默认值" }, { "name": "termios.tcgetattr", "type": "termios", "path": "python/termios.html#termios.tcgetattr", "desc": "Return a list containing the tty attributes for file descriptor fd, as follows: [iflag, oflag, cflag, lflag, ispeed, ospeed, cc] where cc is a list of the tty special characters (each a string of length 1, except the items with indices VMIN and VTIME, which are integers when these fields are defined)" }, { "name": "termios.tcsetattr", "type": "termios", "path": "python/termios.html#termios.tcsetattr", "desc": "从属性中设置文件描述器fd的tty属性，这是像tcgetattr()返回的列表" }, { "name": "termios.tcsendbreak", "type": "termios", "path": "python/termios.html#termios.tcsendbreak", "desc": "发送休息描述器fd" }, { "name": "termios.tcdrain", "type": "termios", "path": "python/termios.html#termios.tcdrain", "desc": "等待直到所有写入文件描述器fd的输出被发送" }, { "name": "termios.tcflush", "type": "termios", "path": "python/termios.html#termios.tcflush", "desc": "舍弃队列中的数据描述器fd" }, { "name": "termios.tcflow", "type": "termios", "path": "python/termios.html#termios.tcflow", "desc": "暂停或继续输入或输出到文件描述器fd" }, { "name": "test.support.forget", "type": "test", "path": "python/test.html#test.support.forget", "desc": "从sys" }, { "name": "test.support.is_resource_enabled", "type": "test", "path": "python/test.html#test.support.is_resource_enabled", "desc": "如果资源已启用并可用，则返回True" }, { "name": "test.support.requires", "type": "test", "path": "python/test.html#test.support.requires", "desc": "引发ResourceDenied如果资源不可用" }, { "name": "test.support.findfile", "type": "test", "path": "python/test.html#test.support.findfile", "desc": "返回到名为filename的文件的路径" }, { "name": "test.support.run_unittest", "type": "test", "path": "python/test.html#test.support.run_unittest", "desc": "执行传递给函数的unittest" }, { "name": "test.support.run_doctest", "type": "test", "path": "python/test.html#test.support.run_doctest", "desc": "在给定的模块上运行doctest" }, { "name": "test.support.check_warnings", "type": "test", "path": "python/test.html#test.support.check_warnings", "desc": "warnings" }, { "name": "test.support.captured_stdin", "type": "test", "path": "python/test.html#test.support.captured_stdin", "desc": "使用io" }, { "name": "test.support.temp_dir", "type": "test", "path": "python/test.html#test.support.temp_dir", "desc": "在路径创建临时目录并生成目录的上下文管理器" }, { "name": "test.support.change_cwd", "type": "test", "path": "python/test.html#test.support.change_cwd", "desc": "临时将当前工作目录更改为路径并生成目录的上下文管理器" }, { "name": "test.support.temp_cwd", "type": "test", "path": "python/test.html#test.support.temp_cwd", "desc": "临时创建新目录并更改当前工作目录（CWD）的上下文管理器" }, { "name": "test.support.temp_umask", "type": "test", "path": "python/test.html#test.support.temp_umask", "desc": "临时设置进程umask的上下文管理器" }, { "name": "test.support.can_symlink", "type": "test", "path": "python/test.html#test.support.can_symlink", "desc": "如果操作系统支持符号链接，则返回True，否则返回False" }, { "name": "test.support.skip_unless_symlink", "type": "test", "path": "python/test.html#test.support.skip_unless_symlink", "desc": "一个装饰器，用于运行需要支持符号链接的测试" }, { "name": "test.support.anticipate_failure", "type": "test", "path": "python/test.html#test.support.anticipate_failure", "desc": "有条件地使用unittest" }, { "name": "test.support.run_with_locale", "type": "test", "path": "python/test.html#test.support.run_with_locale", "desc": "装饰器，用于在不同的场所运行功能，在完成后正确地重置它" }, { "name": "test.support.make_bad_fd", "type": "test", "path": "python/test.html#test.support.make_bad_fd", "desc": "通过打开和关闭临时文件，并返回其描述器，创建一个无效的文件描述器" }, { "name": "test.support.import_module", "type": "test", "path": "python/test.html#test.support.import_module", "desc": "此函数导入并返回指定的模块" }, { "name": "test.support.import_fresh_module", "type": "test", "path": "python/test.html#test.support.import_fresh_module", "desc": "此函数通过在执行导入之前从sys" }, { "name": "test.support.bind_port", "type": "test", "path": "python/test.html#test.support.bind_port", "desc": "将套接字绑定到一个空闲端口并返回端口号" }, { "name": "test.support.find_unused_port", "type": "test", "path": "python/test.html#test.support.find_unused_port", "desc": "返回应该适合绑定的未使用端口" }, { "name": "test.support.load_package_tests", "type": "test", "path": "python/test.html#test.support.load_package_tests", "desc": "通用实现用于测试包的unittest load_tests协议" }, { "name": "test.support.verbose", "type": "test", "path": "python/test.html#test.support.verbose", "desc": "True时启用详细输出" }, { "name": "test.support.is_jython", "type": "test", "path": "python/test.html#test.support.is_jython", "desc": "True如果正在运行的解释器是Jython" }, { "name": "test.support.TESTFN", "type": "test", "path": "python/test.html#test.support.TESTFN", "desc": "设置为可安全用作临时文件名称的名称" }, { "name": "textwrap.wrap", "type": "textwrap", "path": "python/textwrap.html#textwrap.wrap", "desc": "将单个段落包含在text（一个字符串）中，以使每行最多width个字符长" }, { "name": "textwrap.fill", "type": "textwrap", "path": "python/textwrap.html#textwrap.fill", "desc": "将单个段落包含在文本中，并返回包含包装段落的单个字符串" }, { "name": "textwrap.shorten", "type": "textwrap", "path": "python/textwrap.html#textwrap.shorten", "desc": "折叠并截断给定的文本以适合给定的宽度" }, { "name": "textwrap.dedent", "type": "textwrap", "path": "python/textwrap.html#textwrap.dedent", "desc": "从文本中的每一行中删除任何常见的前导空格" }, { "name": "textwrap.indent", "type": "textwrap", "path": "python/textwrap.html#textwrap.indent", "desc": "将前缀添加到文本中选定行的开头" }, { "name": "threading.active_count", "type": "threading", "path": "python/threading.html#threading.active_count", "desc": "返回当前处于alive状态的Thread对象的个数" }, { "name": "threading.current_thread", "type": "threading", "path": "python/threading.html#threading.current_thread", "desc": "返回当前的Thread对象，对应于调用者控制的线程" }, { "name": "threading.get_ident", "type": "threading", "path": "python/threading.html#threading.get_ident", "desc": "返回当前线程的'线程标识符'" }, { "name": "threading.enumerate", "type": "threading", "path": "python/threading.html#threading.enumerate", "desc": "返回当前活着的Thread对象的列表" }, { "name": "threading.main_thread", "type": "threading", "path": "python/threading.html#threading.main_thread", "desc": "返回主 Thread 对象" }, { "name": "threading.settrace", "type": "threading", "path": "python/threading.html#threading.settrace", "desc": "为所有从threading模块启动的线程设置一个跟踪函数" }, { "name": "threading.setprofile", "type": "threading", "path": "python/threading.html#threading.setprofile", "desc": "为所有从threading模块启动的线程设置一个profile函数" }, { "name": "threading.stack_size", "type": "threading", "path": "python/threading.html#threading.stack_size", "desc": "返回创建新的线程时该线程使用的栈的大小" }, { "name": "threading.TIMEOUT_MAX", "type": "threading", "path": "python/threading.html#threading.TIMEOUT_MAX", "desc": "这个 timeout参数表示阻塞函数 (Lock" }, { "name": "time.asctime", "type": "time", "path": "python/time.html#time.asctime", "desc": "将表示由gmtime()或localtime()返回的时间的元组或struct_time转换为以下形式的字符串：'Sun Jun 20 23:21:05 1993' " }, { "name": "time.clock", "type": "time", "path": "python/time.html#time.clock", "desc": "在Unix上，返回当前处理器时间，以浮点数表示，以秒为单位" }, { "name": "time.clock_getres", "type": "time", "path": "python/time.html#time.clock_getres", "desc": "返回指定时钟clk_id的分辨率（精度）" }, { "name": "time.clock_gettime", "type": "time", "path": "python/time.html#time.clock_gettime", "desc": "返回指定时钟clk_id的时间" }, { "name": "time.clock_settime", "type": "time", "path": "python/time.html#time.clock_settime", "desc": "设置指定时钟clk_id的时间" }, { "name": "time.ctime", "type": "time", "path": "python/time.html#time.ctime", "desc": "将从纪元开始以秒表示的时间转换为表示本地时间的字符串" }, { "name": "time.get_clock_info", "type": "time", "path": "python/time.html#time.get_clock_info", "desc": "获取指定时钟作为命名空间对象的信息" }, { "name": "time.gmtime", "type": "time", "path": "python/time.html#time.gmtime", "desc": "将从纪元开始以秒表示的时间转换为UTC中的struct_time，其中dst标志始终为零" }, { "name": "time.localtime", "type": "time", "path": "python/time.html#time.localtime", "desc": "像gmtime()但转换为本地时间" }, { "name": "time.mktime", "type": "time", "path": "python/time.html#time.mktime", "desc": "这是localtime()的反函数" }, { "name": "time.monotonic", "type": "time", "path": "python/time.html#time.monotonic", "desc": "返回单调时钟的值（以分秒为单位），即一个不能倒退的时钟" }, { "name": "time.perf_counter", "type": "time", "path": "python/time.html#time.perf_counter", "desc": "返回性能计数器的值（以分数秒为单位），即具有最高可用分辨率的时钟来测量短持续时间" }, { "name": "time.process_time", "type": "time", "path": "python/time.html#time.process_time", "desc": "返回当前进程的系统和用户CPU时间之和的值（以分数秒为单位）" }, { "name": "time.sleep", "type": "time", "path": "python/time.html#time.sleep", "desc": "在给定的秒数内挂起调用线程的执行" }, { "name": "time.strftime", "type": "time", "path": "python/time.html#time.strftime", "desc": "将表示由gmtime()或localtime()返回的时间的元组或struct_time转换为由格式指定的字符串参数" }, { "name": "time.strptime", "type": "time", "path": "python/time.html#time.strptime", "desc": "根据格式解析表示时间的字符串" }, { "name": "time.time", "type": "time", "path": "python/time.html#time.time", "desc": "以秒为单位返回作为浮点数的时间" }, { "name": "time.tzset", "type": "time", "path": "python/time.html#time.tzset", "desc": "重置库例程使用的时间转换规则" }, { "name": "time.altzone", "type": "time", "path": "python/time.html#time.altzone", "desc": "默认情况返回一个以秒为单位UTC的本地DST时区偏移量，如果本地DST时区在UTC的东部（如在西欧，包括英国），则为负" }, { "name": "time.CLOCK_HIGHRES", "type": "time", "path": "python/time.html#time.CLOCK_HIGHRES", "desc": "Solaris OS具有CLOCK_HIGHRES定时器，该定时器尝试使用最佳硬件源，并且可以提供接近纳秒的分辨率" }, { "name": "time.CLOCK_MONOTONIC", "type": "time", "path": "python/time.html#time.CLOCK_MONOTONIC", "desc": "无法设置的时钟，表示自某些未指定的起点后的单调时间" }, { "name": "time.CLOCK_MONOTONIC_RAW", "type": "time", "path": "python/time.html#time.CLOCK_MONOTONIC_RAW", "desc": "类似于CLOCK_MONOTONIC，但提供对不受NTP调整的基于硬件的原始时间的访问" }, { "name": "time.CLOCK_PROCESS_CPUTIME_ID", "type": "time", "path": "python/time.html#time.CLOCK_PROCESS_CPUTIME_ID", "desc": "来自CPU的高分辨率每进程定时器" }, { "name": "time.CLOCK_REALTIME", "type": "time", "path": "python/time.html#time.CLOCK_REALTIME", "desc": "系统级实时时钟" }, { "name": "time.CLOCK_THREAD_CPUTIME_ID", "type": "time", "path": "python/time.html#time.CLOCK_THREAD_CPUTIME_ID", "desc": "线程特定的CPU时钟" }, { "name": "time.daylight", "type": "time", "path": "python/time.html#time.daylight", "desc": "如果定义了DST时区，则为非零" }, { "name": "time.timezone", "type": "time", "path": "python/time.html#time.timezone", "desc": "本地（非DST）时区的偏移量，以UTC以内的秒为单位（西欧大部分地区为负，美国为正，英国为零）" }, { "name": "time.tzname", "type": "time", "path": "python/time.html#time.tzname", "desc": "两个字符串的元组：第一个是本地非DST时区的名称，第二个是本地DST时区的名称" }, { "name": "timeit.timeit", "type": "timeit", "path": "python/timeit.html#timeit.timeit", "desc": "用给定的statement，setup代码和timer函数创建一个Timer实例，然后运行它的timeit()方法执行number指定的次数" }, { "name": "timeit.repeat", "type": "timeit", "path": "python/timeit.html#timeit.repeat", "desc": "用给定的statement，setup代码和timer函数创建一个Timer实例，并循环运行repeat()方法直到repeat指定的计数，每次计数中代码运行number指定的执行次数" }, { "name": "timeit.default_timer", "type": "timeit", "path": "python/timeit.html#timeit.default_timer", "desc": "默认计时器，始终为time" }, { "name": "tkinter.Tcl", "type": "tkinter", "path": "python/tkinter.html#tkinter.Tcl", "desc": "Tcl() 函数是一个工厂函数，创造了一个像那样 Tk 类创建的对象，除了它不会初始化Tk 子系统" }, { "name": "tkinter.READABLE", "type": "tkinter", "path": "python/tkinter.html#tkinter.READABLE", "desc": "在掩码参数中使用的常量" }, { "name": "token.ISTERMINAL", "type": "token", "path": "python/token.html#token.ISTERMINAL", "desc": "对终端令牌值返回true" }, { "name": "token.ISNONTERMINAL", "type": "token", "path": "python/token.html#token.ISNONTERMINAL", "desc": "对非终端令牌值返回true" }, { "name": "token.ISEOF", "type": "token", "path": "python/token.html#token.ISEOF", "desc": "如果x是指示输入结束的标记，则返回true" }, { "name": "token.tok_name", "type": "token", "path": "python/token.html#token.tok_name", "desc": "将此模块中定义的常量的数字值映射回名称字符串的字典，从而允许生成更加人性化的解析树表示" }, { "name": "token.ENDMARKER", "type": "token", "path": "python/token.html#token.ENDMARKER", "desc": "在3" }, { "name": "tokenize.tokenize", "type": "tokenize", "path": "python/tokenize.html#tokenize.tokenize", "desc": "tokenize()生成器需要一个参数readline，它必须是一个可调用对象，它提供与io" }, { "name": "tokenize.untokenize", "type": "tokenize", "path": "python/tokenize.html#tokenize.untokenize", "desc": "将令牌转换回Python源代码" }, { "name": "tokenize.detect_encoding", "type": "tokenize", "path": "python/tokenize.html#tokenize.detect_encoding", "desc": "detect_encoding()函数用于检测应用于解码Python源文件的编码" }, { "name": "tokenize.open", "type": "tokenize", "path": "python/tokenize.html#tokenize.open", "desc": "使用由detect_encoding()检测到的编码以只读模式打开文件" }, { "name": "tokenize.COMMENT", "type": "tokenize", "path": "python/tokenize.html#tokenize.COMMENT", "desc": "用于表示注释的令牌值" }, { "name": "tokenize.NL", "type": "tokenize", "path": "python/tokenize.html#tokenize.NL", "desc": "用于表示非终止换行符的令牌值" }, { "name": "tokenize.ENCODING", "type": "tokenize", "path": "python/tokenize.html#tokenize.ENCODING", "desc": "表示用于将源字节解码为文本的编码的令牌值" }, { "name": "traceback.print_tb", "type": "traceback", "path": "python/traceback.html#traceback.print_tb", "desc": "如果limit为正，则从跟踪对象tb打印限制堆栈跟踪条目" }, { "name": "traceback.print_exception", "type": "traceback", "path": "python/traceback.html#traceback.print_exception", "desc": "从追踪对象tb到文件中打印异常信息和堆栈跟踪条目" }, { "name": "traceback.print_exc", "type": "traceback", "path": "python/traceback.html#traceback.print_exc", "desc": "这是print_exception（* sys" }, { "name": "traceback.print_last", "type": "traceback", "path": "python/traceback.html#traceback.print_last", "desc": "这是print_exception（sys" }, { "name": "traceback.print_stack", "type": "traceback", "path": "python/traceback.html#traceback.print_stack", "desc": "如果limit为正，则打印到limit堆栈跟踪条目（从调用点开始）" }, { "name": "traceback.extract_tb", "type": "traceback", "path": "python/traceback.html#traceback.extract_tb", "desc": "返回从追溯对象tb提取的“预处理”堆栈跟踪条目的列表" }, { "name": "traceback.extract_stack", "type": "traceback", "path": "python/traceback.html#traceback.extract_stack", "desc": "从当前堆栈帧提取原始追溯" }, { "name": "traceback.format_list", "type": "traceback", "path": "python/traceback.html#traceback.format_list", "desc": "给定由extract_tb()或extract_stack()返回的元组列表，返回一个准备打印的字符串列表" }, { "name": "traceback.format_exception_only", "type": "traceback", "path": "python/traceback.html#traceback.format_exception_only", "desc": "格式化回溯的异常部分" }, { "name": "traceback.format_exception", "type": "traceback", "path": "python/traceback.html#traceback.format_exception", "desc": "格式化堆栈跟踪和异常信息" }, { "name": "traceback.format_exc", "type": "traceback", "path": "python/traceback.html#traceback.format_exc", "desc": "这类似于print_exc(limit)但返回一个字符串，而不是打印到文件" }, { "name": "traceback.format_tb", "type": "traceback", "path": "python/traceback.html#traceback.format_tb", "desc": "format_list（extract_tb（tb， limit））的简写" }, { "name": "traceback.format_stack", "type": "traceback", "path": "python/traceback.html#traceback.format_stack", "desc": "format_list（extract_stack（f， limit））的简写" }, { "name": "traceback.clear_frames", "type": "traceback", "path": "python/traceback.html#traceback.clear_frames", "desc": "通过调用每个帧对象的clear()方法，清除回溯tb中所有堆栈帧的局部变量" }, { "name": "traceback.walk_stack", "type": "traceback", "path": "python/traceback.html#traceback.walk_stack", "desc": "从给定帧中跟踪f" }, { "name": "traceback.walk_tb", "type": "traceback", "path": "python/traceback.html#traceback.walk_tb", "desc": "在tb_next之后执行回溯，得到每个帧的帧和行号" }, { "name": "tracemalloc.clear_traces", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.clear_traces", "desc": "清除Python分配的内存块的痕迹" }, { "name": "tracemalloc.get_object_traceback", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.get_object_traceback", "desc": "获取分配了Python对象obj的traceback" }, { "name": "tracemalloc.get_traceback_limit", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.get_traceback_limit", "desc": "获取跟踪的回溯中存储的最大帧数" }, { "name": "tracemalloc.get_traced_memory", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.get_traced_memory", "desc": "以tracemalloc模块作为元组获取由其跟踪的内存块的当前大小和峰值大小：（current： int，  peak： int）" }, { "name": "tracemalloc.get_tracemalloc_memory", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.get_tracemalloc_memory", "desc": "获取用于存储内存块的跟踪的tracemalloc模块的内存使用情况（以字节为单位）" }, { "name": "tracemalloc.is_tracing", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.is_tracing", "desc": "True如果tracemalloc模块正在跟踪Python内存分配，则False" }, { "name": "tracemalloc.start", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.start", "desc": "开始跟踪Python内存分配：在Python内存分配器上安装钩子" }, { "name": "tracemalloc.stop", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.stop", "desc": "停止跟踪Python内存分配：卸载Python内存分配器上的钩子" }, { "name": "tracemalloc.take_snapshot", "type": "tracemalloc", "path": "python/tracemalloc.html#tracemalloc.take_snapshot", "desc": "对由Python分配的内存块的痕迹进行快照" }, { "name": "tty.setraw", "type": "tty", "path": "python/tty.html#tty.setraw", "desc": "将文件描述器fd的模式更改为raw" }, { "name": "tty.setcbreak", "type": "tty", "path": "python/tty.html#tty.setcbreak", "desc": "将文件描述器fd的模式更改为cbreak" }, { "name": "turtle.forward", "type": "turtle", "path": "python/turtle.html#turtle.forward", "desc": "按照指定的距离将龟向前移动" }, { "name": "turtle.back", "type": "turtle", "path": "python/turtle.html#turtle.back", "desc": "Move the turtle backward by distance, opposite to the direction the turtle is headed" }, { "name": "turtle.right", "type": "turtle", "path": "python/turtle.html#turtle.right", "desc": "Turn turtle right by angle units" }, { "name": "turtle.left", "type": "turtle", "path": "python/turtle.html#turtle.left", "desc": "Turn turtle left by angle units" }, { "name": "turtle.goto", "type": "turtle", "path": "python/turtle.html#turtle.goto", "desc": "If y is None, x must be a pair of coordinates or a Vec2D (e" }, { "name": "turtle.setx", "type": "turtle", "path": "python/turtle.html#turtle.setx", "desc": "Set the turtle’s first coordinate to x, leave second coordinate unchanged" }, { "name": "turtle.sety", "type": "turtle", "path": "python/turtle.html#turtle.sety", "desc": "Set the turtle’s second coordinate to y, leave first coordinate unchanged" }, { "name": "turtle.setheading", "type": "turtle", "path": "python/turtle.html#turtle.setheading", "desc": "Set the orientation of the turtle to to_angle" }, { "name": "turtle.home", "type": "turtle", "path": "python/turtle.html#turtle.home", "desc": "Move turtle to the origin – coordinates (0,0) – and set its heading to its start-orientation (which depends on the mode, see mode())" }, { "name": "turtle.circle", "type": "turtle", "path": "python/turtle.html#turtle.circle", "desc": "用给定的半径绘制一个圆圈" }, { "name": "turtle.dot", "type": "turtle", "path": "python/turtle.html#turtle.dot", "desc": "Draw a circular dot with diameter size, using color" }, { "name": "turtle.stamp", "type": "turtle", "path": "python/turtle.html#turtle.stamp", "desc": "Stamp a copy of the turtle shape onto the canvas at the current turtle position" }, { "name": "turtle.clearstamp", "type": "turtle", "path": "python/turtle.html#turtle.clearstamp", "desc": "Delete stamp with given stampid" }, { "name": "turtle.clearstamps", "type": "turtle", "path": "python/turtle.html#turtle.clearstamps", "desc": "Delete all or first/last n of turtle’s stamps" }, { "name": "turtle.undo", "type": "turtle", "path": "python/turtle.html#turtle.undo", "desc": "Undo (repeatedly) the last turtle action(s)" }, { "name": "turtle.speed", "type": "turtle", "path": "python/turtle.html#turtle.speed", "desc": "Set the turtle’s speed to an integer value in the range 0" }, { "name": "turtle.position", "type": "turtle", "path": "python/turtle.html#turtle.position", "desc": "Return the turtle’s current location (x,y) (as a Vec2D vector)" }, { "name": "turtle.towards", "type": "turtle", "path": "python/turtle.html#turtle.towards", "desc": "Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle" }, { "name": "turtle.xcor", "type": "turtle", "path": "python/turtle.html#turtle.xcor", "desc": "Return the turtle’s x coordinate" }, { "name": "turtle.ycor", "type": "turtle", "path": "python/turtle.html#turtle.ycor", "desc": "Return the turtle’s y coordinate" }, { "name": "turtle.heading", "type": "turtle", "path": "python/turtle.html#turtle.heading", "desc": "Return the turtle’s current heading (value depends on the turtle mode, see mode())" }, { "name": "turtle.distance", "type": "turtle", "path": "python/turtle.html#turtle.distance", "desc": "Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units" }, { "name": "turtle.degrees", "type": "turtle", "path": "python/turtle.html#turtle.degrees", "desc": "Set angle measurement units, i" }, { "name": "turtle.radians", "type": "turtle", "path": "python/turtle.html#turtle.radians", "desc": "Set the angle measurement units to radians" }, { "name": "turtle.pendown", "type": "turtle", "path": "python/turtle.html#turtle.pendown", "desc": "Pull the pen down – drawing when moving" }, { "name": "turtle.penup", "type": "turtle", "path": "python/turtle.html#turtle.penup", "desc": "Pull the pen up – no drawing when moving" }, { "name": "turtle.pensize", "type": "turtle", "path": "python/turtle.html#turtle.pensize", "desc": "Set the line thickness to width or return it" }, { "name": "turtle.pen", "type": "turtle", "path": "python/turtle.html#turtle.pen", "desc": "Return or set the pen’s attributes in a “pen-dictionary” with the following key/value pairs:" }, { "name": "turtle.isdown", "type": "turtle", "path": "python/turtle.html#turtle.isdown", "desc": "Return True if pen is down, False if it’s up" }, { "name": "turtle.pencolor", "type": "turtle", "path": "python/turtle.html#turtle.pencolor", "desc": "Return or set the pencolor" }, { "name": "turtle.fillcolor", "type": "turtle", "path": "python/turtle.html#turtle.fillcolor", "desc": "Return or set the fillcolor" }, { "name": "turtle.color", "type": "turtle", "path": "python/turtle.html#turtle.color", "desc": "Return or set pencolor and fillcolor" }, { "name": "turtle.filling", "type": "turtle", "path": "python/turtle.html#turtle.filling", "desc": "Return fillstate (True if filling, False else)" }, { "name": "turtle.begin_fill", "type": "turtle", "path": "python/turtle.html#turtle.begin_fill", "desc": "To be called just before drawing a shape to be filled" }, { "name": "turtle.end_fill", "type": "turtle", "path": "python/turtle.html#turtle.end_fill", "desc": "Fill the shape drawn after the last call to begin_fill()" }, { "name": "turtle.reset", "type": "turtle", "path": "python/turtle.html#turtle.reset", "desc": "Delete the turtle’s drawings from the screen, re-center the turtle and set variables to the default values" }, { "name": "turtle.clear", "type": "turtle", "path": "python/turtle.html#turtle.clear", "desc": "Delete the turtle’s drawings from the screen" }, { "name": "turtle.write", "type": "turtle", "path": "python/turtle.html#turtle.write", "desc": "Write text - the string representation of arg - at the current turtle position according to align (“left”, “center” or right”) and with the given font" }, { "name": "turtle.hideturtle", "type": "turtle", "path": "python/turtle.html#turtle.hideturtle", "desc": "Make the turtle invisible" }, { "name": "turtle.showturtle", "type": "turtle", "path": "python/turtle.html#turtle.showturtle", "desc": "Make the turtle visible" }, { "name": "turtle.isvisible", "type": "turtle", "path": "python/turtle.html#turtle.isvisible", "desc": "Return True if the Turtle is shown, False if it’s hidden" }, { "name": "turtle.shape", "type": "turtle", "path": "python/turtle.html#turtle.shape", "desc": "Set turtle shape to shape with given name or, if name is not given, return name of current shape" }, { "name": "turtle.resizemode", "type": "turtle", "path": "python/turtle.html#turtle.resizemode", "desc": "Set resizemode to one of the values: “auto”, “user”, “noresize”" }, { "name": "turtle.shapesize", "type": "turtle", "path": "python/turtle.html#turtle.shapesize", "desc": "Return or set the pen’s attributes x/y-stretchfactors and/or outline" }, { "name": "turtle.shearfactor", "type": "turtle", "path": "python/turtle.html#turtle.shearfactor", "desc": "Set or return the current shearfactor" }, { "name": "turtle.tilt", "type": "turtle", "path": "python/turtle.html#turtle.tilt", "desc": "Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle’s heading (direction of movement)" }, { "name": "turtle.settiltangle", "type": "turtle", "path": "python/turtle.html#turtle.settiltangle", "desc": "Rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle" }, { "name": "turtle.tiltangle", "type": "turtle", "path": "python/turtle.html#turtle.tiltangle", "desc": "Set or return the current tilt-angle" }, { "name": "turtle.shapetransform", "type": "turtle", "path": "python/turtle.html#turtle.shapetransform", "desc": "Set or return the current transformation matrix of the turtle shape" }, { "name": "turtle.get_shapepoly", "type": "turtle", "path": "python/turtle.html#turtle.get_shapepoly", "desc": "Return the current shape polygon as tuple of coordinate pairs" }, { "name": "turtle.onclick", "type": "turtle", "path": "python/turtle.html#turtle.onclick", "desc": "Bind fun to mouse-click events on this turtle" }, { "name": "turtle.onrelease", "type": "turtle", "path": "python/turtle.html#turtle.onrelease", "desc": "Bind fun to mouse-button-release events on this turtle" }, { "name": "turtle.ondrag", "type": "turtle", "path": "python/turtle.html#turtle.ondrag", "desc": "Bind fun to mouse-move events on this turtle" }, { "name": "turtle.begin_poly", "type": "turtle", "path": "python/turtle.html#turtle.begin_poly", "desc": "Start recording the vertices of a polygon" }, { "name": "turtle.end_poly", "type": "turtle", "path": "python/turtle.html#turtle.end_poly", "desc": "Stop recording the vertices of a polygon" }, { "name": "turtle.get_poly", "type": "turtle", "path": "python/turtle.html#turtle.get_poly", "desc": "Return the last recorded polygon" }, { "name": "turtle.clone", "type": "turtle", "path": "python/turtle.html#turtle.clone", "desc": "Create and return a clone of the turtle with same position, heading and turtle properties" }, { "name": "turtle.getturtle", "type": "turtle", "path": "python/turtle.html#turtle.getturtle", "desc": "Return the Turtle object itself" }, { "name": "turtle.getscreen", "type": "turtle", "path": "python/turtle.html#turtle.getscreen", "desc": "Return the TurtleScreen object the turtle is drawing on" }, { "name": "turtle.setundobuffer", "type": "turtle", "path": "python/turtle.html#turtle.setundobuffer", "desc": "Set or disable undobuffer" }, { "name": "turtle.undobufferentries", "type": "turtle", "path": "python/turtle.html#turtle.undobufferentries", "desc": "Return number of entries in the undobuffer" }, { "name": "turtle.bgcolor", "type": "turtle", "path": "python/turtle.html#turtle.bgcolor", "desc": "Set or return background color of the TurtleScreen" }, { "name": "turtle.bgpic", "type": "turtle", "path": "python/turtle.html#turtle.bgpic", "desc": "Set background image or return name of current backgroundimage" }, { "name": "turtle.screensize", "type": "turtle", "path": "python/turtle.html#turtle.screensize", "desc": "If no arguments are given, return current (canvaswidth, canvasheight)" }, { "name": "turtle.setworldcoordinates", "type": "turtle", "path": "python/turtle.html#turtle.setworldcoordinates", "desc": "Set up user-defined coordinate system and switch to mode “world” if necessary" }, { "name": "turtle.delay", "type": "turtle", "path": "python/turtle.html#turtle.delay", "desc": "Set or return the drawing delay in milliseconds" }, { "name": "turtle.tracer", "type": "turtle", "path": "python/turtle.html#turtle.tracer", "desc": "打开/关闭乌龟动画并为更新图纸设置延迟" }, { "name": "turtle.update", "type": "turtle", "path": "python/turtle.html#turtle.update", "desc": "Perform a TurtleScreen update" }, { "name": "turtle.listen", "type": "turtle", "path": "python/turtle.html#turtle.listen", "desc": "Set focus on TurtleScreen (in order to collect key-events)" }, { "name": "turtle.onkey", "type": "turtle", "path": "python/turtle.html#turtle.onkey", "desc": "Bind fun to key-release event of key" }, { "name": "turtle.onkeypress", "type": "turtle", "path": "python/turtle.html#turtle.onkeypress", "desc": "Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given" }, { "name": "turtle.ontimer", "type": "turtle", "path": "python/turtle.html#turtle.ontimer", "desc": "Install a timer that calls fun after t milliseconds" }, { "name": "turtle.mainloop", "type": "turtle", "path": "python/turtle.html#turtle.mainloop", "desc": "开始事件循环 - 调用Tkinter的mainloop函数" }, { "name": "turtle.textinput", "type": "turtle", "path": "python/turtle.html#turtle.textinput", "desc": "Pop up a dialog window for input of a string" }, { "name": "turtle.numinput", "type": "turtle", "path": "python/turtle.html#turtle.numinput", "desc": "Pop up a dialog window for input of a number" }, { "name": "turtle.mode", "type": "turtle", "path": "python/turtle.html#turtle.mode", "desc": "Set turtle mode (“standard”, “logo” or “world”) and perform reset" }, { "name": "turtle.colormode", "type": "turtle", "path": "python/turtle.html#turtle.colormode", "desc": "返回colormode或将其设置为1" }, { "name": "turtle.getcanvas", "type": "turtle", "path": "python/turtle.html#turtle.getcanvas", "desc": "Return the Canvas of this TurtleScreen" }, { "name": "turtle.getshapes", "type": "turtle", "path": "python/turtle.html#turtle.getshapes", "desc": "Return a list of names of all currently available turtle shapes" }, { "name": "turtle.register_shape", "type": "turtle", "path": "python/turtle.html#turtle.register_shape", "desc": "There are three different ways to call this function:" }, { "name": "turtle.turtles", "type": "turtle", "path": "python/turtle.html#turtle.turtles", "desc": "Return the list of turtles on the screen" }, { "name": "turtle.window_height", "type": "turtle", "path": "python/turtle.html#turtle.window_height", "desc": "Return the height of the turtle window" }, { "name": "turtle.window_width", "type": "turtle", "path": "python/turtle.html#turtle.window_width", "desc": "Return the width of the turtle window" }, { "name": "turtle.bye", "type": "turtle", "path": "python/turtle.html#turtle.bye", "desc": "Shut the turtlegraphics window" }, { "name": "turtle.exitonclick", "type": "turtle", "path": "python/turtle.html#turtle.exitonclick", "desc": "Bind bye() method to mouse clicks on the Screen" }, { "name": "turtle.setup", "type": "turtle", "path": "python/turtle.html#turtle.setup", "desc": "Set the size and position of the main window" }, { "name": "turtle.title", "type": "turtle", "path": "python/turtle.html#turtle.title", "desc": "Set title of turtle window to titlestring" }, { "name": "turtle.write_docstringdict", "type": "turtle", "path": "python/turtle.html#turtle.write_docstringdict", "desc": "Create and write docstring-dictionary to a Python script with the given filename" }, { "name": "types.new_class", "type": "types", "path": "python/types.html#types.new_class", "desc": "使用适当的元类动态创建类对象" }, { "name": "types.prepare_class", "type": "types", "path": "python/types.html#types.prepare_class", "desc": "计算适当的元类并创建类命名空间" }, { "name": "types.DynamicClassAttribute", "type": "types", "path": "python/types.html#types.DynamicClassAttribute", "desc": "将类的路由属性访问权限授予__getattr__" }, { "name": "types.coroutine", "type": "types", "path": "python/types.html#types.coroutine", "desc": "此函数将generator函数转换为coroutine function，返回基于生成器的协程" }, { "name": "types.FunctionType", "type": "types", "path": "python/types.html#types.FunctionType", "desc": "由lambda表达式创建的用户定义函数和函数的类型" }, { "name": "types.GeneratorType", "type": "types", "path": "python/types.html#types.GeneratorType", "desc": "由生成器函数创建的generator  - 类型对象" }, { "name": "types.CoroutineType", "type": "types", "path": "python/types.html#types.CoroutineType", "desc": "由async def函数创建的coroutine对象的类型" }, { "name": "types.CodeType", "type": "types", "path": "python/types.html#types.CodeType", "desc": "由compile()返回的代码对象的类型" }, { "name": "types.MethodType", "type": "types", "path": "python/types.html#types.MethodType", "desc": "methodtype" }, { "name": "types.BuiltinFunctionType", "type": "types", "path": "python/types.html#types.BuiltinFunctionType", "desc": "内建函数的类型如len()或sys" }, { "name": "types.TracebackType", "type": "types", "path": "python/types.html#types.TracebackType", "desc": "跟踪对象的类型，例如在sys" }, { "name": "types.FrameType", "type": "types", "path": "python/types.html#types.FrameType", "desc": "如tb" }, { "name": "types.GetSetDescriptorType", "type": "types", "path": "python/types.html#types.GetSetDescriptorType", "desc": "在扩展模块中使用PyGetSetDef定义的对象类型，例如FrameType" }, { "name": "types.MemberDescriptorType", "type": "types", "path": "python/types.html#types.MemberDescriptorType", "desc": "在扩展模块中使用PyMemberDef定义的对象类型，例如datetime" }, { "name": "typing.NamedTuple", "type": "typing", "path": "python/typing.html#typing.NamedTuple", "desc": "namedtuple的类型化版本" }, { "name": "typing.cast", "type": "typing", "path": "python/typing.html#typing.cast", "desc": "将值转换为类型" }, { "name": "typing.get_type_hints", "type": "typing", "path": "python/typing.html#typing.get_type_hints", "desc": "返回函数或方法对象的类型提示" }, { "name": "typing.no_type_check", "type": "typing", "path": "python/typing.html#typing.no_type_check", "desc": "装饰器来指示注解不是类型提示" }, { "name": "typing.no_type_check_decorator", "type": "typing", "path": "python/typing.html#typing.no_type_check_decorator", "desc": "装饰器给另一个装饰器no_type_check()效果" }, { "name": "unicodedata.lookup", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.lookup", "desc": "通过一个名称来查找字符" }, { "name": "unicodedata.name", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.name", "desc": "返回分配给字符chr的名称作为字符串" }, { "name": "unicodedata.decimal", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.decimal", "desc": "将分配给字符chr的十进制值作为整数返回" }, { "name": "unicodedata.digit", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.digit", "desc": "将分配给字符chr的数字值作为整数返回" }, { "name": "unicodedata.numeric", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.numeric", "desc": "返回分配给字符chr的数值为float" }, { "name": "unicodedata.category", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.category", "desc": "将分配给字符chr的一般类别返回为字符串" }, { "name": "unicodedata.bidirectional", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.bidirectional", "desc": "以字符串形式返回分配给字符chr的双向类" }, { "name": "unicodedata.combining", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.combining", "desc": "返回分配给字符chr的规范组合类作为整数" }, { "name": "unicodedata.east_asian_width", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.east_asian_width", "desc": "将分配给字符chr的东亚宽度返回为字符串" }, { "name": "unicodedata.mirrored", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.mirrored", "desc": "将分配给字符chr的镜像属性返回为整数" }, { "name": "unicodedata.decomposition", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.decomposition", "desc": "以字符串形式返回分配给字符chr的字符分解映射" }, { "name": "unicodedata.normalize", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.normalize", "desc": "返回Unicode字符串unistr的form规范形式" }, { "name": "unicodedata.unidata_version", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.unidata_version", "desc": "此模块中使用的Unicode数据库的版本" }, { "name": "unicodedata.ucd_3_2_0", "type": "unicodedata", "path": "python/unicodedata.html#unicodedata.ucd_3_2_0", "desc": "这是一个与整个模块具有相同方法的对象，但对于需要此特定版本的Unicode数据库（例如IDNA）的应用程序，则使用Unicode数据库版本3" }, { "name": "unittest.skip", "type": "unittest", "path": "python/unittest.html#unittest.skip", "desc": "Unconditionally skip the decorated test" }, { "name": "unittest.skipIf", "type": "unittest", "path": "python/unittest.html#unittest.skipIf", "desc": "Skip the decorated test if condition is true" }, { "name": "unittest.skipUnless", "type": "unittest", "path": "python/unittest.html#unittest.skipUnless", "desc": "Skip the decorated test unless condition is true" }, { "name": "unittest.expectedFailure", "type": "unittest", "path": "python/unittest.html#unittest.expectedFailure", "desc": "Mark the test as an expected failure" }, { "name": "unittest.main", "type": "unittest", "path": "python/unittest.html#unittest.main", "desc": "A command-line program that loads a set of tests from module and runs them; this is primarily for making test modules conveniently executable" }, { "name": "unittest.installHandler", "type": "unittest", "path": "python/unittest.html#unittest.installHandler", "desc": "Install the control-c handler" }, { "name": "unittest.registerResult", "type": "unittest", "path": "python/unittest.html#unittest.registerResult", "desc": "Register a TestResult object for control-c handling" }, { "name": "unittest.removeResult", "type": "unittest", "path": "python/unittest.html#unittest.removeResult", "desc": "Remove a registered result" }, { "name": "unittest.removeHandler", "type": "unittest", "path": "python/unittest.html#unittest.removeHandler", "desc": "When called without arguments this function removes the control-c handler if it has been installed" }, { "name": "unittest.defaultTestLoader", "type": "unittest", "path": "python/unittest.html#unittest.defaultTestLoader", "desc": "Instance of the TestLoader class intended to be shared" }, { "name": "unittest.mock.patch", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.patch", "desc": "patch() acts as a function decorator, class decorator or a context manager" }, { "name": "unittest.mock.patch.object", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.patch.object", "desc": "patch the named member (attribute) on an object (target) with a mock object" }, { "name": "unittest.mock.patch.dict", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.patch.dict", "desc": "Patch a dictionary, or dictionary like object, and restore the dictionary to its original state after the test" }, { "name": "unittest.mock.patch.multiple", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.patch.multiple", "desc": "Perform multiple patches in a single call" }, { "name": "unittest.mock.patch.stopall", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.patch.stopall", "desc": "Stop all active patches" }, { "name": "unittest.mock.call", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.call", "desc": "call() is a helper object for making simpler assertions, for comparing with call_args, call_args_list, mock_calls and method_calls" }, { "name": "unittest.mock.create_autospec", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.create_autospec", "desc": "Create a mock object using another object as a spec" }, { "name": "unittest.mock.mock_open", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.mock_open", "desc": "A helper function to create a mock to replace the use of open()" }, { "name": "unittest.mock.sentinel", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.sentinel", "desc": "The sentinel object provides a convenient way of providing unique objects for your tests" }, { "name": "unittest.mock.DEFAULT", "type": "unittest.mock", "path": "python/unittest.mock.html#unittest.mock.DEFAULT", "desc": "The DEFAULT object is a pre-created sentinel (actually sentinel" }, { "name": "urllib.parse.urlparse", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.urlparse", "desc": "将URL解析为六个部分，返回一个6元组" }, { "name": "urllib.parse.parse_qs", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.parse_qs", "desc": "解析作为字符串参数（application / x-www-form-urlencoded类型的数据）提供的查询字符串" }, { "name": "urllib.parse.parse_qsl", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.parse_qsl", "desc": "解析作为字符串参数（application / x-www-form-urlencoded类型的数据）提供的查询字符串" }, { "name": "urllib.parse.urlunparse", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.urlunparse", "desc": "从urlparse()返回的元组构造一个URL" }, { "name": "urllib.parse.urlsplit", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.urlsplit", "desc": "这类似于urlparse()，但不会从URL中分离参数" }, { "name": "urllib.parse.urlunsplit", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.urlunsplit", "desc": "将urlsplit()返回的元组元素合并为一个完整的URL作为字符串" }, { "name": "urllib.parse.urljoin", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.urljoin", "desc": "通过将“基本网址”（基本）与另一个网址（url）组合，构造完整（“绝对”）网址" }, { "name": "urllib.parse.urldefrag", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.urldefrag", "desc": "如果url包含片段标识符，则返回没有片段标识符的url的修改版本，片段标识符作为单独的字符串" }, { "name": "urllib.parse.quote", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.quote", "desc": "使用%xx转义替换string中的特殊字符" }, { "name": "urllib.parse.quote_plus", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.quote_plus", "desc": "类似quote()，但是用加号替换空格，在转义HTML表单值来构建查询字符串以进入URL时，这是必需的" }, { "name": "urllib.parse.quote_from_bytes", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.quote_from_bytes", "desc": "像quote()，但接受bytes对象而不是str，并且不执行字符串到字节编码" }, { "name": "urllib.parse.unquote", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.unquote", "desc": "将%xx转义替换为等效的单字符" }, { "name": "urllib.parse.unquote_plus", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.unquote_plus", "desc": "类似于unquote()，但是也可以用空格替换加号，这是不需要引用HTML表单值的" }, { "name": "urllib.parse.unquote_to_bytes", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.unquote_to_bytes", "desc": "Replace %xx escapes by their single-octet equivalent, and return a bytes object" }, { "name": "urllib.parse.urlencode", "type": "urllib.parse", "path": "python/urllib.parse.html#urllib.parse.urlencode", "desc": "将映射对象或两元素元组序列，可以包含str或字节对象，转换为百分号编码的ASCII文本字符串" }, { "name": "urllib.request.urlopen", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.urlopen", "desc": "打开url参数传进来的网址，既可以是一个字符串，又可以是一个Request对象" }, { "name": "urllib.request.install_opener", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.install_opener", "desc": "安装OpenerDirector实例作为默认全局启动器" }, { "name": "urllib.request.build_opener", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.build_opener", "desc": "返回OpenerDirector实例，按所给定的顺序链接处理程序" }, { "name": "urllib.request.pathname2url", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.pathname2url", "desc": "将路径名path从本地语法转换为URL的路径组件中使用的形式" }, { "name": "urllib.request.url2pathname", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.url2pathname", "desc": "将路径组件路径从百分比编码的URL转换为路径的本地语法" }, { "name": "urllib.request.getproxies", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.getproxies", "desc": "这个帮助函数返回一个方案到代理服务器URL映射的字典" }, { "name": "urllib.request.urlretrieve", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.urlretrieve", "desc": "将由URL表示的网络对象复制到本地文件" }, { "name": "urllib.request.urlcleanup", "type": "urllib.request", "path": "python/urllib.request.html#urllib.request.urlcleanup", "desc": "清除先前对urlretrieve()调用可能遗留的临时文件" }, { "name": "uu.encode", "type": "uu", "path": "python/uu.html#uu.encode", "desc": "Uuencode文件in_file导入文件out_file" }, { "name": "uu.decode", "type": "uu", "path": "python/uu.html#uu.decode", "desc": "此调用会将uuencoded文件in_file解码，将结果放在文件out_file上" }, { "name": "uuid.getnode", "type": "uuid", "path": "python/uuid.html#uuid.getnode", "desc": "获取硬件地址作为48位正整数" }, { "name": "uuid.uuid1", "type": "uuid", "path": "python/uuid.html#uuid.uuid1", "desc": "基于主机ID，序列号，当前时间生成UUID" }, { "name": "uuid.uuid3", "type": "uuid", "path": "python/uuid.html#uuid.uuid3", "desc": "基于命名空间标识符（一个UUID）和一个名称（一个字符串）的MD5哈希生成UUID" }, { "name": "uuid.uuid4", "type": "uuid", "path": "python/uuid.html#uuid.uuid4", "desc": "生成随机UUID" }, { "name": "uuid.uuid5", "type": "uuid", "path": "python/uuid.html#uuid.uuid5", "desc": "基于命名空间标识符（其是UUID）和名称（其是字符串）的SHA-1散列来生成UUID" }, { "name": "uuid.NAMESPACE_DNS", "type": "uuid", "path": "python/uuid.html#uuid.NAMESPACE_DNS", "desc": "指定此命名空间时，name字符串是一个FQDN" }, { "name": "uuid.NAMESPACE_URL", "type": "uuid", "path": "python/uuid.html#uuid.NAMESPACE_URL", "desc": "指定此命名空间时，name字符串是一个URL" }, { "name": "uuid.NAMESPACE_OID", "type": "uuid", "path": "python/uuid.html#uuid.NAMESPACE_OID", "desc": "指定此命名空间时，名称字符串是ISO OID" }, { "name": "uuid.NAMESPACE_X500", "type": "uuid", "path": "python/uuid.html#uuid.NAMESPACE_X500", "desc": "指定此命名空间时，名称字符串是DER中的X" }, { "name": "uuid.RESERVED_NCS", "type": "uuid", "path": "python/uuid.html#uuid.RESERVED_NCS", "desc": "保留NCS兼容性" }, { "name": "uuid.RFC_4122", "type": "uuid", "path": "python/uuid.html#uuid.RFC_4122", "desc": "指定 RFC 4122中给出的UUID布局" }, { "name": "uuid.RESERVED_MICROSOFT", "type": "uuid", "path": "python/uuid.html#uuid.RESERVED_MICROSOFT", "desc": "保留用于Microsoft兼容性" }, { "name": "uuid.RESERVED_FUTURE", "type": "uuid", "path": "python/uuid.html#uuid.RESERVED_FUTURE", "desc": "留作将来定义" }, { "name": "venv.create", "type": "venv", "path": "python/venv.html#venv.create", "desc": "使用给定的关键字参数创建EnvBuilder，并使用env_dir参数调用其create()方法" }, { "name": "warnings.warn", "type": "warnings", "path": "python/warnings.html#warnings.warn", "desc": "发出警告，或者可能忽略它或引发异常" }, { "name": "warnings.warn_explicit", "type": "warnings", "path": "python/warnings.html#warnings.warn_explicit", "desc": "这是对warn()功能的低级接口，显式传递消息，类别，文件名和行号，以及可选的模块名称和注册表（应为__warningregistry__模块的字典）" }, { "name": "warnings.showwarning", "type": "warnings", "path": "python/warnings.html#warnings.showwarning", "desc": "向文件写入警告" }, { "name": "warnings.formatwarning", "type": "warnings", "path": "python/warnings.html#warnings.formatwarning", "desc": "按标准方式格式化警告" }, { "name": "warnings.filterwarnings", "type": "warnings", "path": "python/warnings.html#warnings.filterwarnings", "desc": "在warnings filter specifications列表中插入一个条目" }, { "name": "warnings.simplefilter", "type": "warnings", "path": "python/warnings.html#warnings.simplefilter", "desc": "在warnings filter specifications列表中插入一个简单的条目" }, { "name": "warnings.resetwarnings", "type": "warnings", "path": "python/warnings.html#warnings.resetwarnings", "desc": "重置警告过滤器" }, { "name": "wave.open", "type": "wave", "path": "python/wave.html#wave.open", "desc": "如果文件是字符串，请按该名称打开该文件，否则将其视为类文件对象" }, { "name": "wave.openfp", "type": "wave", "path": "python/wave.html#wave.openfp", "desc": "为维持向后兼容性的open()的同义词" }, { "name": "weakref.proxy", "type": "weakref", "path": "python/weakref.html#weakref.proxy", "desc": "将代理返回到使用弱引用的对象" }, { "name": "weakref.getweakrefcount", "type": "weakref", "path": "python/weakref.html#weakref.getweakrefcount", "desc": "返回引用对象的弱引用和代理的数量" }, { "name": "weakref.getweakrefs", "type": "weakref", "path": "python/weakref.html#weakref.getweakrefs", "desc": "返回引用对象的所有弱引用和代理对象的列表" }, { "name": "weakref.ReferenceType", "type": "weakref", "path": "python/weakref.html#weakref.ReferenceType", "desc": "弱引用对象的类型对象" }, { "name": "weakref.ProxyType", "type": "weakref", "path": "python/weakref.html#weakref.ProxyType", "desc": "不可调用对象的代理的类型对象" }, { "name": "weakref.CallableProxyType", "type": "weakref", "path": "python/weakref.html#weakref.CallableProxyType", "desc": "可调用对象的代理的类型对象" }, { "name": "weakref.ProxyTypes", "type": "weakref", "path": "python/weakref.html#weakref.ProxyTypes", "desc": "包含代理的所有类型对象的序列" }, { "name": "webbrowser.open", "type": "webbrowser", "path": "python/webbrowser.html#webbrowser.open", "desc": "调用默认浏览器打开 url " }, { "name": "webbrowser.open_new", "type": "webbrowser", "path": "python/webbrowser.html#webbrowser.open_new", "desc": "如果可能，在默认浏览器的新窗口中打开url，否则，在唯一的浏览器窗口中打开url" }, { "name": "webbrowser.open_new_tab", "type": "webbrowser", "path": "python/webbrowser.html#webbrowser.open_new_tab", "desc": "如果可能，在默认浏览器的新页面（“标签”）中打开url，否则等效于open_new()" }, { "name": "webbrowser.get", "type": "webbrowser", "path": "python/webbrowser.html#webbrowser.get", "desc": "使用返回浏览器类型的控制器对象" }, { "name": "webbrowser.register", "type": "webbrowser", "path": "python/webbrowser.html#webbrowser.register", "desc": "注册浏览器类型名称" }, { "name": "winreg.CloseKey", "type": "winreg", "path": "python/winreg.html#winreg.CloseKey", "desc": "关闭以前打开的注册表项" }, { "name": "winreg.ConnectRegistry", "type": "winreg", "path": "python/winreg.html#winreg.ConnectRegistry", "desc": "与另一台计算机上的预定义注册表句柄建立连接，并返回handle object" }, { "name": "winreg.CreateKey", "type": "winreg", "path": "python/winreg.html#winreg.CreateKey", "desc": "创建或打开指定的键，返回handle object" }, { "name": "winreg.CreateKeyEx", "type": "winreg", "path": "python/winreg.html#winreg.CreateKeyEx", "desc": "创建或打开指定的键，返回handle object" }, { "name": "winreg.DeleteKey", "type": "winreg", "path": "python/winreg.html#winreg.DeleteKey", "desc": "删除指定的键" }, { "name": "winreg.DeleteKeyEx", "type": "winreg", "path": "python/winreg.html#winreg.DeleteKeyEx", "desc": "删除指定的键" }, { "name": "winreg.DeleteValue", "type": "winreg", "path": "python/winreg.html#winreg.DeleteValue", "desc": "从注册表项中删除命名的值" }, { "name": "winreg.EnumKey", "type": "winreg", "path": "python/winreg.html#winreg.EnumKey", "desc": "枚举打开的注册表项的子项，返回一个字符串" }, { "name": "winreg.EnumValue", "type": "winreg", "path": "python/winreg.html#winreg.EnumValue", "desc": "枚举打开的注册表项的值，返回元组" }, { "name": "winreg.ExpandEnvironmentStrings", "type": "winreg", "path": "python/winreg.html#winreg.ExpandEnvironmentStrings", "desc": "在像REG_EXPAND_SZ的字符串中扩展环境变量占位符%NAME%：" }, { "name": "winreg.FlushKey", "type": "winreg", "path": "python/winreg.html#winreg.FlushKey", "desc": "将键的所有属性写入注册表" }, { "name": "winreg.LoadKey", "type": "winreg", "path": "python/winreg.html#winreg.LoadKey", "desc": "在指定的键下创建子键，并将来自指定文件的注册信息存储到该子键中" }, { "name": "winreg.OpenKey", "type": "winreg", "path": "python/winreg.html#winreg.OpenKey", "desc": "打开指定的键，返回handle object" }, { "name": "winreg.QueryInfoKey", "type": "winreg", "path": "python/winreg.html#winreg.QueryInfoKey", "desc": "返回有关键的信息，作为元组" }, { "name": "winreg.QueryValue", "type": "winreg", "path": "python/winreg.html#winreg.QueryValue", "desc": "检索键的未命名值，作为字符串" }, { "name": "winreg.QueryValueEx", "type": "winreg", "path": "python/winreg.html#winreg.QueryValueEx", "desc": "检索与打开的注册表项相关联的指定值名称的类型和数据" }, { "name": "winreg.SaveKey", "type": "winreg", "path": "python/winreg.html#winreg.SaveKey", "desc": "将指定的键及其所有子键保存到指定的文件" }, { "name": "winreg.SetValue", "type": "winreg", "path": "python/winreg.html#winreg.SetValue", "desc": "将值与指定的键相关联" }, { "name": "winreg.SetValueEx", "type": "winreg", "path": "python/winreg.html#winreg.SetValueEx", "desc": "将数据存储在打开的注册表项的值字段中" }, { "name": "winreg.DisableReflectionKey", "type": "winreg", "path": "python/winreg.html#winreg.DisableReflectionKey", "desc": "对运行在64位操作系统上的32位进程禁用注册表反射" }, { "name": "winreg.EnableReflectionKey", "type": "winreg", "path": "python/winreg.html#winreg.EnableReflectionKey", "desc": "恢复指定的禁用键的注册表反射" }, { "name": "winreg.QueryReflectionKey", "type": "winreg", "path": "python/winreg.html#winreg.QueryReflectionKey", "desc": "确定指定键的反射状态" }, { "name": "winreg.HKEY_CLASSES_ROOT", "type": "winreg", "path": "python/winreg.html#winreg.HKEY_CLASSES_ROOT", "desc": "从属于此键的注册表项定义文档的类型（或类）以及与这些类型相关联的属性" }, { "name": "winreg.HKEY_CURRENT_USER", "type": "winreg", "path": "python/winreg.html#winreg.HKEY_CURRENT_USER", "desc": "从属于此键的注册表项定义当前用户的首选项" }, { "name": "winreg.HKEY_LOCAL_MACHINE", "type": "winreg", "path": "python/winreg.html#winreg.HKEY_LOCAL_MACHINE", "desc": "此键下属的注册表项定义计算机的物理状态，包括有关总线类型，系统内存和已安装的硬件和软件的数据" }, { "name": "winreg.HKEY_USERS", "type": "winreg", "path": "python/winreg.html#winreg.HKEY_USERS", "desc": "从属于此键的注册表项定义本地计算机上新用户的默认用户配置和当前用户的用户配置" }, { "name": "winreg.HKEY_PERFORMANCE_DATA", "type": "winreg", "path": "python/winreg.html#winreg.HKEY_PERFORMANCE_DATA", "desc": "此密钥下的注册表项允许您访问性能数据" }, { "name": "winreg.HKEY_CURRENT_CONFIG", "type": "winreg", "path": "python/winreg.html#winreg.HKEY_CURRENT_CONFIG", "desc": "包含有关本地计算机系统的当前硬件配置文件的信息" }, { "name": "winreg.HKEY_DYN_DATA", "type": "winreg", "path": "python/winreg.html#winreg.HKEY_DYN_DATA", "desc": "此键在98之后的Windows版本中不使用" }, { "name": "winreg.KEY_ALL_ACCESS", "type": "winreg", "path": "python/winreg.html#winreg.KEY_ALL_ACCESS", "desc": "合并STANDARD_RIGHTS_REQUIRED，KEY_QUERY_VALUE，KEY_SET_VALUE，KEY_CREATE_SUB_KEY，KEY_ENUMERATE_SUB_KEYS，KEY_NOTIFY KEY_CREATE_LINK访问权限" }, { "name": "winreg.KEY_WRITE", "type": "winreg", "path": "python/winreg.html#winreg.KEY_WRITE", "desc": "合并STANDARD_RIGHTS_WRITE，KEY_SET_VALUE和KEY_CREATE_SUB_KEY访问权限" }, { "name": "winreg.KEY_READ", "type": "winreg", "path": "python/winreg.html#winreg.KEY_READ", "desc": "合并STANDARD_RIGHTS_READ，KEY_QUERY_VALUE，KEY_ENUMERATE_SUB_KEYS和KEY_NOTIFY值" }, { "name": "winreg.KEY_EXECUTE", "type": "winreg", "path": "python/winreg.html#winreg.KEY_EXECUTE", "desc": "等效于KEY_READ" }, { "name": "winreg.KEY_QUERY_VALUE", "type": "winreg", "path": "python/winreg.html#winreg.KEY_QUERY_VALUE", "desc": "需要查询注册表项的值" }, { "name": "winreg.KEY_SET_VALUE", "type": "winreg", "path": "python/winreg.html#winreg.KEY_SET_VALUE", "desc": "需要创建，删除或设置注册表值" }, { "name": "winreg.KEY_CREATE_SUB_KEY", "type": "winreg", "path": "python/winreg.html#winreg.KEY_CREATE_SUB_KEY", "desc": "需要创建注册表项的子项" }, { "name": "winreg.KEY_ENUMERATE_SUB_KEYS", "type": "winreg", "path": "python/winreg.html#winreg.KEY_ENUMERATE_SUB_KEYS", "desc": "必需枚举注册表项的子项" }, { "name": "winreg.KEY_NOTIFY", "type": "winreg", "path": "python/winreg.html#winreg.KEY_NOTIFY", "desc": "需要为注册表项请求更改通知，或者为注册表项的子项请求更改通知" }, { "name": "winreg.KEY_CREATE_LINK", "type": "winreg", "path": "python/winreg.html#winreg.KEY_CREATE_LINK", "desc": "保留供系统使用" }, { "name": "winreg.KEY_WOW64_64KEY", "type": "winreg", "path": "python/winreg.html#winreg.KEY_WOW64_64KEY", "desc": "表示64位Windows上的应用程序应在64位注册表视图上运行" }, { "name": "winreg.KEY_WOW64_32KEY", "type": "winreg", "path": "python/winreg.html#winreg.KEY_WOW64_32KEY", "desc": "表示64位Windows上的应用程序应在32位注册表视图上运行" }, { "name": "winreg.REG_BINARY", "type": "winreg", "path": "python/winreg.html#winreg.REG_BINARY", "desc": "任何形式的二进制数据" }, { "name": "winreg.REG_DWORD", "type": "winreg", "path": "python/winreg.html#winreg.REG_DWORD", "desc": "32位数" }, { "name": "winreg.REG_DWORD_LITTLE_ENDIAN", "type": "winreg", "path": "python/winreg.html#winreg.REG_DWORD_LITTLE_ENDIAN", "desc": "小端格式的32位数字" }, { "name": "winreg.REG_DWORD_BIG_ENDIAN", "type": "winreg", "path": "python/winreg.html#winreg.REG_DWORD_BIG_ENDIAN", "desc": "以big-endian格式的32位数字" }, { "name": "winreg.REG_EXPAND_SZ", "type": "winreg", "path": "python/winreg.html#winreg.REG_EXPAND_SZ", "desc": "Null终止的字符串，包含对环境变量的引用（%PATH%）" }, { "name": "winreg.REG_LINK", "type": "winreg", "path": "python/winreg.html#winreg.REG_LINK", "desc": "Unicode符号链接" }, { "name": "winreg.REG_MULTI_SZ", "type": "winreg", "path": "python/winreg.html#winreg.REG_MULTI_SZ", "desc": "以NULL结束的字符串序列，以两个空字符结束" }, { "name": "winreg.REG_NONE", "type": "winreg", "path": "python/winreg.html#winreg.REG_NONE", "desc": "没有定义值类型" }, { "name": "winreg.REG_RESOURCE_LIST", "type": "winreg", "path": "python/winreg.html#winreg.REG_RESOURCE_LIST", "desc": "设备驱动程序资源列表" }, { "name": "winreg.REG_FULL_RESOURCE_DESCRIPTOR", "type": "winreg", "path": "python/winreg.html#winreg.REG_FULL_RESOURCE_DESCRIPTOR", "desc": "硬件设置" }, { "name": "winreg.REG_RESOURCE_REQUIREMENTS_LIST", "type": "winreg", "path": "python/winreg.html#winreg.REG_RESOURCE_REQUIREMENTS_LIST", "desc": "硬件资源列表" }, { "name": "winreg.REG_SZ", "type": "winreg", "path": "python/winreg.html#winreg.REG_SZ", "desc": "以null结尾的字符串" }, { "name": "winsound.Beep", "type": "winsound", "path": "python/winsound.html#winsound.Beep", "desc": "让电脑发出&quot;哔&quot;的声音" }, { "name": "winsound.PlaySound", "type": "winsound", "path": "python/winsound.html#winsound.PlaySound", "desc": "从Platform API调用底层的PlaySound()函数" }, { "name": "winsound.MessageBeep", "type": "winsound", "path": "python/winsound.html#winsound.MessageBeep", "desc": "从Platform API调用底层的MessageBeep()函数" }, { "name": "winsound.SND_FILENAME", "type": "winsound", "path": "python/winsound.html#winsound.SND_FILENAME", "desc": "sound参数是WAV文件的名称" }, { "name": "winsound.SND_ALIAS", "type": "winsound", "path": "python/winsound.html#winsound.SND_ALIAS", "desc": "声音参数是来自注册表的声音关联名称" }, { "name": "winsound.SND_LOOP", "type": "winsound", "path": "python/winsound.html#winsound.SND_LOOP", "desc": "反复播放声音" }, { "name": "winsound.SND_MEMORY", "type": "winsound", "path": "python/winsound.html#winsound.SND_MEMORY", "desc": "PlaySound()的声音参数是WAV文件的存储器映像，作为字符串" }, { "name": "winsound.SND_PURGE", "type": "winsound", "path": "python/winsound.html#winsound.SND_PURGE", "desc": "停止播放指定声音的所有实例" }, { "name": "winsound.SND_ASYNC", "type": "winsound", "path": "python/winsound.html#winsound.SND_ASYNC", "desc": "立即返回，允许声音异步播放" }, { "name": "winsound.SND_NODEFAULT", "type": "winsound", "path": "python/winsound.html#winsound.SND_NODEFAULT", "desc": "如果无法找到指定的声音，请不要播放系统默认声音" }, { "name": "winsound.SND_NOSTOP", "type": "winsound", "path": "python/winsound.html#winsound.SND_NOSTOP", "desc": "不要打断当前正在播放的声音" }, { "name": "winsound.SND_NOWAIT", "type": "winsound", "path": "python/winsound.html#winsound.SND_NOWAIT", "desc": "如果声音驱动器忙，立即返回" }, { "name": "winsound.MB_ICONASTERISK", "type": "winsound", "path": "python/winsound.html#winsound.MB_ICONASTERISK", "desc": "播放SystemDefault声音" }, { "name": "winsound.MB_ICONEXCLAMATION", "type": "winsound", "path": "python/winsound.html#winsound.MB_ICONEXCLAMATION", "desc": "播放SystemExclamation声音" }, { "name": "winsound.MB_ICONHAND", "type": "winsound", "path": "python/winsound.html#winsound.MB_ICONHAND", "desc": "播放SystemHand声音" }, { "name": "winsound.MB_ICONQUESTION", "type": "winsound", "path": "python/winsound.html#winsound.MB_ICONQUESTION", "desc": "播放SystemQuestion声音" }, { "name": "winsound.MB_OK", "type": "winsound", "path": "python/winsound.html#winsound.MB_OK", "desc": "播放SystemDefault声音" }, { "name": "wsgiref.util.guess_scheme", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.util.guess_scheme", "desc": "通过检查environ 字典中的HTTPS环境变量，返回对wsgi" }, { "name": "wsgiref.util.request_uri", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.util.request_uri", "desc": "使用 PEP 3333的“URL重建”部分中找到的算法返回完整的请求URI（可选择包括查询字符串）" }, { "name": "wsgiref.util.application_uri", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.util.application_uri", "desc": "类似于request_uri()，除了忽略PATH_INFO和QUERY_STRING变量" }, { "name": "wsgiref.util.shift_path_info", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.util.shift_path_info", "desc": "将单个名称从PATH_INFO切换到SCRIPT_NAME，并返回名称" }, { "name": "wsgiref.util.setup_testing_defaults", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.util.setup_testing_defaults", "desc": "使用琐碎的默认值更新environ以进行测试" }, { "name": "wsgiref.util.is_hop_by_hop", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.util.is_hop_by_hop", "desc": "如果'header_name'是由 RFC 2616定义的HTTP / 1" }, { "name": "wsgiref.simple_server.make_server", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.simple_server.make_server", "desc": "创建在host和port上侦听的新WSGI服务器，接受app的连接" }, { "name": "wsgiref.simple_server.demo_app", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.simple_server.demo_app", "desc": "此函数是一个小但完整的WSGI应用程序，它返回一个包含消息“Hello world！”的文本页面以及environ参数中提供的键/值对列表" }, { "name": "wsgiref.validate.validator", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.validate.validator", "desc": "换行应用程序并返回一个新的WSGI应用程序对象" }, { "name": "wsgiref.handlers.read_environ", "type": "wsgiref", "path": "python/wsgiref.html#wsgiref.handlers.read_environ", "desc": "将os" }, { "name": "xml.dom.registerDOMImplementation", "type": "xml.dom", "path": "python/xml.dom.html#xml.dom.registerDOMImplementation", "desc": "Register the factory function with the name name" }, { "name": "xml.dom.getDOMImplementation", "type": "xml.dom", "path": "python/xml.dom.html#xml.dom.getDOMImplementation", "desc": "Return a suitable DOM implementation" }, { "name": "xml.dom.EMPTY_NAMESPACE", "type": "xml.dom", "path": "python/xml.dom.html#xml.dom.EMPTY_NAMESPACE", "desc": "The value used to indicate that no namespace is associated with a node in the DOM" }, { "name": "xml.dom.XML_NAMESPACE", "type": "xml.dom", "path": "python/xml.dom.html#xml.dom.XML_NAMESPACE", "desc": "The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4)" }, { "name": "xml.dom.XMLNS_NAMESPACE", "type": "xml.dom", "path": "python/xml.dom.html#xml.dom.XMLNS_NAMESPACE", "desc": "The namespace URI for namespace declarations, as defined by Document Object Model (DOM) Level 2 Core Specification (section 1" }, { "name": "xml.dom.XHTML_NAMESPACE", "type": "xml.dom", "path": "python/xml.dom.html#xml.dom.XHTML_NAMESPACE", "desc": "The URI of the XHTML namespace as defined by XHTML 1" }, { "name": "xml.dom.minidom.parse", "type": "xml.dom.minidom", "path": "python/xml.dom.minidom.html#xml.dom.minidom.parse", "desc": "从给定输入返回Document" }, { "name": "xml.dom.minidom.parseString", "type": "xml.dom.minidom", "path": "python/xml.dom.minidom.html#xml.dom.minidom.parseString", "desc": "返回表示字符串的Document" }, { "name": "xml.dom.pulldom.parse", "type": "xml.dom.pulldom", "path": "python/xml.dom.pulldom.html#xml.dom.pulldom.parse", "desc": "从给定输入返回DOMEventStream" }, { "name": "xml.dom.pulldom.parseString", "type": "xml.dom.pulldom", "path": "python/xml.dom.pulldom.html#xml.dom.pulldom.parseString", "desc": "返回表示（Unicode）字符串的DOMEventStream" }, { "name": "xml.dom.pulldom.default_bufsize", "type": "xml.dom.pulldom", "path": "python/xml.dom.pulldom.html#xml.dom.pulldom.default_bufsize", "desc": "bufsize参数到parse()的默认值" }, { "name": "xml.etree.ElementTree.Comment", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.Comment", "desc": "Comment element factory" }, { "name": "xml.etree.ElementTree.dump", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.dump", "desc": "Writes an element tree or element structure to sys" }, { "name": "xml.etree.ElementTree.fromstring", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring", "desc": "Parses an XML section from a string constant" }, { "name": "xml.etree.ElementTree.fromstringlist", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.fromstringlist", "desc": "Parses an XML document from a sequence of string fragments" }, { "name": "xml.etree.ElementTree.iselement", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.iselement", "desc": "Checks if an object appears to be a valid element object" }, { "name": "xml.etree.ElementTree.iterparse", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse", "desc": "Parses an XML section into an element tree incrementally, and reports what’s going on to the user" }, { "name": "xml.etree.ElementTree.parse", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.parse", "desc": "Parses an XML section into an element tree" }, { "name": "xml.etree.ElementTree.ProcessingInstruction", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.ProcessingInstruction", "desc": "PI element factory" }, { "name": "xml.etree.ElementTree.register_namespace", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace", "desc": "Registers a namespace prefix" }, { "name": "xml.etree.ElementTree.SubElement", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement", "desc": "Subelement factory" }, { "name": "xml.etree.ElementTree.tostring", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.tostring", "desc": "Generates a string representation of an XML element, including all subelements" }, { "name": "xml.etree.ElementTree.tostringlist", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.tostringlist", "desc": "Generates a string representation of an XML element, including all subelements" }, { "name": "xml.etree.ElementTree.XML", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.XML", "desc": "Parses an XML section from a string constant" }, { "name": "xml.etree.ElementTree.XMLID", "type": "xml.etree.elementtree", "path": "python/xml.etree.elementtree.html#xml.etree.ElementTree.XMLID", "desc": "Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements" }, { "name": "xml.sax.handler.all_features", "type": "xml.sax.handler", "path": "python/xml.sax.handler.html#xml.sax.handler.all_features", "desc": "所有功能的列表" }, { "name": "xml.sax.handler.all_properties", "type": "xml.sax.handler", "path": "python/xml.sax.handler.html#xml.sax.handler.all_properties", "desc": "所有已知属性名称的列表" }, { "name": "xml.sax.make_parser", "type": "xml.sax", "path": "python/xml.sax.html#xml.sax.make_parser", "desc": "创建并返回SAX XMLReader对象" }, { "name": "xml.sax.parse", "type": "xml.sax", "path": "python/xml.sax.html#xml.sax.parse", "desc": "创建一个SAX解析器并使用它来解析文档" }, { "name": "xml.sax.parseString", "type": "xml.sax", "path": "python/xml.sax.html#xml.sax.parseString", "desc": "类似于parse()，但是从作为参数接收的缓冲区字符串解析" }, { "name": "xml.sax.saxutils.escape", "type": "xml.sax.utils", "path": "python/xml.sax.utils.html#xml.sax.saxutils.escape", "desc": "Escape '&', '<', and '>' in a string of data" }, { "name": "xml.sax.saxutils.unescape", "type": "xml.sax.utils", "path": "python/xml.sax.utils.html#xml.sax.saxutils.unescape", "desc": "在数据字符串中取消转义'&amp;'，'&lt;'和'&gt;'" }, { "name": "xml.sax.saxutils.quoteattr", "type": "xml.sax.utils", "path": "python/xml.sax.utils.html#xml.sax.saxutils.quoteattr", "desc": "类似于escape()，但也准备数据以用作属性值" }, { "name": "xml.sax.saxutils.prepare_input_source", "type": "xml.sax.utils", "path": "python/xml.sax.utils.html#xml.sax.saxutils.prepare_input_source", "desc": "此函数接受一个输入源和一个可选的基址URL，并返回一个完全解析的InputSource对象，可以读取" }, { "name": "xmlrpc.client.dumps", "type": "xmlrpc.client", "path": "python/xmlrpc.client.html#xmlrpc.client.dumps", "desc": "将params转换为XML-RPC请求" }, { "name": "xmlrpc.client.loads", "type": "xmlrpc.client", "path": "python/xmlrpc.client.html#xmlrpc.client.loads", "desc": "将XML-RPC请求或响应转换为Python对象（params， methodname）" }, { "name": "zipapp.create_archive", "type": "zipapp", "path": "python/zipapp.html#zipapp.create_archive", "desc": "从源创建应用程序归档" }, { "name": "zipfile.is_zipfile", "type": "zipfile", "path": "python/zipfile.html#zipfile.is_zipfile", "desc": "如果filename是基于其幻数的有效ZIP文件，则返回True，否则返回False" }, { "name": "zipfile.ZIP_STORED", "type": "zipfile", "path": "python/zipfile.html#zipfile.ZIP_STORED", "desc": "未压缩的归档成员的数字常量" }, { "name": "zipfile.ZIP_DEFLATED", "type": "zipfile", "path": "python/zipfile.html#zipfile.ZIP_DEFLATED", "desc": "常用ZIP压缩方法的数字常量" }, { "name": "zipfile.ZIP_BZIP2", "type": "zipfile", "path": "python/zipfile.html#zipfile.ZIP_BZIP2", "desc": "BZIP2压缩方法的数字常量" }, { "name": "zipfile.ZIP_LZMA", "type": "zipfile", "path": "python/zipfile.html#zipfile.ZIP_LZMA", "desc": "LZMA压缩方法的数字常量" }, { "name": "zlib.adler32", "type": "zlib", "path": "python/zlib.html#zlib.adler32", "desc": "计算数据的Adler-32校验和" }, { "name": "zlib.compress", "type": "zlib", "path": "python/zlib.html#zlib.compress", "desc": "压缩数据中的字节，返回包含压缩数据的字节对象" }, { "name": "zlib.compressobj", "type": "zlib", "path": "python/zlib.html#zlib.compressobj", "desc": "返回一个压缩对象，用于压缩不能立即适合内存的数据流" }, { "name": "zlib.crc32", "type": "zlib", "path": "python/zlib.html#zlib.crc32", "desc": "计算数据的CRC（循环冗余校验）校验和" }, { "name": "zlib.decompress", "type": "zlib", "path": "python/zlib.html#zlib.decompress", "desc": "解压缩数据中的字节，返回包含未压缩数据的字节对象" }, { "name": "zlib.decompressobj", "type": "zlib", "path": "python/zlib.html#zlib.decompressobj", "desc": "返回解压缩对象，用于解压缩不能立即适合内存的数据流" }, { "name": "zlib.ZLIB_VERSION", "type": "zlib", "path": "python/zlib.html#zlib.ZLIB_VERSION", "desc": "用于构建模块的zlib库的版本字符串" }, { "name": "zlib.ZLIB_RUNTIME_VERSION", "type": "zlib", "path": "python/zlib.html#zlib.ZLIB_RUNTIME_VERSION", "desc": "由解释器实际加载的zlib库的版本字符串" }, { "name": "_thread.start_new_thread", "type": "_thread", "path": "python/_thread.html#_thread.start_new_thread", "desc": "启动一个新线程并返回其标识符" }, { "name": "_thread.interrupt_main", "type": "_thread", "path": "python/_thread.html#_thread.interrupt_main", "desc": "引发主线程中的KeyboardInterrupt异常" }, { "name": "_thread.exit", "type": "_thread", "path": "python/_thread.html#_thread.exit", "desc": "引发SystemExit异常" }, { "name": "_thread.allocate_lock", "type": "_thread", "path": "python/_thread.html#_thread.allocate_lock", "desc": "返回一个新的锁对象" }, { "name": "_thread.get_ident", "type": "_thread", "path": "python/_thread.html#_thread.get_ident", "desc": "返回当前线程的'线程标识符'" }, { "name": "_thread.stack_size", "type": "_thread", "path": "python/_thread.html#_thread.stack_size", "desc": "返回创建新线程时使用的线程堆栈大小" }, { "name": "_thread.LockType", "type": "_thread", "path": "python/_thread.html#_thread.LockType", "desc": "这是锁对象的类型" }, { "name": "_thread.TIMEOUT_MAX", "type": "_thread", "path": "python/_thread.html#_thread.TIMEOUT_MAX", "desc": "Lock" } ]